"use strict";
exports.__esModule = true;
exports.useSlider = useSlider;
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _sliderUtils = require("./slider-utils");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook that implements an accessible range slider.
 *
 * It is an alternative to `<input type="range" />`, and returns
 * prop getters for the component parts
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider
 */ function useSlider(props) {
    var _getAriaValueText;
    var _props$min = props.min, min = _props$min === void 0 ? 0 : _props$min, _props$max = props.max, max = _props$max === void 0 ? 100 : _props$max, onChange = props.onChange, valueProp = props.value, defaultValue = props.defaultValue, isReversed = props.isReversed, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, idProp = props.id, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, onChangeStartProp = props.onChangeStart, onChangeEndProp = props.onChangeEnd, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, getAriaValueTextProp = props.getAriaValueText, ariaValueText = props["aria-valuetext"], ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], name = props.name, _props$focusThumbOnCh = props.focusThumbOnChange, focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh, htmlProps = _objectWithoutPropertiesLoose(props, [
        "min",
        "max",
        "onChange",
        "value",
        "defaultValue",
        "isReversed",
        "orientation",
        "id",
        "isDisabled",
        "isReadOnly",
        "onChangeStart",
        "onChangeEnd",
        "step",
        "getAriaValueText",
        "aria-valuetext",
        "aria-label",
        "aria-labelledby",
        "name",
        "focusThumbOnChange"
    ]);
    var onChangeStart = _hooks.useCallbackRef(onChangeStartProp);
    var onChangeEnd = _hooks.useCallbackRef(onChangeEndProp);
    var getAriaValueText = _hooks.useCallbackRef(getAriaValueTextProp);
    /**
   * Enable the slider handle controlled and uncontrolled scenarios
   */ var _useControllableState = _hooks.useControllableState({
        value: valueProp,
        defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),
        onChange: onChange
    }), computedValue = _useControllableState[0], setValue = _useControllableState[1];
    var _useBoolean = _hooks.useBoolean(), isDragging = _useBoolean[0], setDragging = _useBoolean[1];
    var prevIsDragging = _hooks.usePrevious(isDragging);
    var _useBoolean2 = _hooks.useBoolean(), isFocused = _useBoolean2[0], setFocused = _useBoolean2[1];
    var eventSourceRef = _react.useRef(null);
    var isInteractive = !(isDisabled || isReadOnly);
    /**
   * Constrain the value because it can't be less than min
   * or greater than max
   */ var value = _utils.clampValue(computedValue, min, max);
    var valueRef = _hooks.useLatestRef(value);
    var prevRef = _react.useRef(valueRef.current);
    var reversedValue = max - value + min;
    var trackValue = isReversed ? reversedValue : value;
    var trackPercent = _utils.valueToPercent(trackValue, min, max);
    var isVertical = orientation === "vertical";
    /**
   * Let's keep a reference to the slider track and thumb
   */ var trackRef = _react.useRef(null);
    var thumbRef = _react.useRef(null);
    var rootRef = _react.useRef(null);
    /**
   * Generate unique ids for component parts
   */ var _useIds = _hooks.useIds(idProp, "slider-thumb", "slider-track"), thumbId = _useIds[0], trackId = _useIds[1];
    /**
   * Get relative value of slider from the event by tracking
   * how far you clicked within the track to determine the value
   *
   * @todo - Refactor this later on to use info from pan session
   */ var getValueFromPointer = _react.useCallback(function(event) {
        var _event$touches$, _event$touches;
        if (!trackRef.current) return;
        eventSourceRef.current = "pointer";
        var trackRect = _utils.getBox(trackRef.current).borderBox;
        var _ref = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event, clientX = _ref.clientX, clientY = _ref.clientY;
        var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
        var length = isVertical ? trackRect.height : trackRect.width;
        var percent = diff / length;
        if (isReversed) percent = 1 - percent;
        var nextValue = _utils.percentToValue(percent, min, max);
        if (step) nextValue = parseFloat(_utils.roundValueToStep(nextValue, min, step));
        nextValue = _utils.clampValue(nextValue, min, max);
        return nextValue;
    }, [
        isVertical,
        isReversed,
        max,
        min,
        step
    ]);
    var tenSteps = (max - min) / 10;
    var oneStep = step || (max - min) / 100;
    var constrain = _react.useCallback(function(value1) {
        if (!isInteractive) return;
        value1 = parseFloat(_utils.roundValueToStep(value1, min, oneStep));
        value1 = _utils.clampValue(value1, min, max);
        setValue(value1);
    }, [
        oneStep,
        max,
        min,
        setValue,
        isInteractive
    ]);
    var actions = _react.useMemo(function() {
        return {
            stepUp: function stepUp(step1) {
                if (step1 === void 0) step1 = oneStep;
                var next = isReversed ? value - step1 : value + step1;
                constrain(next);
            },
            stepDown: function stepDown(step1) {
                if (step1 === void 0) step1 = oneStep;
                var next = isReversed ? value + step1 : value - step1;
                constrain(next);
            },
            reset: function reset() {
                return constrain(defaultValue || 0);
            },
            stepTo: function stepTo(value1) {
                return constrain(value1);
            }
        };
    }, [
        constrain,
        isReversed,
        value,
        oneStep,
        defaultValue
    ]);
    /**
   * Keyboard interaction to ensure users can operate
   * the slider using only their keyboard.
   */ var onKeyDown = _react.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            ArrowRight: function ArrowRight() {
                return actions.stepUp();
            },
            ArrowUp: function ArrowUp() {
                return actions.stepUp();
            },
            ArrowLeft: function ArrowLeft() {
                return actions.stepDown();
            },
            ArrowDown: function ArrowDown() {
                return actions.stepDown();
            },
            PageUp: function PageUp() {
                return actions.stepUp(tenSteps);
            },
            PageDown: function PageDown() {
                return actions.stepDown(tenSteps);
            },
            Home: function Home() {
                return constrain(min);
            },
            End: function End() {
                return constrain(max);
            }
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
            eventSourceRef.current = "keyboard";
        }
    }, [
        actions,
        constrain,
        max,
        min,
        tenSteps
    ]);
    /**
   * ARIA (Optional): To define a human readable representation of the value,
   * we allow users pass aria-valuetext.
   */ var valueText = (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _getAriaValueText : ariaValueText;
    /**
   * Measure the dimensions of the thumb so
   * we can center it within the track properly
   */ var thumbBoxModel = _hooks.useDimensions(thumbRef);
    /**
   * Compute styles for all component parts.
   */ var _useMemo = _react.useMemo(function() {
        var _thumbBoxModel$border;
        var thumbRect = (_thumbBoxModel$border = thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox) != null ? _thumbBoxModel$border : {
            width: 0,
            height: 0
        };
        return _sliderUtils.getPartsStyle({
            isReversed: isReversed,
            orientation: orientation,
            thumbRect: thumbRect,
            trackPercent: trackPercent
        });
    }, [
        isReversed,
        orientation,
        thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox,
        trackPercent
    ]), thumbStyle = _useMemo.thumbStyle, rootStyle = _useMemo.rootStyle, trackStyle = _useMemo.trackStyle, innerTrackStyle = _useMemo.innerTrackStyle;
    var focusThumb = _react.useCallback(function() {
        if (thumbRef.current && focusThumbOnChange) setTimeout(function() {
            return _utils.focus(thumbRef.current);
        });
    }, [
        focusThumbOnChange
    ]);
    _hooks.useUpdateEffect(function() {
        focusThumb();
        if (eventSourceRef.current === "keyboard") onChangeEndProp == null || onChangeEndProp(valueRef.current);
    }, [
        value,
        onChangeEndProp
    ]);
    var setValueFromPointer = function setValueFromPointer1(event) {
        var nextValue = getValueFromPointer(event);
        if (nextValue != null && nextValue !== valueRef.current) setValue(nextValue);
    };
    _hooks.usePanGesture(rootRef, {
        onPanSessionStart: function onPanSessionStart(event) {
            if (!isInteractive) return;
            setValueFromPointer(event);
        },
        onPanSessionEnd: function onPanSessionEnd() {
            if (!isInteractive) return;
            if (!prevIsDragging && prevRef.current !== valueRef.current) {
                onChangeEnd == null || onChangeEnd(valueRef.current);
                prevRef.current = valueRef.current;
            }
        },
        onPanStart: function onPanStart() {
            if (!isInteractive) return;
            setDragging.on();
            onChangeStart == null || onChangeStart(valueRef.current);
        },
        onPan: function onPan(event) {
            if (!isInteractive) return;
            setValueFromPointer(event);
        },
        onPanEnd: function onPanEnd() {
            if (!isInteractive) return;
            setDragging.off();
            onChangeEnd == null || onChangeEnd(valueRef.current);
        }
    });
    var getRootProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, htmlProps, {
            ref: _reactUtils.mergeRefs(ref, rootRef),
            tabIndex: -1,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            "data-focused": _utils.dataAttr(isFocused),
            style: _extends({
            }, props1.style, rootStyle)
        });
    }, [
        htmlProps,
        isDisabled,
        isFocused,
        rootStyle
    ]);
    var getTrackProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, trackRef),
            id: trackId,
            "data-disabled": _utils.dataAttr(isDisabled),
            style: _extends({
            }, props1.style, trackStyle)
        });
    }, [
        isDisabled,
        trackId,
        trackStyle
    ]);
    var getInnerTrackProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            style: _extends({
            }, props1.style, innerTrackStyle)
        });
    }, [
        innerTrackStyle
    ]);
    var getThumbProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, thumbRef),
            role: "slider",
            tabIndex: isInteractive ? 0 : undefined,
            id: thumbId,
            "data-active": _utils.dataAttr(isDragging),
            "aria-valuetext": valueText,
            "aria-valuemin": min,
            "aria-valuemax": max,
            "aria-valuenow": value,
            "aria-orientation": orientation,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            "aria-readonly": _utils.ariaAttr(isReadOnly),
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabel ? undefined : ariaLabelledBy,
            style: _extends({
            }, props1.style, thumbStyle),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onFocus: _utils.callAllHandlers(props1.onFocus, setFocused.on),
            onBlur: _utils.callAllHandlers(props1.onBlur, setFocused.off)
        });
    }, [
        ariaLabel,
        ariaLabelledBy,
        isDisabled,
        isDragging,
        isReadOnly,
        isInteractive,
        max,
        min,
        onKeyDown,
        orientation,
        setFocused.off,
        setFocused.on,
        thumbId,
        thumbStyle,
        value,
        valueText
    ]);
    var getMarkerProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var isInRange = !(props1.value < min || props1.value > max);
        var isHighlighted = value >= props1.value;
        var markerPercent = _utils.valueToPercent(props1.value, min, max);
        var markerStyle = _extends({
            position: "absolute",
            pointerEvents: "none"
        }, orient({
            orientation: orientation,
            vertical: {
                bottom: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
            },
            horizontal: {
                left: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
            }
        }));
        return _extends({
        }, props1, {
            ref: ref,
            role: "presentation",
            "aria-hidden": true,
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(!isInRange),
            "data-highlighted": _utils.dataAttr(isHighlighted),
            style: _extends({
            }, props1.style, markerStyle)
        });
    }, [
        isDisabled,
        isReversed,
        max,
        min,
        orientation,
        value
    ]);
    var getInputProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            type: "hidden",
            value: value,
            name: name
        });
    }, [
        name,
        value
    ]);
    return {
        state: {
            value: value,
            isFocused: isFocused,
            isDragging: isDragging
        },
        actions: actions,
        getRootProps: getRootProps,
        getTrackProps: getTrackProps,
        getInnerTrackProps: getInnerTrackProps,
        getThumbProps: getThumbProps,
        getMarkerProps: getMarkerProps,
        getInputProps: getInputProps
    };
}
function orient(options) {
    var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
    return orientation === "vertical" ? vertical : horizontal;
}
/**
 * The browser <input type="range" /> calculates
 * the default value of a slider by using mid-point
 * between the min and the max.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range
 */ function getDefaultValue(min, max) {
    return max < min ? min : min + (max - min) / 2;
}
