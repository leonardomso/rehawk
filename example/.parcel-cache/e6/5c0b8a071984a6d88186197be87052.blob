"use strict";
exports.__esModule = true;
exports.useRadio = useRadio;
var _formControl = require("@chakra-ui/form-control");
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var _react = require("react");
var _radioGroup = require("./radio-group");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useRadio(props) {
    if (props === void 0) props = {
    };
    var _props = props, defaultIsChecked = _props.defaultIsChecked, _props$defaultChecked = _props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked, isCheckedProp = _props.isChecked, isFocusable = _props.isFocusable, isDisabledProp = _props.isDisabled, isReadOnlyProp = _props.isReadOnly, isRequiredProp = _props.isRequired, onChange = _props.onChange, isInvalidProp = _props.isInvalid, name = _props.name, value = _props.value, idProp = _props.id, dataRadioGroup = _props["data-radiogroup"], htmlProps = _objectWithoutPropertiesLoose(_props, [
        "defaultIsChecked",
        "defaultChecked",
        "isChecked",
        "isFocusable",
        "isDisabled",
        "isReadOnly",
        "isRequired",
        "onChange",
        "isInvalid",
        "name",
        "value",
        "id",
        "data-radiogroup"
    ]);
    var uuid = _hooks.useId(undefined, "radio");
    var formControl = _formControl.useFormControlContext();
    var group = _radioGroup.useRadioGroupContext();
    var isWithinRadioGroup = !!group || !!dataRadioGroup;
    var isWithinFormControl = !!formControl;
    var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
    id = idProp != null ? idProp : id;
    var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
    var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
    var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
    var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
    var _useBoolean = _hooks.useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
    var _useBoolean2 = _hooks.useBoolean(), isHovered = _useBoolean2[0], setHovering = _useBoolean2[1];
    var _useBoolean3 = _hooks.useBoolean(), isActive = _useBoolean3[0], setActive = _useBoolean3[1];
    var ref = _react.useRef(null);
    var _useState = _react.useState(Boolean(defaultChecked)), isCheckedState = _useState[0], setChecked = _useState[1];
    var _useControllableProp = _hooks.useControllableProp(isCheckedProp, isCheckedState), isControlled = _useControllableProp[0], isChecked = _useControllableProp[1];
    _utils.warn({
        condition: !!defaultIsChecked,
        message: "The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior."
    });
    var handleChange = _react.useCallback(function(event) {
        if (isReadOnly || isDisabled) {
            event.preventDefault();
            return;
        }
        if (!isControlled) setChecked(event.target.checked);
        onChange == null || onChange(event);
    }, [
        isControlled,
        isDisabled,
        isReadOnly,
        onChange
    ]);
    var onKeyDown = _react.useCallback(function(event) {
        if (event.key === " ") setActive.on();
    }, [
        setActive
    ]);
    var onKeyUp = _react.useCallback(function(event) {
        if (event.key === " ") setActive.off();
    }, [
        setActive
    ]);
    var getCheckboxProps = _react.useCallback(function(props1, ref1) {
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        return _extends({
        }, props1, {
            ref: ref1,
            "data-active": _utils.dataAttr(isActive),
            "data-hover": _utils.dataAttr(isHovered),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(isInvalid),
            "data-checked": _utils.dataAttr(isChecked),
            "data-focus": _utils.dataAttr(isFocused),
            "data-readonly": _utils.dataAttr(isReadOnly),
            "aria-hidden": true,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, setActive.on),
            onMouseUp: _utils.callAllHandlers(props1.onMouseUp, setActive.off),
            onMouseEnter: _utils.callAllHandlers(props1.onMouseEnter, setHovering.on),
            onMouseLeave: _utils.callAllHandlers(props1.onMouseLeave, setHovering.off)
        });
    }, [
        isActive,
        isHovered,
        isDisabled,
        isInvalid,
        isChecked,
        isFocused,
        isReadOnly,
        setActive.on,
        setActive.off,
        setHovering.on,
        setHovering.off
    ]);
    var _ref = formControl != null ? formControl : {
    }, onFocus = _ref.onFocus, onBlur = _ref.onBlur;
    var getInputProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        /**
     * This is a workaround for React Concurrent Mode issue.
     * @see Issue https://github.com/facebook/react/issues/18591.
     *
     * Remove once it's fixed.
     */ var focus = function focus1() {
            _utils.scheduleMicrotask(function() {
                setFocused.on();
            });
        };
        var trulyDisabled = isDisabled && !isFocusable;
        return _extends({
        }, props1, {
            id: id,
            ref: _reactUtils.mergeRefs(forwardedRef, ref),
            type: "radio",
            name: name,
            value: value,
            onChange: _utils.callAllHandlers(props1.onChange, handleChange),
            onBlur: _utils.callAllHandlers(onBlur, props1.onBlur, setFocused.off),
            onFocus: _utils.callAllHandlers(onFocus, props1.onFocus, focus),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onKeyUp: _utils.callAllHandlers(props1.onKeyUp, onKeyUp),
            checked: isChecked,
            disabled: trulyDisabled,
            readOnly: isReadOnly,
            required: isRequired,
            "aria-invalid": _utils.ariaAttr(isInvalid),
            "aria-disabled": _utils.ariaAttr(trulyDisabled),
            "aria-readonly": _utils.ariaAttr(isReadOnly),
            "aria-required": _utils.ariaAttr(isRequired),
            style: _visuallyHidden.visuallyHiddenStyle
        });
    }, [
        isDisabled,
        isFocusable,
        id,
        name,
        value,
        handleChange,
        onBlur,
        setFocused,
        onFocus,
        onKeyDown,
        onKeyUp,
        isChecked,
        isReadOnly,
        isRequired,
        isInvalid
    ]);
    var getLabelProps = function getLabelProps1(props1, ref1) {
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        return _extends({
        }, props1, {
            ref: ref1,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, stop),
            onTouchStart: _utils.callAllHandlers(props1.onTouchStart, stop),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-checked": _utils.dataAttr(isChecked),
            "data-invalid": _utils.dataAttr(isInvalid)
        });
    };
    return {
        state: {
            isInvalid: isInvalid,
            isFocused: isFocused,
            isChecked: isChecked,
            isActive: isActive,
            isHovered: isHovered,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired
        },
        getCheckboxProps: getCheckboxProps,
        getInputProps: getInputProps,
        getLabelProps: getLabelProps,
        htmlProps: htmlProps
    };
}
/**
 * Prevent `onBlur` being fired when the checkbox label is touched
 */ function stop(event) {
    event.preventDefault();
    event.stopPropagation();
}
