"use strict";
exports.__esModule = true;
exports.useDisclosure = useDisclosure;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useControllable = require("./use-controllable");
var _useId = require("./use-id");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useDisclosure(props) {
    if (props === void 0) props = {
    };
    var _props = props, onCloseProp = _props.onClose, onOpenProp = _props.onOpen, isOpenProp = _props.isOpen, idProp = _props.id;
    var _React$useState = React.useState(props.defaultIsOpen || false), isOpenState = _React$useState[0], setIsOpen = _React$useState[1];
    var _useControllableProp = _useControllable.useControllableProp(isOpenProp, isOpenState), isControlled = _useControllableProp[0], isOpen = _useControllableProp[1];
    var id = _useId.useId(idProp, "disclosure");
    var onClose = React.useCallback(function() {
        if (!isControlled) setIsOpen(false);
        onCloseProp == null || onCloseProp();
    }, [
        isControlled,
        onCloseProp
    ]);
    var onOpen = React.useCallback(function() {
        if (!isControlled) setIsOpen(true);
        onOpenProp == null || onOpenProp();
    }, [
        isControlled,
        onOpenProp
    ]);
    var onToggle = React.useCallback(function() {
        var action = isOpen ? onClose : onOpen;
        action();
    }, [
        isOpen,
        onOpen,
        onClose
    ]);
    return {
        isOpen: !!isOpen,
        onOpen: onOpen,
        onClose: onClose,
        onToggle: onToggle,
        isControlled: isControlled,
        getButtonProps: function getButtonProps(props1) {
            if (props1 === void 0) props1 = {
            };
            return _extends({
            }, props1, {
                "aria-expanded": "true",
                "aria-controls": id,
                onClick: _utils.callAllHandlers(props1.onClick, onToggle)
            });
        },
        getDisclosureProps: function getDisclosureProps(props1) {
            if (props1 === void 0) props1 = {
            };
            return _extends({
            }, props1, {
                hidden: !isOpen,
                id: id
            });
        }
    };
}
