// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1j6wU":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"592mh"}],"592mh":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"2rNh6"}],"2rNh6":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"3zRy2":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "778cbd9f44f08f53b7e06ab0250eb332"; // @flow
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets/*: {|[string]: boolean|} */ , acceptedAssets/*: {|[string]: boolean|} */ , assetsToAccept/*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    // $FlowFixMe
    ws.onmessage = function(event/*: {data: string, ...} */ ) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH
            );
            // Handle HMR Update
            var handled = false;
            assets.forEach((asset)=>{
                var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
                if (didAccept) handled = true;
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function(e) {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
        errorHTML += `\n      <div>\n        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>\n          ${stack}\n        </pre>\n        <div>\n          ${diagnostic.hints.map((hint)=>'<div>' + hint + '</div>'
        ).join('')}\n        </div>\n      </div>\n    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    link.getAttribute('href').split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle/*: ParcelRequire */ , asset/*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle/*: ParcelRequire */ , id/*: string */ , depsByBundle/*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle/*: ParcelRequire */ , id/*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"5fwok":[function(require,module,exports) {
var helpers = require("./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _react = require("react");
var _reactDom = require("react-dom");
var _react1 = require("@chakra-ui/react");
var _source = require("./components/Source");
var _sourceDefault = parcelHelpers.interopDefault(_source);
var _details = require("./components/Details");
var _detailsDefault = parcelHelpers.interopDefault(_details);
var _controls = require("./components/Controls");
var _controlsDefault = parcelHelpers.interopDefault(_controls);
const App = ()=>{
    return(/*#__PURE__*/ _react.createElement(_react1.ChakraProvider, {
        theme: _react1.theme,
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 17
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Box, {
        w: "100%",
        h: "100vh",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 18
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Grid, {
        templateRows: "repeat(5, max-content)",
        templateColumns: "repeat(2, 1fr)",
        gap: 5,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 19
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Heading, {
        as: "h1",
        letterSpacing: "-0.03em",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 20
        },
        __self: undefined
    }, "Audio using XState"), /*#__PURE__*/ _react.createElement(_sourceDefault.default, {
        gridRow: "2 / 3",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 21
        },
        __self: undefined
    }), /*#__PURE__*/ _react.createElement(_controlsDefault.default, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 22
        },
        __self: undefined
    }), /*#__PURE__*/ _react.createElement(_detailsDefault.default, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
            lineNumber: 23
        },
        __self: undefined
    })))));
};
_c = App;
_reactDom.render(/*#__PURE__*/ _react.createElement(App, {
    __source: {
        fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/index.tsx",
        lineNumber: 30
    },
    __self: undefined
}), document.getElementById('root'));
var _c;
$RefreshReg$(_c, "App");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3f97z","react-dom":"PWMei","./node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f","@chakra-ui/react":"6hzyz","./components/Source":"16xhV","./components/Details":"MuN9l","./components/Controls":"5esTL","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"3f97z":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"3lVY8"}],"3lVY8":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"5c0I4"}],"5c0I4":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"PWMei":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"5HuJC"}],"5HuJC":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"3f97z","object-assign":"5c0I4","scheduler":"1kUgC","scheduler/tracing":"4Dg9G"}],"1kUgC":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"rTERz"}],"rTERz":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"4Dg9G":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"37FNX"}],"37FNX":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"4Jj4f":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"592mh"}],"6hzyz":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _chakraProvider = require("./chakra-provider");
Object.keys(_chakraProvider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _chakraProvider[key]) return;
    exports[key] = _chakraProvider[key];
});
var _extendTheme = require("./extend-theme");
Object.keys(_extendTheme).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _extendTheme[key]) return;
    exports[key] = _extendTheme[key];
});
var _themeExtensions = require("./theme-extensions");
Object.keys(_themeExtensions).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _themeExtensions[key]) return;
    exports[key] = _themeExtensions[key];
});
var _accordion = require("@chakra-ui/accordion");
Object.keys(_accordion).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _accordion[key]) return;
    exports[key] = _accordion[key];
});
var _alert = require("@chakra-ui/alert");
Object.keys(_alert).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _alert[key]) return;
    exports[key] = _alert[key];
});
var _avatar = require("@chakra-ui/avatar");
Object.keys(_avatar).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _avatar[key]) return;
    exports[key] = _avatar[key];
});
var _breadcrumb = require("@chakra-ui/breadcrumb");
Object.keys(_breadcrumb).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _breadcrumb[key]) return;
    exports[key] = _breadcrumb[key];
});
var _button = require("@chakra-ui/button");
Object.keys(_button).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _button[key]) return;
    exports[key] = _button[key];
});
var _checkbox = require("@chakra-ui/checkbox");
Object.keys(_checkbox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _checkbox[key]) return;
    exports[key] = _checkbox[key];
});
var _closeButton = require("@chakra-ui/close-button");
Object.keys(_closeButton).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _closeButton[key]) return;
    exports[key] = _closeButton[key];
});
var _counter = require("@chakra-ui/counter");
Object.keys(_counter).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _counter[key]) return;
    exports[key] = _counter[key];
});
var _cssReset = require("@chakra-ui/css-reset");
Object.keys(_cssReset).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _cssReset[key]) return;
    exports[key] = _cssReset[key];
});
var _editable = require("@chakra-ui/editable");
Object.keys(_editable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _editable[key]) return;
    exports[key] = _editable[key];
});
var _formControl = require("@chakra-ui/form-control");
Object.keys(_formControl).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _formControl[key]) return;
    exports[key] = _formControl[key];
});
var _controlBox = require("@chakra-ui/control-box");
Object.keys(_controlBox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _controlBox[key]) return;
    exports[key] = _controlBox[key];
});
var _hooks = require("@chakra-ui/hooks");
Object.keys(_hooks).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _hooks[key]) return;
    exports[key] = _hooks[key];
});
var _icon = require("@chakra-ui/icon");
Object.keys(_icon).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _icon[key]) return;
    exports[key] = _icon[key];
});
var _image = require("@chakra-ui/image");
Object.keys(_image).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _image[key]) return;
    exports[key] = _image[key];
});
var _input = require("@chakra-ui/input");
Object.keys(_input).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _input[key]) return;
    exports[key] = _input[key];
});
var _layout = require("@chakra-ui/layout");
Object.keys(_layout).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _layout[key]) return;
    exports[key] = _layout[key];
});
var _mediaQuery = require("@chakra-ui/media-query");
Object.keys(_mediaQuery).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _mediaQuery[key]) return;
    exports[key] = _mediaQuery[key];
});
var _table = require("@chakra-ui/table");
Object.keys(_table).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _table[key]) return;
    exports[key] = _table[key];
});
var _theme = require("@chakra-ui/theme");
Object.keys(_theme).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _theme[key]) return;
    exports[key] = _theme[key];
});
var _menu = require("@chakra-ui/menu");
Object.keys(_menu).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _menu[key]) return;
    exports[key] = _menu[key];
});
var _modal = require("@chakra-ui/modal");
Object.keys(_modal).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _modal[key]) return;
    exports[key] = _modal[key];
});
var _numberInput = require("@chakra-ui/number-input");
Object.keys(_numberInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _numberInput[key]) return;
    exports[key] = _numberInput[key];
});
var _pinInput = require("@chakra-ui/pin-input");
Object.keys(_pinInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _pinInput[key]) return;
    exports[key] = _pinInput[key];
});
var _popover = require("@chakra-ui/popover");
Object.keys(_popover).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _popover[key]) return;
    exports[key] = _popover[key];
});
var _popper = require("@chakra-ui/popper");
Object.keys(_popper).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _popper[key]) return;
    exports[key] = _popper[key];
});
var _portal = require("@chakra-ui/portal");
Object.keys(_portal).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _portal[key]) return;
    exports[key] = _portal[key];
});
var _progress = require("@chakra-ui/progress");
Object.keys(_progress).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _progress[key]) return;
    exports[key] = _progress[key];
});
var _radio = require("@chakra-ui/radio");
Object.keys(_radio).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _radio[key]) return;
    exports[key] = _radio[key];
});
var _select = require("@chakra-ui/select");
Object.keys(_select).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _select[key]) return;
    exports[key] = _select[key];
});
var _skeleton = require("@chakra-ui/skeleton");
Object.keys(_skeleton).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _skeleton[key]) return;
    exports[key] = _skeleton[key];
});
var _slider = require("@chakra-ui/slider");
Object.keys(_slider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _slider[key]) return;
    exports[key] = _slider[key];
});
var _spinner = require("@chakra-ui/spinner");
Object.keys(_spinner).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _spinner[key]) return;
    exports[key] = _spinner[key];
});
var _stat = require("@chakra-ui/stat");
Object.keys(_stat).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _stat[key]) return;
    exports[key] = _stat[key];
});
var _switch = require("@chakra-ui/switch");
Object.keys(_switch).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _switch[key]) return;
    exports[key] = _switch[key];
});
var _system = require("@chakra-ui/system");
Object.keys(_system).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _system[key]) return;
    exports[key] = _system[key];
});
var _tabs = require("@chakra-ui/tabs");
Object.keys(_tabs).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tabs[key]) return;
    exports[key] = _tabs[key];
});
var _tag = require("@chakra-ui/tag");
Object.keys(_tag).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tag[key]) return;
    exports[key] = _tag[key];
});
var _textarea = require("@chakra-ui/textarea");
Object.keys(_textarea).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _textarea[key]) return;
    exports[key] = _textarea[key];
});
var _toast = require("@chakra-ui/toast");
Object.keys(_toast).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _toast[key]) return;
    exports[key] = _toast[key];
});
var _tooltip = require("@chakra-ui/tooltip");
Object.keys(_tooltip).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tooltip[key]) return;
    exports[key] = _tooltip[key];
});
var _transition = require("@chakra-ui/transition");
Object.keys(_transition).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _transition[key]) return;
    exports[key] = _transition[key];
});
var _visuallyHidden = require("@chakra-ui/visually-hidden");
Object.keys(_visuallyHidden).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _visuallyHidden[key]) return;
    exports[key] = _visuallyHidden[key];
});

},{"./chakra-provider":"HCHIC","./extend-theme":"h7952","./theme-extensions":"2Ythp","@chakra-ui/accordion":"2ThAm","@chakra-ui/alert":"5bEDe","@chakra-ui/avatar":"56Gbx","@chakra-ui/breadcrumb":"4FIWE","@chakra-ui/button":"1HRR5","@chakra-ui/checkbox":"4bxfc","@chakra-ui/close-button":"6ZT8s","@chakra-ui/counter":"rA1l7","@chakra-ui/css-reset":"14R6e","@chakra-ui/editable":"5gMGH","@chakra-ui/form-control":"1VzrL","@chakra-ui/control-box":"6HXEX","@chakra-ui/hooks":"ak6Dj","@chakra-ui/icon":"2mBZX","@chakra-ui/image":"nbAL9","@chakra-ui/input":"2M9Yv","@chakra-ui/layout":"3GzMo","@chakra-ui/media-query":"4NQXd","@chakra-ui/table":"2cjKt","@chakra-ui/theme":"4ht9o","@chakra-ui/menu":"6hshx","@chakra-ui/modal":"Npfcs","@chakra-ui/number-input":"2hmfO","@chakra-ui/pin-input":"4S3jZ","@chakra-ui/popover":"7C2wR","@chakra-ui/popper":"5zSIv","@chakra-ui/portal":"5cHLt","@chakra-ui/progress":"5x6dK","@chakra-ui/radio":"5A5bE","@chakra-ui/select":"7yprg","@chakra-ui/skeleton":"69LeQ","@chakra-ui/slider":"4jVyl","@chakra-ui/spinner":"6DuUT","@chakra-ui/stat":"4nJd1","@chakra-ui/switch":"64AhU","@chakra-ui/system":"4QBuE","@chakra-ui/tabs":"3sBL0","@chakra-ui/tag":"5TOq5","@chakra-ui/textarea":"6EZuA","@chakra-ui/toast":"2Q7Wn","@chakra-ui/tooltip":"Y1nKK","@chakra-ui/transition":"63bwb","@chakra-ui/visually-hidden":"77YGo"}],"HCHIC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ChakraProvider = void 0;
var _cssReset = _interopRequireDefault(require("@chakra-ui/css-reset"));
var _portal = require("@chakra-ui/portal");
var _system = require("@chakra-ui/system");
var _theme = _interopRequireDefault(require("@chakra-ui/theme"));
var _reactEnv = require("@chakra-ui/react-env");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
/**
 * The global provider that must be added to make all Chakra components
 * work correctly
 */ var ChakraProvider = function ChakraProvider1(props) {
    var children = props.children, colorModeManager = props.colorModeManager, portalZIndex = props.portalZIndex, _props$resetCSS = props.resetCSS, resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS, _props$theme = props.theme, theme = _props$theme === void 0 ? _theme["default"] : _props$theme, environment = props.environment, cssVarsRoot = props.cssVarsRoot;
    return(/*#__PURE__*/ React.createElement(_reactEnv.EnvironmentProvider, {
        environment: environment
    }, /*#__PURE__*/ React.createElement(_system.ThemeProvider, {
        theme: theme,
        cssVarsRoot: cssVarsRoot
    }, /*#__PURE__*/ React.createElement(_system.ColorModeProvider, {
        colorModeManager: colorModeManager,
        options: theme.config
    }, resetCSS && /*#__PURE__*/ React.createElement(_cssReset["default"], null), /*#__PURE__*/ React.createElement(_system.GlobalStyle, null), portalZIndex ? /*#__PURE__*/ React.createElement(_portal.PortalManager, {
        zIndex: portalZIndex
    }, children) : children))));
};
exports.ChakraProvider = ChakraProvider;

},{"@chakra-ui/css-reset":"14R6e","@chakra-ui/portal":"5cHLt","@chakra-ui/system":"4QBuE","@chakra-ui/theme":"4ht9o","@chakra-ui/react-env":"327HV","react":"3f97z"}],"14R6e":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
};
exports["default"] = void 0;
var _cssReset = _interopRequireWildcard(require("./css-reset"));
exports["default"] = _cssReset["default"];
Object.keys(_cssReset).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _cssReset[key]) return;
    exports[key] = _cssReset[key];
});
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}

},{"./css-reset":"1qvVi"}],"1qvVi":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.CSSReset = void 0;
var _react = require("@emotion/react");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var CSSReset = function CSSReset1() {
    return(/*#__PURE__*/ React.createElement(_react.Global, {
        styles: "\n      html {\n        line-height: 1.5;\n        -webkit-text-size-adjust: 100%;\n        font-family: system-ui, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        text-rendering: optimizeLegibility;      \n        -moz-osx-font-smoothing: grayscale; \n        touch-action: manipulation; \n      }\n\n      body {\n        position: relative;\n        min-height: 100%;\n        font-feature-settings: 'kern';\n      }\n\n      *,\n      *::before,\n      *::after {\n        border-width: 0;\n        border-style: solid;\n        box-sizing: border-box;\n      }\n\n      main {\n        display: block;\n      }\n\n      hr {\n        border-top-width: 1px;\n        box-sizing: content-box;\n        height: 0;\n        overflow: visible;\n      }\n\n      pre,\n      code,\n      kbd,\n      samp {\n        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;\n        font-size: 1em;\n      }\n\n      a {\n        background-color: transparent;\n        color: inherit;\n        text-decoration: inherit;\n      }\n\n      abbr[title] {\n        border-bottom: none;\n        text-decoration: underline;\n        -webkit-text-decoration: underline dotted;\n        text-decoration: underline dotted;\n      }\n\n      b,\n      strong {\n        font-weight: bold;\n      }\n\n      small {\n        font-size: 80%;\n      }\n\n      sub,\n      sup {\n        font-size: 75%;\n        line-height: 0;\n        position: relative;\n        vertical-align: baseline;\n      }\n\n      sub {\n        bottom: -0.25em;\n      }\n\n      sup {\n        top: -0.5em;\n      }\n\n      img {\n        border-style: none;\n      }\n\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        font-family: inherit;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n\n      button,\n      input {\n        overflow: visible;\n      }\n\n      button,\n      select {\n        text-transform: none;\n      }\n\n      button::-moz-focus-inner,\n      [type=\"button\"]::-moz-focus-inner,\n      [type=\"reset\"]::-moz-focus-inner,\n      [type=\"submit\"]::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n      }\n\n      fieldset {\n        padding: 0.35em 0.75em 0.625em;\n      }\n\n      legend {\n        box-sizing: border-box;\n        color: inherit;\n        display: table;\n        max-width: 100%;\n        padding: 0;\n        white-space: normal;\n      }\n\n      progress {\n        vertical-align: baseline;\n      }\n\n      textarea {\n        overflow: auto;\n      }\n\n      [type=\"checkbox\"],\n      [type=\"radio\"] {\n        box-sizing: border-box;\n        padding: 0;\n      }\n\n      [type=\"number\"]::-webkit-inner-spin-button,\n      [type=\"number\"]::-webkit-outer-spin-button {\n        -webkit-appearance: none !important;\n      }\n\n      input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      [type=\"search\"] {\n        -webkit-appearance: textfield;\n        outline-offset: -2px;\n      }\n\n      [type=\"search\"]::-webkit-search-decoration {\n        -webkit-appearance: none !important;\n      }\n\n      ::-webkit-file-upload-button {\n        -webkit-appearance: button;\n        font: inherit;\n      }\n\n      details {\n        display: block;\n      }\n\n      summary {\n        display: list-item;\n      }\n\n      template {\n        display: none;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      body,\n      blockquote,\n      dl,\n      dd,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      hr,\n      figure,\n      p,\n      pre {\n        margin: 0;\n      }\n\n      button {\n        background: transparent;\n        padding: 0;\n      }\n\n      fieldset {\n        margin: 0;\n        padding: 0;\n      }\n\n      ol,\n      ul {\n        margin: 0;\n        padding: 0;\n      }\n\n      textarea {\n        resize: vertical;\n      }\n\n      button,\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n\n      button::-moz-focus-inner {\n        border: 0 !important;\n      }\n\n      table {\n        border-collapse: collapse;\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: inherit;\n        font-weight: inherit;\n      }\n\n      button,\n      input,\n      optgroup,\n      select,\n      textarea {\n        padding: 0;\n        line-height: inherit;\n        color: inherit;\n      }\n\n      img,\n      svg,\n      video,\n      canvas,\n      audio,\n      iframe,\n      embed,\n      object {\n        display: block;\n        vertical-align: middle;\n      }\n\n      img,\n      video {\n        max-width: 100%;\n        height: auto;\n      }\n\n      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {\n        outline: none;\n        box-shadow: none;\n      }\n\n      select::-ms-expand {\n        display: none;\n      }\n    "
    }));
};
exports.CSSReset = CSSReset;
var _default = CSSReset;
exports["default"] = _default;

},{"@emotion/react":"3DTbq","react":"3f97z"}],"3DTbq":[function(require,module,exports) {
var global = arguments[3];
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var React = require('react');
require('@emotion/cache');
var emotionElement = require('./emotion-element-e91afc55.browser.cjs.js');
require('@babel/runtime/helpers/extends');
require('@emotion/weak-memoize');
require('hoist-non-react-statics');
require('../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.cjs.js');
var utils = require('@emotion/utils');
var serialize = require('@emotion/serialize');
var sheet = require('@emotion/sheet');
var pkg = {
    name: "@emotion/react",
    version: "11.4.0",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "isolated-hoist-non-react-statics-do-not-use-this-in-your-code",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
    ],
    sideEffects: false,
    author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.13.10",
        "@emotion/cache": "^11.4.0",
        "@emotion/serialize": "^1.0.2",
        "@emotion/sheet": "^1.0.1",
        "@emotion/utils": "^1.0.0",
        "@emotion/weak-memoize": "^0.2.5",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@babel/core": {
            optional: true
        },
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@babel/core": "^7.13.10",
        "@emotion/css": "11.1.3",
        "@emotion/css-prettifier": "1.0.0",
        "@emotion/server": "11.4.0",
        "@emotion/styled": "11.3.0",
        "@types/react": "^16.9.11",
        dtslint: "^0.3.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js"
        ],
        umdName: "emotionReact"
    }
};
var jsx = function jsx1(type, props) {
    var args = arguments;
    if (props == null || !emotionElement.hasOwnProperty.call(props, 'css')) // $FlowFixMe
    return React.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = emotionElement.Emotion;
    createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
     // $FlowFixMe
    return React.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = serialize.serializeStyles([
        styles
    ], undefined, typeof styles === 'function' || Array.isArray(styles) ? React.useContext(emotionElement.ThemeContext) : undefined);
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = React.useRef();
    React.useLayoutEffect(function() {
        var key = cache.key + "-global";
        var sheet$1 = new sheet.StyleSheet({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
        if (cache.sheet.tags.length) sheet$1.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute('data-emotion', key);
            sheet$1.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet$1,
            rehydrating
        ];
        return function() {
            sheet$1.flush();
        };
    }, [
        cache
    ]);
    React.useLayoutEffect(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet1 = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        utils.insertStyles(cache, serialized.next, true);
        if (sheet1.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet1.tags[sheet1.tags.length - 1].nextElementSibling;
            sheet1.before = element;
            sheet1.flush();
        }
        cache.insert("", serialized, sheet1, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
Global.displayName = 'EmotionGlobal';
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return serialize.serializeStyles(args);
}
var keyframes = function keyframes1() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames1(args) {
    var len = args.length;
    var i = 0;
    var cls = '';
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case 'boolean':
                break;
            case 'object':
                if (Array.isArray(arg)) toAdd = classnames1(arg);
                else {
                    if (arg.styles !== undefined && arg.name !== undefined) console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                    toAdd = '';
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += ' ');
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += ' ');
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css1, className) {
    var registeredStyles = [];
    var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css1(registeredStyles);
}
var ClassNames = /* #__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
    var hasRendered = false;
    var css1 = function css2() {
        if (hasRendered && true) throw new Error('css can only be used during render');
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = serialize.serializeStyles(args, cache.registered);
        utils.insertStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx1() {
        if (hasRendered && true) throw new Error('cx can only be used during render');
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css1, classnames(args));
    };
    var content = {
        css: css1,
        cx: cx,
        theme: React.useContext(emotionElement.ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return ele;
});
ClassNames.displayName = 'EmotionClassNames';
var isBrowser = true; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock
var isJest = typeof jest !== 'undefined';
if (isBrowser && !isJest) {
    var globalContext = isBrowser ? window : global;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";
    if (globalContext[globalKey]) console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    globalContext[globalKey] = true;
}
exports.CacheProvider = emotionElement.CacheProvider;
exports.ThemeContext = emotionElement.ThemeContext;
exports.ThemeProvider = emotionElement.ThemeProvider;
exports.useTheme = emotionElement.useTheme;
exports.withEmotionCache = emotionElement.withEmotionCache;
exports.withTheme = emotionElement.withTheme;
exports.ClassNames = ClassNames;
exports.Global = Global;
exports.createElement = jsx;
exports.css = css;
exports.jsx = jsx;
exports.keyframes = keyframes;

},{"react":"3f97z","@emotion/cache":"3b56H","./emotion-element-e91afc55.browser.cjs.js":"4hiCn","@babel/runtime/helpers/extends":"3krLJ","@emotion/weak-memoize":"6wqWu","hoist-non-react-statics":"3nUHV","../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.cjs.js":"FgFXJ","@emotion/utils":"3bU6u","@emotion/serialize":"7L4kg","@emotion/sheet":"5ZDao"}],"3b56H":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var sheet = require('@emotion/sheet');
var stylis = require('stylis');
require('@emotion/weak-memoize');
require('@emotion/memoize');
var last = function last1(arr) {
    return arr.length ? arr[arr.length - 1] : null;
};
var toRules = function toRules1(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch(stylis.token(character)){
        case 0:
            // &\f
            if (character === 38 && stylis.peek() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += stylis.identifier(stylis.position - 1);
            break;
        case 2:
            parsed[index] += stylis.delimit(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = stylis.peek() === 58 ? '&\f' : '';
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += stylis.from(character);
    }
    while (character = stylis.next())
    return parsed;
};
var getRules = function getRules1(value, points) {
    return stylis.dealloc(toRules(stylis.alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat1(element) {
    if (element.type !== 'rule' || !element.parent || !element.length) return;
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== 'rule'){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel1(element) {
    if (element.type === 'decl') {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = '';
            element.value = '';
        }
    }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
var isIgnoringComment = function isIgnoringComment1(element) {
    return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm1(cache) {
    return function(element, index, children) {
        if (element.type !== 'rule') return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses && cache.compat !== true) {
            var prevElement = index > 0 ? children[index - 1] : null;
            if (prevElement && isIgnoringComment(last(prevElement.children))) return;
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
            });
        }
    };
};
var isImportRule = function isImportRule1(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules1(index, children) {
    for(var i = index - 1; i >= 0; i--){
        if (!isImportRule(children[i])) return true;
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement1(element) {
    element.type = '';
    element.value = '';
    element["return"] = '';
    element.children = '';
    element.props = '';
};
var incorrectImportAlarm = function incorrectImportAlarm1(element, index, children) {
    if (!isImportRule(element)) return;
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
var defaultStylisPlugins = [
    stylis.prefixer
];
var createCache = function createCache1(options) {
    var key = options.key;
    if (!key) throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    if (key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute('data-emotion');
            if (dataEmotionAttribute.indexOf(' ') === -1) return;
            document.head.appendChild(node);
            node.setAttribute('data-s', '');
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    var inserted = {
    }; // $FlowFixMe
    var container;
    var nodesToHydrate = [];
    container = options.container || document.head;
    Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function(node) {
        var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe
        for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
        nodesToHydrate.push(node);
    });
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat () {
            return cache.compat;
        }
    }), incorrectImportAlarm);
    var currentSheet;
    var finalizingPlugins = [
        stylis.stringify,
        function(element) {
            if (!element.root) {
                if (element["return"]) currentSheet.insert(element["return"]);
                else if (element.value && element.type !== stylis.COMMENT) // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(element.value + "{}");
            }
        }
    ];
    var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis$1 = function stylis$11(styles) {
        return stylis.serialize(stylis.compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet1, shouldCache) {
        currentSheet = sheet1;
        if (serialized.map !== undefined) currentSheet = {
            insert: function insert1(rule) {
                sheet1.insert(rule + serialized.map);
            }
        };
        stylis$1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) cache.inserted[serialized.name] = true;
    };
    var cache = {
        key: key,
        sheet: new sheet.StyleSheet({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {
        },
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};
exports.default = createCache;

},{"@emotion/sheet":"5ZDao","stylis":"53ogk","@emotion/weak-memoize":"6wqWu","@emotion/memoize":"46jWj"}],"5ZDao":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ // $FlowFixMe
function sheetForTag(tag) {
    if (tag.sheet) // $FlowFixMe
    return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) // $FlowFixMe
        return document.styleSheets[i];
    }
}
function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);
    if (options.nonce !== undefined) tag.setAttribute('nonce', options.nonce);
    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
}
var StyleSheet1 = /*#__PURE__*/ function() {
    function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) before = _this.prepend ? _this.container.firstChild : _this.before;
            else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
                if (!/:(-moz-placeholder|-ms-input-placeholder|-moz-read-write|-moz-read-only){/.test(rule)) console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
            }
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function(tag) {
            return tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        this._alreadyInsertedOrderInsensitiveRule = false;
    };
    return StyleSheet2;
}();
exports.StyleSheet = StyleSheet1;

},{}],"53ogk":[function(require,module,exports) {
(function(e, r) {
    typeof exports === "object" && typeof module !== "undefined" ? r(exports) : typeof define === "function" && define.amd ? define([
        "exports"
    ], r) : (e = e || self, r(e.stylis = {
    }));
})(this, function(e) {
    "use strict";
    var r = "-ms-";
    var a = "-moz-";
    var c = "-webkit-";
    var t = "comm";
    var n = "rule";
    var s = "decl";
    var i = "@page";
    var u = "@media";
    var o = "@import";
    var f = "@charset";
    var l = "@viewport";
    var h = "@supports";
    var p = "@document";
    var v = "@namespace";
    var b = "@keyframes";
    var m = "@font-face";
    var w = "@counter-style";
    var d = "@font-feature-values";
    var $ = Math.abs;
    var k = String.fromCharCode;
    function g(e1, r1) {
        return (((r1 << 2 ^ A(e1, 0)) << 2 ^ A(e1, 1)) << 2 ^ A(e1, 2)) << 2 ^ A(e1, 3);
    }
    function x(e1) {
        return e1.trim();
    }
    function E(e1, r1) {
        return (e1 = r1.exec(e1)) ? e1[0] : e1;
    }
    function y(e1, r1, a1) {
        return e1.replace(r1, a1);
    }
    function T(e1, r1) {
        return e1.indexOf(r1);
    }
    function A(e1, r1) {
        return e1.charCodeAt(r1) | 0;
    }
    function O(e1, r1, a1) {
        return e1.slice(r1, a1);
    }
    function M(e1) {
        return e1.length;
    }
    function C(e1) {
        return e1.length;
    }
    function S(e1, r1) {
        return r1.push(e1), e1;
    }
    function R(e1, r1) {
        return e1.map(r1).join("");
    }
    e.line = 1;
    e.column = 1;
    e.length = 0;
    e.position = 0;
    e.character = 0;
    e.characters = "";
    function z(r1, a1, c1, t1, n1, s1, i1) {
        return {
            value: r1,
            root: a1,
            parent: c1,
            type: t1,
            props: n1,
            children: s1,
            line: e.line,
            column: e.column,
            length: i1,
            return: ""
        };
    }
    function N(e1, r1, a1) {
        return z(e1, r1.root, r1.parent, a1, r1.props, r1.children, 0);
    }
    function P() {
        return e.character;
    }
    function U() {
        e.character = e.position > 0 ? A(e.characters, --e.position) : 0;
        if (e.column--, e.character === 10) e.column = 1, e.line--;
        return e.character;
    }
    function _() {
        e.character = e.position < e.length ? A(e.characters, e.position++) : 0;
        if (e.column++, e.character === 10) e.column = 1, e.line++;
        return e.character;
    }
    function j() {
        return A(e.characters, e.position);
    }
    function F() {
        return e.position;
    }
    function I(r1, a1) {
        return O(e.characters, r1, a1);
    }
    function L(e1) {
        switch(e1){
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
                return 5;
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            case 59:
            case 123:
            case 125:
                return 4;
            case 58:
                return 3;
            case 34:
            case 39:
            case 40:
            case 91:
                return 2;
            case 41:
            case 93:
                return 1;
        }
        return 0;
    }
    function D(r1) {
        return e.line = e.column = 1, e.length = M(e.characters = r1), e.position = 0, [];
    }
    function K(r1) {
        return e.characters = "", r1;
    }
    function V(r1) {
        return x(I(e.position - 1, H(r1 === 91 ? r1 + 2 : r1 === 40 ? r1 + 1 : r1)));
    }
    function W(e1) {
        return K(B(D(e1)));
    }
    function Y(r1) {
        while(e.character = j())if (e.character < 33) _();
        else break;
        return L(r1) > 2 || L(e.character) > 3 ? "" : " ";
    }
    function B(r1) {
        while(_())switch(L(e.character)){
            case 0:
                S(q(e.position - 1), r1);
                break;
            case 2:
                S(V(e.character), r1);
                break;
            default:
                S(k(e.character), r1);
        }
        return r1;
    }
    function G(r1, a1) {
        while((--a1) && _())if (e.character < 48 || e.character > 102 || e.character > 57 && e.character < 65 || e.character > 70 && e.character < 97) break;
        return I(r1, F() + (a1 < 6 && j() == 32 && _() == 32));
    }
    function H(r1) {
        while(_())switch(e.character){
            case r1:
                return e.position;
            case 34:
            case 39:
                return H(r1 === 34 || r1 === 39 ? r1 : e.character);
            case 40:
                if (r1 === 41) H(r1);
                break;
            case 92:
                _();
                break;
        }
        return e.position;
    }
    function Z(r1, a1) {
        while(_())if (r1 + e.character === 57) break;
        else if (r1 + e.character === 84 && j() === 47) break;
        return "/*" + I(a1, e.position - 1) + "*" + k(r1 === 47 ? r1 : _());
    }
    function q(r1) {
        while(!L(j()))_();
        return I(r1, e.position);
    }
    function J(e1) {
        return K(Q("", null, null, null, [
            ""
        ], e1 = D(e1), 0, [
            0
        ], e1));
    }
    function Q(e1, r1, a1, c1, t1, n1, s1, i1, u1) {
        var o1 = 0;
        var f1 = 0;
        var l1 = s1;
        var h1 = 0;
        var p1 = 0;
        var v1 = 0;
        var b1 = 1;
        var m1 = 1;
        var w1 = 1;
        var d1 = 0;
        var $1 = "";
        var g1 = t1;
        var x1 = n1;
        var E1 = c1;
        var T1 = $1;
        while(m1)switch(v1 = d1, d1 = _()){
            case 34:
            case 39:
            case 91:
            case 40:
                T1 += V(d1);
                break;
            case 9:
            case 10:
            case 13:
            case 32:
                T1 += Y(v1);
                break;
            case 92:
                T1 += G(F() - 1, 7);
                continue;
            case 47:
                switch(j()){
                    case 42:
                    case 47:
                        S(ee(Z(_(), F()), r1, a1), u1);
                        break;
                    default:
                        T1 += "/";
                }
                break;
            case 123 * b1:
                i1[o1++] = M(T1) * w1;
            case 125 * b1:
            case 59:
            case 0:
                switch(d1){
                    case 0:
                    case 125:
                        m1 = 0;
                    case 59 + f1:
                        if (p1 > 0 && M(T1) - l1) S(p1 > 32 ? re(T1 + ";", c1, a1, l1 - 1) : re(y(T1, " ", "") + ";", c1, a1, l1 - 2), u1);
                        break;
                    case 59:
                        T1 += ";";
                    default:
                        S(E1 = X(T1, r1, a1, o1, f1, t1, i1, $1, g1 = [], x1 = [], l1), n1);
                        if (d1 === 123) {
                            if (f1 === 0) Q(T1, r1, E1, E1, g1, n1, l1, i1, x1);
                            else switch(h1){
                                case 100:
                                case 109:
                                case 115:
                                    Q(e1, E1, E1, c1 && S(X(e1, E1, E1, 0, 0, t1, i1, $1, t1, g1 = [], l1), x1), t1, x1, l1, i1, c1 ? g1 : x1);
                                    break;
                                default:
                                    Q(T1, E1, E1, E1, [
                                        ""
                                    ], x1, l1, i1, x1);
                            }
                        }
                }
                o1 = f1 = p1 = 0, b1 = w1 = 1, $1 = T1 = "", l1 = s1;
                break;
            case 58:
                l1 = 1 + M(T1), p1 = v1;
            default:
                if (b1 < 1) {
                    if (d1 == 123) --b1;
                    else if (d1 == 125 && (b1++) == 0 && U() == 125) continue;
                }
                switch(T1 += k(d1), d1 * b1){
                    case 38:
                        w1 = f1 > 0 ? 1 : (T1 += "\f", -1);
                        break;
                    case 44:
                        i1[o1++] = (M(T1) - 1) * w1, w1 = 1;
                        break;
                    case 64:
                        if (j() === 45) T1 += V(_());
                        h1 = j(), f1 = M($1 = T1 += q(F())), d1++;
                        break;
                    case 45:
                        if (v1 === 45 && M(T1) == 2) b1 = 0;
                }
        }
        return n1;
    }
    function X(e1, r1, a1, c1, t1, s1, i1, u1, o1, f1, l1) {
        var h1 = t1 - 1;
        var p1 = t1 === 0 ? s1 : [
            ""
        ];
        var v1 = C(p1);
        for(var b1 = 0, m1 = 0, w1 = 0; b1 < c1; ++b1)for(var d1 = 0, k1 = O(e1, h1 + 1, h1 = $(m1 = i1[b1])), g1 = e1; d1 < v1; ++d1)if (g1 = x(m1 > 0 ? p1[d1] + " " + k1 : y(k1, /&\f/g, p1[d1]))) o1[w1++] = g1;
        return z(e1, r1, a1, t1 === 0 ? n : u1, o1, f1, l1);
    }
    function ee(e1, r1, a1) {
        return z(e1, r1, a1, t, k(P()), O(e1, 2, -2), 0);
    }
    function re(e1, r1, a1, c1) {
        return z(e1, r1, a1, s, O(e1, 0, c1), O(e1, c1 + 1, -1), c1);
    }
    function ae(e1, t1) {
        switch(g(e1, t1)){
            case 5103:
                return c + "print-" + e1 + e1;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
                return c + e1 + e1;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
                return c + e1 + a + e1 + r + e1 + e1;
            case 6828:
            case 4268:
                return c + e1 + r + e1 + e1;
            case 6165:
                return c + e1 + r + "flex-" + e1 + e1;
            case 5187:
                return c + e1 + y(e1, /(\w+).+(:[^]+)/, c + "box-$1$2" + r + "flex-$1$2") + e1;
            case 5443:
                return c + e1 + r + "flex-item-" + y(e1, /flex-|-self/, "") + e1;
            case 4675:
                return c + e1 + r + "flex-line-pack" + y(e1, /align-content|flex-|-self/, "") + e1;
            case 5548:
                return c + e1 + r + y(e1, "shrink", "negative") + e1;
            case 5292:
                return c + e1 + r + y(e1, "basis", "preferred-size") + e1;
            case 6060:
                return c + "box-" + y(e1, "-grow", "") + c + e1 + r + y(e1, "grow", "positive") + e1;
            case 4554:
                return c + y(e1, /([^-])(transform)/g, "$1" + c + "$2") + e1;
            case 6187:
                return y(y(y(e1, /(zoom-|grab)/, c + "$1"), /(image-set)/, c + "$1"), e1, "") + e1;
            case 5495:
            case 3959:
                return y(e1, /(image-set\([^]*)/, c + "$1" + "$`$1");
            case 4968:
                return y(y(e1, /(.+:)(flex-)?(.*)/, c + "box-pack:$3" + r + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c + e1 + e1;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
                return y(e1, /(.+)-inline(.+)/, c + "$1$2") + e1;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
                if (M(e1) - 1 - t1 > 6) switch(A(e1, t1 + 1)){
                    case 109:
                        if (A(e1, t1 + 4) !== 45) break;
                    case 102:
                        return y(e1, /(.+:)(.+)-([^]+)/, "$1" + c + "$2-$3" + "$1" + a + (A(e1, t1 + 3) == 108 ? "$3" : "$2-$3")) + e1;
                    case 115:
                        return ~T(e1, "stretch") ? ae(y(e1, "stretch", "fill-available"), t1) + e1 : e1;
                }
                break;
            case 4949:
                if (A(e1, t1 + 1) !== 115) break;
            case 6444:
                switch(A(e1, M(e1) - 3 - (~T(e1, "!important") && 10))){
                    case 107:
                        return y(e1, ":", ":" + c) + e1;
                    case 101:
                        return y(e1, /(.+:)([^;!]+)(;|!.+)?/, "$1" + c + (A(e1, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + c + "$2$3" + "$1" + r + "$2box$3") + e1;
                }
                break;
            case 5936:
                switch(A(e1, t1 + 11)){
                    case 114:
                        return c + e1 + r + y(e1, /[svh]\w+-[tblr]{2}/, "tb") + e1;
                    case 108:
                        return c + e1 + r + y(e1, /[svh]\w+-[tblr]{2}/, "tb-rl") + e1;
                    case 45:
                        return c + e1 + r + y(e1, /[svh]\w+-[tblr]{2}/, "lr") + e1;
                }
                return c + e1 + r + e1 + e1;
        }
        return e1;
    }
    function ce(e1, r1) {
        var a1 = "";
        var c1 = C(e1);
        for(var t1 = 0; t1 < c1; t1++)a1 += r1(e1[t1], t1, e1, r1) || "";
        return a1;
    }
    function te(e1, r1, a1, c1) {
        switch(e1.type){
            case o:
            case s:
                return e1.return = e1.return || e1.value;
            case t:
                return "";
            case n:
                e1.value = e1.props.join(",");
        }
        return M(a1 = ce(e1.children, c1)) ? e1.return = e1.value + "{" + a1 + "}" : "";
    }
    function ne(e1) {
        var r1 = C(e1);
        return function(a1, c1, t1, n1) {
            var s1 = "";
            for(var i1 = 0; i1 < r1; i1++)s1 += e1[i1](a1, c1, t1, n1) || "";
            return s1;
        };
    }
    function se(e1) {
        return function(r1) {
            if (!r1.root) {
                if (r1 = r1.return) e1(r1);
            }
        };
    }
    function ie(e1, t1, i1, u1) {
        if (!e1.return) switch(e1.type){
            case s:
                e1.return = ae(e1.value, e1.length);
                break;
            case b:
                return ce([
                    N(y(e1.value, "@", "@" + c), e1, "")
                ], u1);
            case n:
                if (e1.length) return R(e1.props, function(t2) {
                    switch(E(t2, /(::plac\w+|:read-\w+)/)){
                        case ":read-only":
                        case ":read-write":
                            return ce([
                                N(y(t2, /:(read-\w+)/, ":" + a + "$1"), e1, "")
                            ], u1);
                        case "::placeholder":
                            return ce([
                                N(y(t2, /:(plac\w+)/, ":" + c + "input-$1"), e1, ""),
                                N(y(t2, /:(plac\w+)/, ":" + a + "$1"), e1, ""),
                                N(y(t2, /:(plac\w+)/, r + "input-$1"), e1, "")
                            ], u1);
                    }
                    return "";
                });
        }
    }
    function ue(e1) {
        switch(e1.type){
            case n:
                e1.props = e1.props.map(function(r1) {
                    return R(W(r1), function(r2, a1, c1) {
                        switch(A(r2, 0)){
                            case 12:
                                return O(r2, 1, M(r2));
                            case 0:
                            case 40:
                            case 43:
                            case 62:
                            case 126:
                                return r2;
                            case 58:
                                if (c1[++a1] === "global") c1[a1] = "", c1[++a1] = "\f" + O(c1[a1], a1 = 1, -1);
                            case 32:
                                return a1 === 1 ? "" : r2;
                            default:
                                switch(a1){
                                    case 0:
                                        e1 = r2;
                                        return C(c1) > 1 ? "" : r2;
                                    case a1 = C(c1) - 1:
                                    case 2:
                                        return a1 === 2 ? r2 + e1 + e1 : r2 + e1;
                                    default:
                                        return r2;
                                }
                        }
                    });
                });
        }
    }
    e.CHARSET = f;
    e.COMMENT = t;
    e.COUNTER_STYLE = w;
    e.DECLARATION = s;
    e.DOCUMENT = p;
    e.FONT_FACE = m;
    e.FONT_FEATURE_VALUES = d;
    e.IMPORT = o;
    e.KEYFRAMES = b;
    e.MEDIA = u;
    e.MOZ = a;
    e.MS = r;
    e.NAMESPACE = v;
    e.PAGE = i;
    e.RULESET = n;
    e.SUPPORTS = h;
    e.VIEWPORT = l;
    e.WEBKIT = c;
    e.abs = $;
    e.alloc = D;
    e.append = S;
    e.caret = F;
    e.char = P;
    e.charat = A;
    e.combine = R;
    e.comment = ee;
    e.commenter = Z;
    e.compile = J;
    e.copy = N;
    e.dealloc = K;
    e.declaration = re;
    e.delimit = V;
    e.delimiter = H;
    e.escaping = G;
    e.from = k;
    e.hash = g;
    e.identifier = q;
    e.indexof = T;
    e.match = E;
    e.middleware = ne;
    e.namespace = ue;
    e.next = _;
    e.node = z;
    e.parse = Q;
    e.peek = j;
    e.prefix = ae;
    e.prefixer = ie;
    e.prev = U;
    e.replace = y;
    e.ruleset = X;
    e.rulesheet = se;
    e.serialize = ce;
    e.sizeof = C;
    e.slice = I;
    e.stringify = te;
    e.strlen = M;
    e.substr = O;
    e.token = L;
    e.tokenize = W;
    e.tokenizer = B;
    e.trim = x;
    e.whitespace = Y;
    Object.defineProperty(e, "__esModule", {
        value: true
    });
});

},{}],"6wqWu":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var weakMemoize = function weakMemoize1(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // $FlowFixMe
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};
exports.default = weakMemoize;

},{}],"46jWj":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{}],"4hiCn":[function(require,module,exports) {
'use strict';
var React = require('react');
var createCache = require('@emotion/cache');
var _extends = require('@babel/runtime/helpers/extends');
var weakMemoize = require('@emotion/weak-memoize');
var isolatedHoistNonReactStaticsDoNotUseThisInYourCode_dist_emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCode = require('../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.cjs.js');
var utils = require('@emotion/utils');
var serialize = require('@emotion/serialize');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var createCache__default = /*#__PURE__*/ _interopDefault(createCache);
var _extends__default = /*#__PURE__*/ _interopDefault(_extends);
var weakMemoize__default = /*#__PURE__*/ _interopDefault(weakMemoize);
var hasOwnProperty = Object.prototype.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ React.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */ createCache__default['default']({
    key: 'css'
}) : null);
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache1(func) {
    // $FlowFixMe
    return(/*#__PURE__*/ React.forwardRef(function(props, ref) {
        // the cache will never be null in the browser
        var cache = React.useContext(EmotionCacheContext);
        return func(props, cache, ref);
    }));
};
var ThemeContext = /* #__PURE__ */ React.createContext({
});
var useTheme = function useTheme1() {
    return React.useContext(ThemeContext);
};
var getTheme = function getTheme1(outerTheme, theme) {
    if (typeof theme === 'function') {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme)) throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
        return mergedTheme;
    }
    if (theme == null || typeof theme !== 'object' || Array.isArray(theme)) throw new Error('[ThemeProvider] Please make your theme prop a plain object');
    return _extends__default['default']({
    }, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ weakMemoize__default['default'](function(outerTheme) {
    return weakMemoize__default['default'](function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider1(props) {
    var theme = React.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return(/*#__PURE__*/ React.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children));
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || 'Component';
    var render = function render1(props, ref) {
        var theme = React.useContext(ThemeContext);
        return(/*#__PURE__*/ React.createElement(Component, _extends__default['default']({
            theme: theme,
            ref: ref
        }, props)));
    }; // $FlowFixMe
    var WithTheme = /*#__PURE__*/ React.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return isolatedHoistNonReactStaticsDoNotUseThisInYourCode_dist_emotionReactIsolatedHoistNonReactStaticsDoNotUseThisInYourCode['default'](WithTheme, Component);
}
// thus we only need to replace what is a valid character for JS, but not for CSS
var sanitizeIdentifier = function sanitizeIdentifier1(identifier) {
    return identifier.replace(/\$/g, '-');
};
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps1(type, props) {
    if (typeof props.css === 'string' && props.css.indexOf(':') !== -1) throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    var newProps = {
    };
    for(var key in props)if (hasOwnProperty.call(props, key)) newProps[key] = props[key];
    newProps[typePropName] = type;
    var error = new Error();
    if (error.stack) {
        // chrome
        var match = error.stack.match(/at (?:Object\.|Module\.|)(?:jsx|createEmotionProps).*\n\s+at (?:Object\.|)([A-Z][A-Za-z0-9$]+) /);
        if (!match) // safari and firefox
        match = error.stack.match(/.*\n([A-Z][A-Za-z0-9$]+)@/);
        if (match) newProps[labelPropName] = sanitizeIdentifier(match[1]);
    }
    return newProps;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var type = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = '';
    if (typeof props.className === 'string') className = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = serialize.serializeStyles(registeredStyles, undefined, typeof cssProp === 'function' || Array.isArray(cssProp) ? React.useContext(ThemeContext) : undefined);
    if (serialized.name.indexOf('-') === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) serialized = serialize.serializeStyles([
            serialized,
            'label:' + labelFromStack + ';'
        ]);
    }
    var rules = utils.insertStyles(cache, serialized, typeof type === 'string');
    className += cache.key + "-" + serialized.name;
    var newProps = {
    };
    for(var key in props)if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && key !== labelPropName) newProps[key] = props[key];
    newProps.ref = ref;
    newProps.className = className;
    var ele = /*#__PURE__*/ React.createElement(type, newProps);
    return ele;
});
Emotion.displayName = 'EmotionCssPropInternal';
exports.CacheProvider = CacheProvider;
exports.Emotion = Emotion;
exports.ThemeContext = ThemeContext;
exports.ThemeProvider = ThemeProvider;
exports.createEmotionProps = createEmotionProps;
exports.hasOwnProperty = hasOwnProperty;
exports.useTheme = useTheme;
exports.withEmotionCache = withEmotionCache;
exports.withTheme = withTheme;

},{"react":"3f97z","@emotion/cache":"3b56H","@babel/runtime/helpers/extends":"3krLJ","@emotion/weak-memoize":"6wqWu","../isolated-hoist-non-react-statics-do-not-use-this-in-your-code/dist/emotion-react-isolated-hoist-non-react-statics-do-not-use-this-in-your-code.browser.cjs.js":"FgFXJ","@emotion/utils":"3bU6u","@emotion/serialize":"7L4kg"}],"3krLJ":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _extends.apply(this, arguments);
}
module.exports = _extends;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"FgFXJ":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var hoistNonReactStatics$1 = require('hoist-non-react-statics');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var hoistNonReactStatics__default = /*#__PURE__*/ _interopDefault(hoistNonReactStatics$1);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return hoistNonReactStatics__default['default'](targetComponent, sourceComponent);
};
exports.default = hoistNonReactStatics;

},{"hoist-non-react-statics":"3nUHV"}],"3nUHV":[function(require,module,exports) {
'use strict';
var reactIs = require('react-is');
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {
};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {
                }
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"react-is":"68QIU"}],"68QIU":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"2onCQ"}],"2onCQ":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element1 = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element1;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"3bU6u":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else rawClassName += className + " ";
    });
    return rawClassName;
}
var insertStyles = function insertStyles1(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
    if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;
        do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
            current = current.next;
        }while (current !== undefined)
    }
};
exports.getRegisteredStyles = getRegisteredStyles;
exports.insertStyles = insertStyles;

},{}],"7L4kg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var hashString = require('@emotion/hash');
var unitless = require('@emotion/unitless');
var memoize = require('@emotion/memoize');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var hashString__default = /*#__PURE__*/ _interopDefault(hashString);
var unitless__default = /*#__PURE__*/ _interopDefault(unitless);
var memoize__default = /*#__PURE__*/ _interopDefault(memoize);
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty1(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue1(value) {
    return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */ memoize__default['default'](function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue1(key, value) {
    switch(key){
        case 'animation':
        case 'animationName':
            if (typeof value === 'string') return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if (unitless__default['default'][key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) return value + 'px';
    return value;
};
var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
var contentValues = [
    'normal',
    'none',
    'initial',
    'inherit',
    'unset'
];
var oldProcessStyleValue = processStyleValue;
var msPattern = /^-ms-/;
var hyphenPattern = /-(.)/g;
var hyphenatedCache = {
};
processStyleValue = function processStyleValue2(key, value) {
    if (key === 'content') {
        if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
        }) + "?");
    }
    return processed;
};
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return '';
    if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
        return interpolation;
    }
    switch(typeof interpolation){
        case 'boolean':
            return '';
        case 'object':
            if (interpolation.anim === 1) {
                cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                };
                return interpolation.name;
            }
            if (interpolation.styles !== undefined) {
                var next = interpolation.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = interpolation.styles + ";";
                if (interpolation.map !== undefined) styles += interpolation.map;
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case 'function':
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            break;
        case 'string':
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
                return "${" + fakeVarName + "}";
            });
            if (matched.length) console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, [
                "`" + replaced + "`"
            ]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) return interpolation;
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = '';
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var _key in obj){
        var value = obj[_key];
        if (typeof value !== 'object') {
            if (registered != null && registered[value] !== undefined) string += _key + "{" + registered[value] + "}";
            else if (isProcessableValue(value)) string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        } else {
            if (_key === 'NO_COMPONENT_SELECTOR' && true) throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
            if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(_key){
                    case 'animation':
                    case 'animationName':
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                    default:
                        if (_key === 'undefined') console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                        string += _key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles1(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        if (strings[0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (strings[i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles += strings[i];
        }
    }
    var sourceMap;
    styles = styles.replace(sourceMapPattern, function(match) {
        sourceMap = match;
        return '';
    });
    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match = labelPattern.exec(styles)) !== null)identifierName += '-' + match[1];
    var name = hashString__default['default'](styles) + identifierName;
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
    };
};
exports.serializeStyles = serializeStyles;

},{"@emotion/hash":"7pg6e","@emotion/unitless":"7v4NZ","@emotion/memoize":"46jWj"}],"7pg6e":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 255;
            h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}
exports.default = murmur2;

},{}],"7v4NZ":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
exports.default = unitlessKeys;

},{}],"5cHLt":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _portalManager = require("./portal-manager");
Object.keys(_portalManager).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _portalManager[key]) return;
    exports[key] = _portalManager[key];
});
var _portal = require("./portal");
Object.keys(_portal).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _portal[key]) return;
    exports[key] = _portal[key];
});

},{"./portal-manager":"7h7y6","./portal":"1ttyC"}],"7h7y6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.PortalManager = PortalManager;
exports.usePortalManager = void 0;
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var _createContext = _reactUtils.createContext({
    strict: false,
    name: "PortalManagerContext"
}), PortalManagerContextProvider = _createContext[0], usePortalManager = _createContext[1];
exports.usePortalManager = usePortalManager;
function PortalManager(props) {
    var children = props.children, zIndex = props.zIndex;
    return(/*#__PURE__*/ React.createElement(PortalManagerContextProvider, {
        value: {
            zIndex: zIndex
        }
    }, children));
}
if (_utils.__DEV__) PortalManager.displayName = "PortalManager";

},{"@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"3364O":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _cssBoxModel = require("css-box-model");
Object.keys(_cssBoxModel).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _cssBoxModel[key]) return;
    exports[key] = _cssBoxModel[key];
});
var _array = require("./array");
Object.keys(_array).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _array[key]) return;
    exports[key] = _array[key];
});
var _assertion = require("./assertion");
Object.keys(_assertion).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _assertion[key]) return;
    exports[key] = _assertion[key];
});
var _breakpoint = require("./breakpoint");
Object.keys(_breakpoint).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _breakpoint[key]) return;
    exports[key] = _breakpoint[key];
});
var _dom = require("./dom");
Object.keys(_dom).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _dom[key]) return;
    exports[key] = _dom[key];
});
var _domQuery = require("./dom-query");
Object.keys(_domQuery).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _domQuery[key]) return;
    exports[key] = _domQuery[key];
});
var _focus = require("./focus");
Object.keys(_focus).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _focus[key]) return;
    exports[key] = _focus[key];
});
var _function = require("./function");
Object.keys(_function).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _function[key]) return;
    exports[key] = _function[key];
});
var _lazy = require("./lazy");
Object.keys(_lazy).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _lazy[key]) return;
    exports[key] = _lazy[key];
});
var _number = require("./number");
Object.keys(_number).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _number[key]) return;
    exports[key] = _number[key];
});
var _object = require("./object");
Object.keys(_object).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _object[key]) return;
    exports[key] = _object[key];
});
var _panEvent = require("./pan-event");
Object.keys(_panEvent).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _panEvent[key]) return;
    exports[key] = _panEvent[key];
});
var _pointerEvent = require("./pointer-event");
Object.keys(_pointerEvent).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _pointerEvent[key]) return;
    exports[key] = _pointerEvent[key];
});
var _responsive = require("./responsive");
Object.keys(_responsive).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _responsive[key]) return;
    exports[key] = _responsive[key];
});
var _tabbable = require("./tabbable");
Object.keys(_tabbable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tabbable[key]) return;
    exports[key] = _tabbable[key];
});
var _types = require("./types");
Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _types[key]) return;
    exports[key] = _types[key];
});
var _userAgent = require("./user-agent");
Object.keys(_userAgent).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _userAgent[key]) return;
    exports[key] = _userAgent[key];
});
var _walkObject = require("./walk-object");
Object.keys(_walkObject).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _walkObject[key]) return;
    exports[key] = _walkObject[key];
});

},{"css-box-model":"4htXY","./array":"6znhs","./assertion":"233Lb","./breakpoint":"2Q326","./dom":"3cdHE","./dom-query":"4ikxv","./focus":"ytKw6","./function":"3BvhN","./lazy":"2NOPB","./number":"78c58","./object":"20iPH","./pan-event":"1QVAr","./pointer-event":"4BQ0f","./responsive":"1PWm9","./tabbable":"6s5nh","./types":"1mf9h","./user-agent":"4OROY","./walk-object":"3PVKV"}],"4htXY":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var invariant = _interopDefault(require('tiny-invariant'));
var getRect = function getRect1(_ref) {
    var top = _ref.top, right = _ref.right, bottom = _ref.bottom, left = _ref.left;
    var width = right - left;
    var height = bottom - top;
    var rect = {
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        width: width,
        height: height,
        x: left,
        y: top,
        center: {
            x: (right + left) / 2,
            y: (bottom + top) / 2
        }
    };
    return rect;
};
var expand = function expand1(target, expandBy) {
    return {
        top: target.top - expandBy.top,
        left: target.left - expandBy.left,
        bottom: target.bottom + expandBy.bottom,
        right: target.right + expandBy.right
    };
};
var shrink = function shrink1(target, shrinkBy) {
    return {
        top: target.top + shrinkBy.top,
        left: target.left + shrinkBy.left,
        bottom: target.bottom - shrinkBy.bottom,
        right: target.right - shrinkBy.right
    };
};
var shift = function shift1(target, shiftBy) {
    return {
        top: target.top + shiftBy.y,
        left: target.left + shiftBy.x,
        bottom: target.bottom + shiftBy.y,
        right: target.right + shiftBy.x
    };
};
var noSpacing = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
};
var createBox = function createBox1(_ref2) {
    var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
    var marginBox = getRect(expand(borderBox, margin));
    var paddingBox = getRect(shrink(borderBox, border));
    var contentBox = getRect(shrink(paddingBox, padding));
    return {
        marginBox: marginBox,
        borderBox: getRect(borderBox),
        paddingBox: paddingBox,
        contentBox: contentBox,
        margin: margin,
        border: border,
        padding: padding
    };
};
var parse = function parse1(raw) {
    var value = raw.slice(0, -2);
    var suffix = raw.slice(-2);
    if (suffix !== 'px') return 0;
    var result = Number(value);
    !!isNaN(result) && invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]");
    return result;
};
var getWindowScroll = function getWindowScroll1() {
    return {
        x: window.pageXOffset,
        y: window.pageYOffset
    };
};
var offset = function offset1(original, change) {
    var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
    var shifted = shift(borderBox, change);
    return createBox({
        borderBox: shifted,
        border: border,
        margin: margin,
        padding: padding
    });
};
var withScroll = function withScroll1(original, scroll) {
    if (scroll === void 0) scroll = getWindowScroll();
    return offset(original, scroll);
};
var calculateBox = function calculateBox1(borderBox, styles) {
    var margin = {
        top: parse(styles.marginTop),
        right: parse(styles.marginRight),
        bottom: parse(styles.marginBottom),
        left: parse(styles.marginLeft)
    };
    var padding = {
        top: parse(styles.paddingTop),
        right: parse(styles.paddingRight),
        bottom: parse(styles.paddingBottom),
        left: parse(styles.paddingLeft)
    };
    var border = {
        top: parse(styles.borderTopWidth),
        right: parse(styles.borderRightWidth),
        bottom: parse(styles.borderBottomWidth),
        left: parse(styles.borderLeftWidth)
    };
    return createBox({
        borderBox: borderBox,
        margin: margin,
        padding: padding,
        border: border
    });
};
var getBox = function getBox1(el) {
    var borderBox = el.getBoundingClientRect();
    var styles = window.getComputedStyle(el);
    return calculateBox(borderBox, styles);
};
exports.calculateBox = calculateBox;
exports.createBox = createBox;
exports.expand = expand;
exports.getBox = getBox;
exports.getRect = getRect;
exports.offset = offset;
exports.shrink = shrink;
exports.withScroll = withScroll;

},{"tiny-invariant":"4v3Kg"}],"4v3Kg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isProduction = false;
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) return;
    if (isProduction) throw new Error(prefix);
    throw new Error(prefix + ": " + (message || ''));
}
exports.default = invariant;

},{}],"6znhs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getFirstItem = getFirstItem;
exports.getLastItem = getLastItem;
exports.getPrevItem = getPrevItem;
exports.getNextItem = getNextItem;
exports.removeIndex = removeIndex;
exports.addItem = addItem;
exports.removeItem = removeItem;
exports.getNextIndex = getNextIndex;
exports.getPrevIndex = getPrevIndex;
exports.chunk = chunk;
exports.getNextItemFromSearch = getNextItemFromSearch;
function getFirstItem(array) {
    return array != null && array.length ? array[0] : undefined;
}
function getLastItem(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
}
function getPrevItem(index, array, loop) {
    if (loop === void 0) loop = true;
    var prevIndex = getPrevIndex(index, array.length, loop);
    return array[prevIndex];
}
function getNextItem(index, array, loop) {
    if (loop === void 0) loop = true;
    var nextIndex = getNextIndex(index, array.length, 1, loop);
    return array[nextIndex];
}
function removeIndex(array, index) {
    return array.filter(function(_, idx) {
        return idx !== index;
    });
}
function addItem(array, item) {
    return [].concat(array, [
        item
    ]);
}
function removeItem(array, item) {
    return array.filter(function(eachItem) {
        return eachItem !== item;
    });
}
/**
 * Get the next index based on the current index and step.
 *
 * @param currentIndex the current index
 * @param length the total length or count of items
 * @param step the number of steps
 * @param loop whether to circle back once `currentIndex` is at the start/end
 */ function getNextIndex(currentIndex, length, step, loop) {
    if (step === void 0) step = 1;
    if (loop === void 0) loop = true;
    var lastIndex = length - 1;
    if (currentIndex === -1) return step > 0 ? 0 : lastIndex;
    var nextIndex = currentIndex + step;
    if (nextIndex < 0) return loop ? lastIndex : 0;
    if (nextIndex >= length) {
        if (loop) return 0;
        return currentIndex > length ? length : currentIndex;
    }
    return nextIndex;
}
/**
 * Get's the previous index based on the current index.
 * Mostly used for keyboard navigation.
 *
 * @param index - the current index
 * @param count - the length or total count of items in the array
 * @param loop - whether we should circle back to the
 * first/last once `currentIndex` is at the start/end
 */ function getPrevIndex(index, count, loop) {
    if (loop === void 0) loop = true;
    return getNextIndex(index, count, -1, loop);
}
/**
 * Converts an array into smaller chunks or groups.
 *
 * @param array the array to chunk into group
 * @param size the length of each chunk
 */ function chunk(array, size) {
    return array.reduce(function(rows, currentValue, index) {
        if (index % size === 0) rows.push([
            currentValue
        ]);
        else rows[rows.length - 1].push(currentValue);
        return rows;
    }, []);
}
/**
 * Gets the next item based on a search string
 *
 * @param items array of items
 * @param searchString the search string
 * @param itemToString resolves an item to string
 * @param currentItem the current selected item
 */ function getNextItemFromSearch(items, searchString, itemToString, currentItem) {
    if (searchString == null) return currentItem;
     // If current item doesn't exist, find the item that matches the search string
    if (!currentItem) {
        var foundItem = items.find(function(item) {
            return itemToString(item).toLowerCase().startsWith(searchString.toLowerCase());
        });
        return foundItem;
    } // Filter items for ones that match the search string (case insensitive)
    var matchingItems = items.filter(function(item) {
        return itemToString(item).toLowerCase().startsWith(searchString.toLowerCase());
    }); // If there's a match, let's get the next item to select
    if (matchingItems.length > 0) {
        var nextIndex; // If the currentItem is in the available items, we move to the next available option
        if (matchingItems.includes(currentItem)) {
            var currentIndex = matchingItems.indexOf(currentItem);
            nextIndex = currentIndex + 1;
            if (nextIndex === matchingItems.length) nextIndex = 0;
            return matchingItems[nextIndex];
        } // Else, we pick the first item in the available items
        nextIndex = items.indexOf(matchingItems[0]);
        return items[nextIndex];
    } // a decent fallback to the currentItem
    return currentItem;
}

},{}],"233Lb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isNumber = isNumber;
exports.isNotNumber = isNotNumber;
exports.isNumeric = isNumeric;
exports.isArray = isArray;
exports.isEmptyArray = isEmptyArray;
exports.isFunction = isFunction;
exports.isDefined = isDefined;
exports.isUndefined = isUndefined;
exports.isObject = isObject;
exports.isEmptyObject = isEmptyObject;
exports.isNotEmptyObject = isNotEmptyObject;
exports.isNull = isNull;
exports.isString = isString;
exports.isCssVar = isCssVar;
exports.isEmpty = isEmpty;
exports.isRefObject = isRefObject;
exports.isInputEvent = isInputEvent;
exports.__TEST__ = exports.__DEV__ = void 0;
// Number assertions
function isNumber(value) {
    return typeof value === "number";
}
function isNotNumber(value) {
    return typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
}
function isNumeric(value) {
    return value != null && value - parseFloat(value) + 1 >= 0;
} // Array assertions
function isArray(value) {
    return Array.isArray(value);
}
function isEmptyArray(value) {
    return isArray(value) && value.length === 0;
} // Function assertions
function isFunction(value) {
    return typeof value === "function";
} // Generic assertions
function isDefined(value) {
    return typeof value !== "undefined" && value !== undefined;
}
function isUndefined(value) {
    return typeof value === "undefined" || value === undefined;
} // Object assertions
function isObject(value) {
    var type = typeof value;
    return value != null && (type === "object" || type === "function") && !isArray(value);
}
function isEmptyObject(value) {
    return isObject(value) && Object.keys(value).length === 0;
}
function isNotEmptyObject(value) {
    return value && !isEmptyObject(value);
}
function isNull(value) {
    return value == null;
} // String assertions
function isString(value) {
    return Object.prototype.toString.call(value) === "[object String]";
}
function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
} // Empty assertions
function isEmpty(value) {
    if (isArray(value)) return isEmptyArray(value);
    if (isObject(value)) return isEmptyObject(value);
    if (value == null || value === "") return true;
    return false;
}
var __DEV__ = true;
exports.__DEV__ = __DEV__;
var __TEST__ = false;
exports.__TEST__ = __TEST__;
function isRefObject(val) {
    return "current" in val;
}
function isInputEvent(value) {
    return value && isObject(value) && isObject(value.target);
}

},{}],"2Q326":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.px = px;
exports.analyzeBreakpoints = analyzeBreakpoints;
var _array = require("./array");
var _assertion = require("./assertion");
var _object = require("./object");
function analyzeCSSValue(value) {
    var num = parseFloat(value.toString());
    var unit = value.toString().replace(String(num), "");
    return {
        unitless: !unit,
        value: num,
        unit: unit
    };
}
function px(value) {
    if (value == null) return value;
    var _analyzeCSSValue = analyzeCSSValue(value), unitless = _analyzeCSSValue.unitless;
    return unitless || _assertion.isNumber(value) ? value + "px" : value;
}
var sortByBreakpointValue = function sortByBreakpointValue1(a, b) {
    return parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
};
var sortBps = function sortBps1(breakpoints) {
    return _object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));
};
function normalize(breakpoints) {
    var sorted = sortBps(breakpoints);
    return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints) {
    var value = Object.keys(sortBps(breakpoints));
    return new Set(value);
}
function subtract(value) {
    var _px;
    if (!value) return value;
    value = (_px = px(value)) != null ? _px : value;
    var factor = value.endsWith("px") ? -1 : -0.0635;
    return _assertion.isNumber(value) ? "" + (value + factor) : value.replace(/([0-9]+\.?[0-9]*)/, function(m) {
        return "" + (parseFloat(m) + factor);
    });
}
function queryString(min, max) {
    var query = [];
    if (min) query.push("@media screen and (min-width: " + px(min) + ")");
    if (query.length > 0 && max) query.push("and");
    if (max) query.push("@media screen and (max-width: " + px(max) + ")");
    return query.join(" ");
}
function analyzeBreakpoints(breakpoints) {
    var _breakpoints$base;
    if (!breakpoints) return null;
    breakpoints.base = (_breakpoints$base = breakpoints.base) != null ? _breakpoints$base : "0px";
    var normalized = normalize(breakpoints);
    var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(function(_ref, index, entry) {
        var _entry;
        var breakpoint = _ref[0], minW = _ref[1];
        var _ref2 = (_entry = entry[index + 1]) != null ? _entry : [], maxW = _ref2[1];
        maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined;
        return {
            breakpoint: breakpoint,
            minW: minW,
            maxW: maxW,
            maxWQuery: queryString(null, maxW),
            minWQuery: queryString(minW),
            minMaxQuery: queryString(minW, maxW)
        };
    });
    var _keys = keys(breakpoints);
    var _keysArr = Array.from(_keys.values());
    return {
        keys: _keys,
        normalized: normalized,
        isResponsive: function isResponsive(test) {
            var keys1 = Object.keys(test);
            return keys1.length > 0 && keys1.every(function(key) {
                return _keys.has(key);
            });
        },
        asObject: sortBps(breakpoints),
        asArray: normalize(breakpoints),
        details: queries,
        media: [
            null
        ].concat(normalized.map(function(minW) {
            return queryString(minW);
        }).slice(1)),
        toArrayValue: function toArrayValue(test) {
            if (!_assertion.isObject(test)) throw new Error("toArrayValue: value must be an object");
            var result = _keysArr.map(function(bp) {
                var _test$bp;
                return (_test$bp = test[bp]) != null ? _test$bp : null;
            });
            while(_array.getLastItem(result) === null)result.pop();
            return result;
        },
        toObjectValue: function toObjectValue(test) {
            if (!Array.isArray(test)) throw new Error("toObjectValue: value must be an array");
            return test.reduce(function(acc, value, index) {
                var key = _keysArr[index];
                if (key != null && value != null) acc[key] = value;
                return acc;
            }, {
            });
        }
    };
}

},{"./array":"6znhs","./assertion":"233Lb","./object":"20iPH"}],"20iPH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.omit = omit;
exports.pick = pick;
exports.split = split;
exports.get = get;
exports.getWithDefault = getWithDefault;
exports.objectFilter = objectFilter;
exports.getCSSVar = exports.fromEntries = exports.objectKeys = exports.filterUndefined = exports.memoizedGet = exports.memoize = exports.mergeWith = void 0;
var _lodash = _interopRequireDefault(require("lodash.mergewith"));
exports.mergeWith = _lodash["default"];
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function omit(object, keys) {
    var result = {
    };
    Object.keys(object).forEach(function(key) {
        if (keys.includes(key)) return;
        result[key] = object[key];
    });
    return result;
}
function pick(object, keys) {
    var result = {
    };
    keys.forEach(function(key) {
        if (key in object) result[key] = object[key];
    });
    return result;
}
function split(object, keys) {
    var picked = {
    };
    var omitted = {
    };
    Object.keys(object).forEach(function(key) {
        if (keys.includes(key)) picked[key] = object[key];
        else omitted[key] = object[key];
    });
    return [
        picked,
        omitted
    ];
}
/**
 * Get value from a deeply nested object using a string path.
 * Memoizes the value.
 * @param obj - the object
 * @param path - the string path
 * @param def  - the fallback value
 */ function get(obj, path, fallback, index) {
    var key = typeof path === "string" ? path.split(".") : [
        path
    ];
    for(index = 0; index < key.length; index += 1){
        if (!obj) break;
        obj = obj[key[index]];
    }
    return obj === undefined ? fallback : obj;
}
var memoize = function memoize1(fn) {
    var cache = new WeakMap();
    var memoizedFn = function memoizedFn1(obj, path, fallback, index) {
        if (typeof obj === "undefined") return fn(obj, path, fallback);
        if (!cache.has(obj)) cache.set(obj, new Map());
        var map = cache.get(obj);
        if (map.has(path)) return map.get(path);
        var value = fn(obj, path, fallback, index);
        map.set(path, value);
        return value;
    };
    return memoizedFn;
};
exports.memoize = memoize;
var memoizedGet = memoize(get);
/**
 * Get value from deeply nested object, based on path
 * It returns the path value if not found in object
 *
 * @param path - the string path or value
 * @param scale - the string path or value
 */ exports.memoizedGet = memoizedGet;
function getWithDefault(path, scale) {
    return memoizedGet(scale, path, path);
}
/**
 * Returns the items of an object that meet the condition specified in a callback function.
 *
 * @param object the object to loop through
 * @param fn The filter function
 */ function objectFilter(object, fn) {
    var result = {
    };
    Object.keys(object).forEach(function(key) {
        var value = object[key];
        var shouldPass = fn(value, key, object);
        if (shouldPass) result[key] = value;
    });
    return result;
}
var filterUndefined = function filterUndefined1(object) {
    return objectFilter(object, function(val) {
        return val !== null && val !== undefined;
    });
};
exports.filterUndefined = filterUndefined;
var objectKeys = function objectKeys1(obj) {
    return Object.keys(obj);
};
/**
 * Object.entries polyfill for Nodev10 compatibility
 */ exports.objectKeys = objectKeys;
var fromEntries = function fromEntries1(entries) {
    return entries.reduce(function(carry, _ref) {
        var key = _ref[0], value = _ref[1];
        carry[key] = value;
        return carry;
    }, {
    });
};
/**
 * Get the CSS variable ref stored in the theme
 */ exports.fromEntries = fromEntries;
var getCSSVar = function getCSSVar1(theme, scale, value) {
    var _theme$__cssMap$$varR, _theme$__cssMap$;
    return (_theme$__cssMap$$varR = (_theme$__cssMap$ = theme.__cssMap[scale + "." + value]) == null ? void 0 : _theme$__cssMap$.varRef) != null ? _theme$__cssMap$$varR : value;
};
exports.getCSSVar = getCSSVar;

},{"lodash.mergewith":"3EJVl"}],"3EJVl":[function(require,module,exports) {
var global = arguments[3];
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.undefined && freeModule.undefined('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while((++index) < n)result[index] = iteratee(index);
    return result;
}
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, Symbol1 = root.Symbol, Uint8Array1 = root.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;
var defineProperty = function() {
    try {
        var func = getNative(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeMax = Math.max, nativeNow = Date.now;
/* Built-in method references that are verified to be native. */ var Map1 = getNative(root, 'Map'), nativeCreate = getNative(Object, 'create');
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {
    }
    return function(proto) {
        if (!isObject(proto)) return {
        };
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {
    };
    this.size = 0;
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map1 || ListCache),
        'string': new Hash
    };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
}
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
    });
};
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array1(result).set(new Uint8Array1(arrayBuffer));
    return result;
}
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while((++index) < length)array[index] = source[index];
    return array;
}
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {
    });
    var index = -1, length = props.length;
    while((++index) < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while((++index) < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {
    };
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
    return false;
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while((++index) < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while((++index) < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') return;
    if (key == '__proto__') return;
    return object[key];
}
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = shortOut(baseSetToString);
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if ((++count) >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e) {
        }
    }
    return '';
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
});
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = mergeWith;

},{}],"3cdHE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getOwnerWindow = getOwnerWindow;
exports.getOwnerDocument = getOwnerDocument;
exports.canUseDOM = canUseDOM;
exports.getActiveElement = getActiveElement;
exports.contains = contains;
exports.addDomEvent = addDomEvent;
exports.normalizeEventKey = normalizeEventKey;
exports.getRelatedTarget = getRelatedTarget;
exports.isRightClick = isRightClick;
exports.cx = exports.ariaAttr = exports.dataAttr = exports.isBrowser = void 0;
function getOwnerWindow(node) {
    var _getOwnerDocument$def, _getOwnerDocument;
    return node instanceof Element ? (_getOwnerDocument$def = (_getOwnerDocument = getOwnerDocument(node)) == null ? void 0 : _getOwnerDocument.defaultView) != null ? _getOwnerDocument$def : window : window;
}
function getOwnerDocument(node) {
    var _node$ownerDocument;
    return node instanceof Element ? (_node$ownerDocument = node.ownerDocument) != null ? _node$ownerDocument : document : document;
}
function canUseDOM() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser = canUseDOM();
exports.isBrowser = isBrowser;
var dataAttr = function dataAttr1(condition) {
    return condition ? "" : undefined;
};
exports.dataAttr = dataAttr;
var ariaAttr = function ariaAttr1(condition) {
    return condition ? true : undefined;
};
exports.ariaAttr = ariaAttr;
var cx = function cx1() {
    for(var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++)classNames[_key] = arguments[_key];
    return classNames.filter(Boolean).join(" ");
};
exports.cx = cx;
function getActiveElement(node) {
    var doc = getOwnerDocument(node);
    return doc == null ? void 0 : doc.activeElement;
}
function contains(parent, child) {
    if (!parent) return false;
    return parent === child || parent.contains(child);
}
function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return function() {
        target.removeEventListener(eventName, handler, options);
    };
}
/**
 * Get the normalized event key across all browsers
 * @param event keyboard event
 */ function normalizeEventKey(event) {
    var key = event.key, keyCode = event.keyCode;
    var isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0;
    var eventKey = isArrowKey ? "Arrow" + key : key;
    return eventKey;
}
function getRelatedTarget(event) {
    var _event$target, _ref, _event$relatedTarget;
    var target = (_event$target = event.target) != null ? _event$target : event.currentTarget;
    var activeElement = getActiveElement(target);
    var originalTarget = event.nativeEvent.explicitOriginalTarget;
    return (_ref = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : originalTarget) != null ? _ref : activeElement;
}
function isRightClick(event) {
    return event.button !== 0;
}

},{}],"4ikxv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getAllFocusable = getAllFocusable;
exports.getFirstFocusable = getFirstFocusable;
exports.getAllTabbable = getAllTabbable;
exports.getFirstTabbableIn = getFirstTabbableIn;
exports.getLastTabbableIn = getLastTabbableIn;
exports.getNextTabbable = getNextTabbable;
exports.getPreviousTabbable = getPreviousTabbable;
exports.focusNextTabbable = focusNextTabbable;
exports.focusPreviousTabbable = focusPreviousTabbable;
exports.closest = closest;
var _tabbable = require("./tabbable");
var focusableElList = [
    "input:not([disabled])",
    "select:not([disabled])",
    "textarea:not([disabled])",
    "embed",
    "iframe",
    "object",
    "a[href]",
    "area[href]",
    "button:not([disabled])",
    "[tabindex]",
    "audio[controls]",
    "video[controls]",
    "*[tabindex]:not([aria-disabled])",
    "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
function getAllFocusable(container) {
    var focusableEls = Array.from(container.querySelectorAll(focusableElSelector));
    focusableEls.unshift(container);
    return focusableEls.filter(_tabbable.isFocusable).filter(function(el) {
        return window.getComputedStyle(el).display !== "none";
    });
}
function getFirstFocusable(container) {
    var allFocusable = getAllFocusable(container);
    return allFocusable.length ? allFocusable[0] : null;
}
function getAllTabbable(container, fallbackToFocusable) {
    var allFocusable = Array.from(container.querySelectorAll(focusableElSelector));
    var allTabbable = allFocusable.filter(_tabbable.isTabbable);
    if (_tabbable.isTabbable(container)) allTabbable.unshift(container);
    if (!allTabbable.length && fallbackToFocusable) return allFocusable;
    return allTabbable;
}
function getFirstTabbableIn(container, fallbackToFocusable) {
    var _getAllTabbable = getAllTabbable(container, fallbackToFocusable), first = _getAllTabbable[0];
    return first || null;
}
function getLastTabbableIn(container, fallbackToFocusable) {
    var allTabbable = getAllTabbable(container, fallbackToFocusable);
    return allTabbable[allTabbable.length - 1] || null;
}
function getNextTabbable(container, fallbackToFocusable) {
    var allFocusable = getAllFocusable(container);
    var index = allFocusable.indexOf(document.activeElement);
    var slice = allFocusable.slice(index + 1);
    return slice.find(_tabbable.isTabbable) || allFocusable.find(_tabbable.isTabbable) || (fallbackToFocusable ? slice[0] : null);
}
function getPreviousTabbable(container, fallbackToFocusable) {
    var allFocusable = getAllFocusable(container).reverse();
    var index = allFocusable.indexOf(document.activeElement);
    var slice = allFocusable.slice(index + 1);
    return slice.find(_tabbable.isTabbable) || allFocusable.find(_tabbable.isTabbable) || (fallbackToFocusable ? slice[0] : null);
}
function focusNextTabbable(container, fallbackToFocusable) {
    var nextTabbable = getNextTabbable(container, fallbackToFocusable);
    if (nextTabbable && _tabbable.isHTMLElement(nextTabbable)) nextTabbable.focus();
}
function focusPreviousTabbable(container, fallbackToFocusable) {
    var previousTabbable = getPreviousTabbable(container, fallbackToFocusable);
    if (previousTabbable && _tabbable.isHTMLElement(previousTabbable)) previousTabbable.focus();
}
function matches(element, selectors) {
    if ("matches" in element) return element.matches(selectors);
    if ("msMatchesSelector" in element) return element.msMatchesSelector(selectors);
    return element.webkitMatchesSelector(selectors);
}
function closest(element, selectors) {
    if ("closest" in element) return element.closest(selectors);
    do {
        if (matches(element, selectors)) return element;
        element = element.parentElement || element.parentNode;
    }while (element !== null && element.nodeType === 1)
    return null;
}

},{"./tabbable":"6s5nh"}],"6s5nh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isDisabled = isDisabled;
exports.isInputElement = isInputElement;
exports.isActiveElement = isActiveElement;
exports.hasFocusWithin = hasFocusWithin;
exports.isHTMLElement = isHTMLElement;
exports.isHidden = isHidden;
exports.isContentEditable = isContentEditable;
exports.isFocusable = isFocusable;
exports.isTabbable = isTabbable;
exports.hasNegativeTabIndex = exports.hasTabIndex = exports.hasDisplayNone = void 0;
var _dom = require("./dom");
// Really great work done by Diego Haz on this one
// https://github.com/reakit/reakit/blob/master/packages/reakit-utils/src/tabbable.ts
var hasDisplayNone = function hasDisplayNone1(element) {
    return window.getComputedStyle(element).display === "none";
};
exports.hasDisplayNone = hasDisplayNone;
var hasTabIndex = function hasTabIndex1(element) {
    return element.hasAttribute("tabindex");
};
exports.hasTabIndex = hasTabIndex;
var hasNegativeTabIndex = function hasNegativeTabIndex1(element) {
    return hasTabIndex(element) && element.tabIndex === -1;
};
exports.hasNegativeTabIndex = hasNegativeTabIndex;
function isDisabled(element) {
    return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isInputElement(element) {
    return isHTMLElement(element) && element.tagName.toLowerCase() === "input" && "select" in element;
}
function isActiveElement(element) {
    var doc = element instanceof HTMLElement ? _dom.getOwnerDocument(element) : document;
    return doc.activeElement === element;
}
function hasFocusWithin(element) {
    if (!document.activeElement) return false;
    return element.contains(document.activeElement);
}
function isHTMLElement(element) {
    return element instanceof HTMLElement;
}
function isHidden(element) {
    if (element.parentElement && isHidden(element.parentElement)) return true;
    return element.hidden;
}
function isContentEditable(element) {
    var value = element.getAttribute("contenteditable");
    return value !== "false" && value != null;
}
function isFocusable(element) {
    if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) return false;
    var localName = element.localName;
    var focusableTags = [
        "input",
        "select",
        "textarea",
        "button"
    ];
    if (focusableTags.indexOf(localName) >= 0) return true;
    var others = {
        a: function a() {
            return element.hasAttribute("href");
        },
        audio: function audio() {
            return element.hasAttribute("controls");
        },
        video: function video() {
            return element.hasAttribute("controls");
        }
    };
    if (localName in others) return others[localName]();
    if (isContentEditable(element)) return true;
    return hasTabIndex(element);
}
function isTabbable(element) {
    if (!element) return false;
    return isHTMLElement(element) && isFocusable(element) && !hasNegativeTabIndex(element);
}

},{"./dom":"3cdHE"}],"ytKw6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.focus = focus;
var _dom = require("./dom");
var _function = require("./function");
var _tabbable = require("./tabbable");
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function() {
                if (i >= o.length) return {
                    done: true
                };
                return {
                    done: false,
                    value: o[i++]
                };
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    it = o[Symbol.iterator]();
    return it.next.bind(it);
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function focus(element, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$isActive = _options.isActive, isActive = _options$isActive === void 0 ? _tabbable.isActiveElement : _options$isActive, nextTick = _options.nextTick, _options$preventScrol = _options.preventScroll, preventScroll = _options$preventScrol === void 0 ? true : _options$preventScrol, _options$selectTextIf = _options.selectTextIfInput, selectTextIfInput = _options$selectTextIf === void 0 ? true : _options$selectTextIf;
    if (!element || isActive(element)) return -1;
    function triggerFocus() {
        if (!element) {
            _function.warn({
                condition: true,
                message: "[chakra-ui]: can't call focus() on `null` or `undefined` element"
            });
            return;
        }
        if (supportsPreventScroll()) element.focus({
            preventScroll: preventScroll
        });
        else {
            element.focus();
            if (preventScroll) {
                var scrollableElements = getScrollableElements(element);
                restoreScrollPosition(scrollableElements);
            }
        }
        if (_tabbable.isInputElement(element) && selectTextIfInput) element.select();
    }
    if (nextTick) return requestAnimationFrame(triggerFocus);
    triggerFocus();
    return -1;
}
var supportsPreventScrollCached = null;
function supportsPreventScroll() {
    if (supportsPreventScrollCached == null) {
        supportsPreventScrollCached = false;
        try {
            var div = document.createElement("div");
            div.focus({
                get preventScroll () {
                    supportsPreventScrollCached = true;
                    return true;
                }
            });
        } catch (e) {
        }
    }
    return supportsPreventScrollCached;
}
function getScrollableElements(element) {
    var doc = _dom.getOwnerDocument(element);
    var parent = element.parentNode;
    var scrollableElements = [];
    var rootScrollingElement = doc.scrollingElement || doc.documentElement;
    while(parent instanceof HTMLElement && parent !== rootScrollingElement){
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
        });
        parent = parent.parentNode;
    }
    if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
    });
    return scrollableElements;
}
function restoreScrollPosition(scrollableElements) {
    for(var _iterator = _createForOfIteratorHelperLoose(scrollableElements), _step; !(_step = _iterator()).done;){
        var _step$value = _step.value, element = _step$value.element, scrollTop = _step$value.scrollTop, scrollLeft = _step$value.scrollLeft;
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
    }
}

},{"./dom":"3cdHE","./function":"3BvhN","./tabbable":"6s5nh"}],"3BvhN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.runIfFn = runIfFn;
exports.callAllHandlers = callAllHandlers;
exports.callAll = callAll;
exports.once = once;
exports.distance = distance;
exports.pipe = exports.scheduleMicrotask = exports.error = exports.warn = exports.noop = exports.compose = void 0;
var _assertion = require("./assertion");
/* eslint-disable no-nested-ternary */ function runIfFn(valueOrFn) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return _assertion.isFunction(valueOrFn) ? valueOrFn.apply(void 0, args) : valueOrFn;
}
function callAllHandlers() {
    for(var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)fns[_key2] = arguments[_key2];
    return function func(event) {
        fns.some(function(fn) {
            fn == null || fn(event);
            return event == null ? void 0 : event.defaultPrevented;
        });
    };
}
function callAll() {
    for(var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)fns[_key3] = arguments[_key3];
    return function mergedFn(arg) {
        fns.forEach(function(fn) {
            fn == null || fn(arg);
        });
    };
}
var compose = function compose1(fn1) {
    for(var _len4 = arguments.length, fns = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)fns[_key4 - 1] = arguments[_key4];
    return fns.reduce(function(f1, f2) {
        return function() {
            return f1(f2.apply(void 0, arguments));
        };
    }, fn1);
};
exports.compose = compose;
function once(fn) {
    var result;
    return function func() {
        if (fn) {
            for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)args[_key5] = arguments[_key5];
            result = fn.apply(this, args);
            fn = null;
        }
        return result;
    };
}
var noop = function noop1() {
};
exports.noop = noop;
var warn = once(function(options) {
    return function() {
        var condition = options.condition, message = options.message;
        if (condition && _assertion.__DEV__) console.warn(message);
    };
});
exports.warn = warn;
var error = once(function(options) {
    return function() {
        var condition = options.condition, message = options.message;
        if (condition && _assertion.__DEV__) console.error(message);
    };
});
exports.error = error;
var promiseMicrotask = function promiseMicrotask1(callback) {
    Promise.resolve().then(callback);
};
var scheduleMicrotask = _assertion.__TEST__ ? function(fn) {
    return fn();
} : typeof queueMicrotask === "function" ? queueMicrotask : promiseMicrotask;
exports.scheduleMicrotask = scheduleMicrotask;
var pipe = function pipe1() {
    for(var _len6 = arguments.length, fns = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)fns[_key6] = arguments[_key6];
    return function(v) {
        return fns.reduce(function(a, b) {
            return b(a);
        }, v);
    };
};
exports.pipe = pipe;
var distance1D = function distance1D1(a, b) {
    return Math.abs(a - b);
};
var isPoint = function isPoint1(point) {
    return "x" in point && "y" in point;
};
function distance(a, b) {
    if (_assertion.isNumber(a) && _assertion.isNumber(b)) return distance1D(a, b);
    if (isPoint(a) && isPoint(b)) {
        var xDelta = distance1D(a.x, b.x);
        var yDelta = distance1D(a.y, b.y);
        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2));
    }
    return 0;
}

},{"./assertion":"233Lb"}],"2NOPB":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.determineLazyBehavior = determineLazyBehavior;
/**
 * Determines whether the children of a disclosure widget
 * should be rendered or not, depending on the lazy behavior.
 *
 * Used in accordion, tabs, popover, menu and other disclosure
 * widgets.
 */ function determineLazyBehavior(options) {
    var hasBeenSelected = options.hasBeenSelected, isLazy = options.isLazy, isSelected = options.isSelected, _options$lazyBehavior = options.lazyBehavior, lazyBehavior = _options$lazyBehavior === void 0 ? "unmount" : _options$lazyBehavior; // if not lazy, always render the disclosure's content
    if (!isLazy) return true; // if the diclosure is selected, render the disclosure's content
    if (isSelected) return true; // if the disclosure was selected but not active, keep its content active
    if (lazyBehavior === "keepMounted" && hasBeenSelected) return true;
    return false;
}

},{}],"78c58":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.toPrecision = toPrecision;
exports.countDecimalPlaces = countDecimalPlaces;
exports.valueToPercent = valueToPercent;
exports.percentToValue = percentToValue;
exports.roundValueToStep = roundValueToStep;
exports.clampValue = clampValue;
exports.maxSafeInteger = exports.minSafeInteger = void 0;
var _assertion = require("./assertion");
var _function = require("./function");
var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
exports.minSafeInteger = minSafeInteger;
var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
exports.maxSafeInteger = maxSafeInteger;
function toNumber(value) {
    var num = parseFloat(value);
    return _assertion.isNotNumber(num) ? 0 : num;
}
/**
 * Converts a value to a specific precision (or decimal points).
 *
 * Returns a string representing a number in fixed-point notation.
 *
 * @param value the value to convert
 * @param precision the precision or decimal points
 */ function toPrecision(value, precision) {
    var nextValue = toNumber(value);
    var scaleFactor = Math.pow(10, precision != null ? precision : 10);
    nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;
    return precision ? nextValue.toFixed(precision) : nextValue.toString();
}
/**
 * Counts the number of decimal places a number has
 *
 * @param value the decimal value to count
 */ function countDecimalPlaces(value) {
    if (!Number.isFinite(value)) return 0;
    var e = 1;
    var p = 0;
    while(Math.round(value * e) / e !== value){
        e *= 10;
        p += 1;
    }
    return p;
}
/**
 * Convert a value to percentage based on lower and upper bound values
 *
 * @param value the value in number
 * @param min the minimum value
 * @param max the maximum value
 */ function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
/**
 * Calculate the value based on percentage, lower and upper bound values
 *
 * @param percent the percent value in decimals (e.g 0.6, 0.3)
 * @param min the minimum value
 * @param max the maximum value
 */ function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
}
/**
 * Rounds a specific value to the next or previous step
 *
 * @param value the value to round
 * @param from the number that stepping started from
 * @param step the specified step
 */ function roundValueToStep(value, from, step) {
    var nextValue = Math.round((value - from) / step) * step + from;
    var precision = countDecimalPlaces(step);
    return toPrecision(nextValue, precision);
}
/**
 * Clamps a value to ensure it stays within the min and max range.
 *
 * @param value the value to clamp
 * @param min the minimum value
 * @param max the maximum value
 */ function clampValue(value, min, max) {
    if (value == null) return value;
    _function.warn({
        condition: max < min,
        message: "clamp: max cannot be less than min"
    });
    return Math.min(Math.max(value, min), max);
}

},{"./assertion":"233Lb","./function":"3BvhN"}],"1QVAr":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.PanSession = void 0;
var _framesync = _interopRequireWildcard(require("framesync"));
var _pointerEvent = require("./pointer-event");
var _function = require("./function");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
/**
 * @internal
 *
 * A Pan Session is recognized when the pointer is down
 * and moved in the allowed direction.
 */ var PanSession = /*#__PURE__*/ function() {
    /**
   * We use this to keep track of the `x` and `y` pan session history
   * as the pan event happens. It helps to calculate the `offset` and `delta`
   */ // The pointer event that started the pan session
    // The current pointer event for the pan session
    // The current pointer event info for the pan session
    /**
   * Minimal pan distance required before recognizing the pan.
   * @default "3px"
   */ function PanSession1(_event, handlers, threshold) {
        var _this = this;
        _defineProperty(this, "history", []);
        _defineProperty(this, "startEvent", null);
        _defineProperty(this, "lastEvent", null);
        _defineProperty(this, "lastEventInfo", null);
        _defineProperty(this, "handlers", {
        });
        _defineProperty(this, "removeListeners", _function.noop);
        _defineProperty(this, "threshold", 3);
        _defineProperty(this, "updatePoint", function() {
            if (!(_this.lastEvent && _this.lastEventInfo)) return;
            var info = getPanInfo(_this.lastEventInfo, _this.history);
            var isPanStarted = _this.startEvent !== null;
            var isDistancePastThreshold = _function.distance(info.offset, {
                x: 0,
                y: 0
            }) >= _this.threshold;
            if (!isPanStarted && !isDistancePastThreshold) return;
            var _getFrameData = _framesync.getFrameData(), timestamp = _getFrameData.timestamp;
            _this.history.push(_extends({
            }, info.point, {
                timestamp: timestamp
            }));
            var _this$handlers = _this.handlers, onStart = _this$handlers.onStart, onMove = _this$handlers.onMove;
            if (!isPanStarted) {
                onStart == null || onStart(_this.lastEvent, info);
                _this.startEvent = _this.lastEvent;
            }
            onMove == null || onMove(_this.lastEvent, info);
        });
        _defineProperty(this, "onPointerMove", function(event, info) {
            _this.lastEvent = event;
            _this.lastEventInfo = info; // Because Safari doesn't trigger mouseup events when it's above a `<select>`
            if (_pointerEvent.isMouseEvent(event) && event.buttons === 0) {
                _this.onPointerUp(event, info);
                return;
            } // Throttle mouse move event to once per frame
            _framesync["default"].update(_this.updatePoint, true);
        });
        _defineProperty(this, "onPointerUp", function(event, info) {
            // notify pan session ended
            var panInfo = getPanInfo(info, _this.history);
            var _this$handlers2 = _this.handlers, onEnd = _this$handlers2.onEnd, onSessionEnd = _this$handlers2.onSessionEnd;
            onSessionEnd == null || onSessionEnd(event, panInfo);
            _this.end(); // if panning never started, no need to call `onEnd`
            // panning requires a pointermove of at least 3px
            if (!onEnd || !_this.startEvent) return;
            onEnd == null || onEnd(event, panInfo);
        });
        // If we have more than one touch, don't start detecting this gesture
        if (_pointerEvent.isMultiTouchEvent(_event)) return;
        this.handlers = handlers;
        if (threshold) this.threshold = threshold;
         // stop default browser behavior
        _event.stopPropagation();
        _event.preventDefault(); // get and save the `pointerdown` event info in history
        // we'll use it to compute the `offset`
        var _info = _pointerEvent.extractEventInfo(_event);
        var _getFrameData2 = _framesync.getFrameData(), _timestamp = _getFrameData2.timestamp;
        this.history = [
            _extends({
            }, _info.point, {
                timestamp: _timestamp
            })
        ]; // notify pan session start
        var onSessionStart = handlers.onSessionStart;
        onSessionStart == null || onSessionStart(_event, getPanInfo(_info, this.history)); // attach event listeners and return a single function to remove them all
        this.removeListeners = _function.pipe(_pointerEvent.addPointerEvent(window, "pointermove", this.onPointerMove), _pointerEvent.addPointerEvent(window, "pointerup", this.onPointerUp), _pointerEvent.addPointerEvent(window, "pointercancel", this.onPointerUp));
    }
    var _proto = PanSession1.prototype;
    _proto.updateHandlers = function updateHandlers(handlers) {
        this.handlers = handlers;
    };
    _proto.end = function end() {
        var _this$removeListeners;
        (_this$removeListeners = this.removeListeners) == null || _this$removeListeners.call(this);
        _framesync.cancelSync.update(this.updatePoint);
    };
    return PanSession1;
}();
exports.PanSession = PanSession;
function subtractPoint(a, b) {
    return {
        x: a.x - b.x,
        y: a.y - b.y
    };
}
function startPanPoint(history) {
    return history[0];
}
function lastPanPoint(history) {
    return history[history.length - 1];
}
function getPanInfo(info, history) {
    return {
        point: info.point,
        delta: subtractPoint(info.point, lastPanPoint(history)),
        offset: subtractPoint(info.point, startPanPoint(history)),
        velocity: getVelocity(history, 0.1)
    };
}
function lastDevicePoint(history) {
    return history[history.length - 1];
}
var toMilliseconds = function toMilliseconds1(seconds) {
    return seconds * 1000;
};
function getVelocity(history, timeDelta) {
    if (history.length < 2) return {
        x: 0,
        y: 0
    };
    var i = history.length - 1;
    var timestampedPoint = null;
    var lastPoint = lastDevicePoint(history);
    while(i >= 0){
        timestampedPoint = history[i];
        if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) break;
        i--;
    }
    if (!timestampedPoint) return {
        x: 0,
        y: 0
    };
    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;
    if (time === 0) return {
        x: 0,
        y: 0
    };
    var currentVelocity = {
        x: (lastPoint.x - timestampedPoint.x) / time,
        y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) currentVelocity.x = 0;
    if (currentVelocity.y === Infinity) currentVelocity.y = 0;
    return currentVelocity;
}

},{"framesync":"5fyvk","./pointer-event":"4BQ0f","./function":"3BvhN"}],"5fyvk":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var defaultTimestep = 1 / 60 * 1000;
var getCurrentTime = typeof performance !== "undefined" ? function() {
    return performance.now();
} : function() {
    return Date.now();
};
var onNextFrame = typeof window !== "undefined" ? function(callback) {
    return window.requestAnimationFrame(callback);
} : function(callback) {
    return setTimeout(function() {
        return callback(getCurrentTime());
    }, defaultTimestep);
};
function createRenderStep(runNextFrame) {
    var toRun = [];
    var toRunNextFrame = [];
    var numToRun = 0;
    var isProcessing = false;
    var toKeepAlive = new WeakSet();
    var step = {
        schedule: function(callback, keepAlive, immediate) {
            if (keepAlive === void 0) keepAlive = false;
            if (immediate === void 0) immediate = false;
            var addToCurrentFrame = immediate && isProcessing;
            var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
            if (keepAlive) toKeepAlive.add(callback);
            if (buffer.indexOf(callback) === -1) {
                buffer.push(callback);
                if (addToCurrentFrame && isProcessing) numToRun = toRun.length;
            }
            return callback;
        },
        cancel: function(callback) {
            var index = toRunNextFrame.indexOf(callback);
            if (index !== -1) toRunNextFrame.splice(index, 1);
            toKeepAlive.delete(callback);
        },
        process: function(frameData) {
            var _a;
            isProcessing = true;
            _a = [
                toRunNextFrame,
                toRun
            ], toRun = _a[0], toRunNextFrame = _a[1];
            toRunNextFrame.length = 0;
            numToRun = toRun.length;
            if (numToRun) for(var i = 0; i < numToRun; i++){
                var callback = toRun[i];
                callback(frameData);
                if (toKeepAlive.has(callback)) {
                    step.schedule(callback);
                    runNextFrame();
                }
            }
            isProcessing = false;
        }
    };
    return step;
}
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
    delta: 0,
    timestamp: 0
};
var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender", 
];
var steps = stepsOrder.reduce(function(acc, key) {
    acc[key] = createRenderStep(function() {
        return runNextFrame = true;
    });
    return acc;
}, {
});
var sync = stepsOrder.reduce(function(acc, key) {
    var step = steps[key];
    acc[key] = function(process, keepAlive, immediate) {
        if (keepAlive === void 0) keepAlive = false;
        if (immediate === void 0) immediate = false;
        if (!runNextFrame) startLoop();
        return step.schedule(process, keepAlive, immediate);
    };
    return acc;
}, {
});
var cancelSync = stepsOrder.reduce(function(acc, key) {
    acc[key] = steps[key].cancel;
    return acc;
}, {
});
var flushSync = stepsOrder.reduce(function(acc, key) {
    acc[key] = function() {
        return steps[key].process(frame);
    };
    return acc;
}, {
});
var processStep = function(stepId) {
    return steps[stepId].process(frame);
};
var processFrame = function(timestamp) {
    runNextFrame = false;
    frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
        useDefaultElapsed = false;
        onNextFrame(processFrame);
    }
};
var startLoop = function() {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing) onNextFrame(processFrame);
};
var getFrameData = function() {
    return frame;
};
exports.cancelSync = cancelSync;
exports.default = sync;
exports.flushSync = flushSync;
exports.getFrameData = getFrameData;

},{}],"4BQ0f":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isMouseEvent = isMouseEvent;
exports.isTouchEvent = isTouchEvent;
exports.extractEventInfo = extractEventInfo;
exports.getViewportPointFromEvent = getViewportPointFromEvent;
exports.getPointerEventName = getPointerEventName;
exports.addPointerEvent = addPointerEvent;
exports.isMultiTouchEvent = isMultiTouchEvent;
exports.wrapPointerEventHandler = void 0;
var _dom = require("./dom");
/**
 * Credit goes to `framer-motion` of this useful utilities.
 * License can be found here: https://github.com/framer/motion
 */ function isMouseEvent(event) {
    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.
    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) return !!(event.pointerType === "mouse");
    return event instanceof MouseEvent;
}
function isTouchEvent(event) {
    var hasTouches = !!event.touches;
    return hasTouches;
}
/**
 * Filters out events not attached to the primary pointer (currently left mouse button)
 * @param eventHandler
 */ function filterPrimaryPointer(eventHandler) {
    return function(event) {
        var isMouseEvent1 = event instanceof MouseEvent;
        var isPrimaryPointer = !isMouseEvent1 || isMouseEvent1 && event.button === 0;
        if (isPrimaryPointer) eventHandler(event);
    };
}
var defaultPagePoint = {
    pageX: 0,
    pageY: 0
};
function pointFromTouch(e, pointType) {
    if (pointType === void 0) pointType = "page";
    var primaryTouch = e.touches[0] || e.changedTouches[0];
    var point = primaryTouch || defaultPagePoint;
    return {
        x: point[pointType + "X"],
        y: point[pointType + "Y"]
    };
}
function pointFromMouse(point, pointType) {
    if (pointType === void 0) pointType = "page";
    return {
        x: point[pointType + "X"],
        y: point[pointType + "Y"]
    };
}
function extractEventInfo(event, pointType) {
    if (pointType === void 0) pointType = "page";
    return {
        point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
}
function getViewportPointFromEvent(event) {
    return extractEventInfo(event, "client");
}
var wrapPointerEventHandler = function wrapPointerEventHandler1(handler, shouldFilterPrimaryPointer) {
    if (shouldFilterPrimaryPointer === void 0) shouldFilterPrimaryPointer = false;
    var listener = function listener1(event) {
        return handler(event, extractEventInfo(event));
    };
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
}; // We check for event support via functions in case they've been mocked by a testing suite.
exports.wrapPointerEventHandler = wrapPointerEventHandler;
var supportsPointerEvents = function supportsPointerEvents1() {
    return _dom.isBrowser && window.onpointerdown === null;
};
var supportsTouchEvents = function supportsTouchEvents1() {
    return _dom.isBrowser && window.ontouchstart === null;
};
var supportsMouseEvents = function supportsMouseEvents1() {
    return _dom.isBrowser && window.onmousedown === null;
};
var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
};
var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
};
function getPointerEventName(name) {
    if (supportsPointerEvents()) return name;
    if (supportsTouchEvents()) return touchEventNames[name];
    if (supportsMouseEvents()) return mouseEventNames[name];
    return name;
}
function addPointerEvent(target, eventName, handler, options) {
    return _dom.addDomEvent(target, getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === "pointerdown"), options);
}
function isMultiTouchEvent(event) {
    return isTouchEvent(event) && event.touches.length > 1;
}

},{"./dom":"3cdHE"}],"1PWm9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.mapResponsive = mapResponsive;
exports.objectToArrayNotation = objectToArrayNotation;
exports.arrayToObjectNotation = arrayToObjectNotation;
exports.isResponsiveObjectLike = isResponsiveObjectLike;
exports.isCustomBreakpoint = exports.breakpoints = void 0;
var _array = require("./array");
var _assertion = require("./assertion");
var _object = require("./object");
var breakpoints = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
]);
exports.breakpoints = breakpoints;
function mapResponsive(prop, mapper) {
    if (_assertion.isArray(prop)) return prop.map(function(item) {
        if (item === null) return null;
        return mapper(item);
    });
    if (_assertion.isObject(prop)) return _object.objectKeys(prop).reduce(function(result, key) {
        result[key] = mapper(prop[key]);
        return result;
    }, {
    });
    if (prop != null) return mapper(prop);
    return null;
}
function objectToArrayNotation(obj, bps) {
    if (bps === void 0) bps = breakpoints;
    var result = bps.map(function(br) {
        var _obj$br;
        return (_obj$br = obj[br]) != null ? _obj$br : null;
    });
    while(_array.getLastItem(result) === null)result.pop();
    return result;
}
function arrayToObjectNotation(values, bps) {
    if (bps === void 0) bps = breakpoints;
    var result = {
    };
    values.forEach(function(value, index) {
        var key = bps[index];
        if (value == null) return;
        result[key] = value;
    });
    return result;
}
function isResponsiveObjectLike(obj, bps) {
    if (bps === void 0) bps = breakpoints;
    var keys = Object.keys(obj);
    return keys.length > 0 && keys.every(function(key) {
        return bps.includes(key);
    });
}
/**
 * since breakpoints are defined as custom properties on an array, you may
 * `Object.keys(theme.breakpoints)` to retrieve both regular numeric indices
 * and custom breakpoints as string.
 *
 * This function returns true given a custom array property.
 */ var isCustomBreakpoint = function isCustomBreakpoint1(maybeBreakpoint) {
    return Number.isNaN(Number(maybeBreakpoint));
};
exports.isCustomBreakpoint = isCustomBreakpoint;

},{"./array":"6znhs","./assertion":"233Lb","./object":"20iPH"}],"1mf9h":[function(require,module,exports) {
"use strict";

},{}],"4OROY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.detectDeviceType = detectDeviceType;
exports.detectOS = detectOS;
exports.detectBrowser = detectBrowser;
exports.detectTouch = detectTouch;
var _dom = require("./dom");
function getUserAgentBrowser(navigator) {
    var ua = navigator.userAgent, vendor = navigator.vendor;
    var android = /(android)/i.test(ua);
    return null;
}
function getUserAgentOS(navigator) {
    var ua = navigator.userAgent, platform = navigator.platform;
    return null;
}
function detectDeviceType(navigator) {
    var ua = navigator.userAgent;
    if (/(tablet)|(iPad)|(Nexus 9)/i.test(ua)) return "tablet";
    if (/(mobi)/i.test(ua)) return "phone";
    return "desktop";
}
function detectOS(os) {
    if (!_dom.isBrowser) return false;
    return getUserAgentOS(window.navigator) === os;
}
function detectBrowser(browser) {
    if (!_dom.isBrowser) return false;
    return getUserAgentBrowser(window.navigator) === browser;
}
function detectTouch() {
    if (!_dom.isBrowser) return false;
    return window.ontouchstart === null && window.ontouchmove === null && window.ontouchend === null;
}

},{"./dom":"3cdHE"}],"3PVKV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.walkObject = walkObject;
var _utils = require("@chakra-ui/utils");
function walkObject(target, predicate) {
    function inner(value, path) {
        if (path === void 0) path = [];
        if (_utils.isArray(value)) return value.map(function(item, index) {
            return inner(item, [].concat(path, [
                String(index)
            ]));
        });
        if (_utils.isObject(value)) return Object.fromEntries(Object.entries(value).map(function(_ref) {
            var key = _ref[0], child = _ref[1];
            return [
                key,
                inner(child, [].concat(path, [
                    key
                ]))
            ];
        }));
        return predicate(value, path);
    }
    return inner(target);
}

},{"@chakra-ui/utils":"3364O"}],"5UBnZ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _refs = require("./refs");
Object.keys(_refs).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _refs[key]) return;
    exports[key] = _refs[key];
});
var _context = require("./context");
Object.keys(_context).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _context[key]) return;
    exports[key] = _context[key];
});
var _types = require("./types");
Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _types[key]) return;
    exports[key] = _types[key];
});
var _children = require("./children");
Object.keys(_children).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _children[key]) return;
    exports[key] = _children[key];
});

},{"./refs":"7rLzb","./context":"2FoGa","./types":"1CCZn","./children":"T1nzi"}],"7rLzb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.assignRef = assignRef;
exports.mergeRefs = mergeRefs;
var _utils = require("@chakra-ui/utils");
/**
 * Assigns a value to a ref function or object
 *
 * @param ref the ref to assign to
 * @param value the value
 */ function assignRef(ref, value) {
    if (ref == null) return;
    if (_utils.isFunction(ref)) {
        ref(value);
        return;
    }
    try {
        // @ts-ignore
        ref.current = value;
    } catch (error) {
        throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
    }
}
/**
 * Combine multiple React refs into a single ref function.
 * This is used mostly when you need to allow consumers forward refs to
 * internal components
 *
 * @param refs refs to assign to value to
 */ function mergeRefs() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++)refs[_key] = arguments[_key];
    return function(node) {
        refs.forEach(function(ref) {
            return assignRef(ref, node);
        });
    };
}

},{"@chakra-ui/utils":"3364O"}],"2FoGa":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createContext = createContext;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Creates a named context, provider, and hook.
 *
 * @param options create context options
 */ function createContext(options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$strict = _options.strict, strict = _options$strict === void 0 ? true : _options$strict, _options$errorMessage = _options.errorMessage, errorMessage = _options$errorMessage === void 0 ? "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider" : _options$errorMessage, name = _options.name;
    var Context = /*#__PURE__*/ React.createContext(undefined);
    Context.displayName = name;
    function useContext() {
        var context = React.useContext(Context);
        if (!context && strict) {
            var error = new Error(errorMessage);
            error.name = "ContextError";
            Error.captureStackTrace == null || Error.captureStackTrace(error, useContext);
            throw error;
        }
        return context;
    }
    return [
        Context.Provider,
        useContext,
        Context
    ];
}

},{"react":"3f97z"}],"1CCZn":[function(require,module,exports) {
"use strict";

},{}],"T1nzi":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getValidChildren = getValidChildren;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Gets only the valid children of a component,
 * and ignores any nullish or falsy child.
 *
 * @param children the children
 */ function getValidChildren(children) {
    return React.Children.toArray(children).filter(function(child) {
        return(/*#__PURE__*/ React.isValidElement(child));
    });
}

},{"react":"3f97z"}],"1ttyC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Portal = Portal;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _portalManager = require("./portal-manager");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    strict: false,
    name: "PortalContext"
}), PortalContextProvider = _createContext[0], usePortalContext = _createContext[1];
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = ".chakra-portal";
var Container = function Container1(props) {
    return(/*#__PURE__*/ React.createElement("div", {
        className: "chakra-portal-zIndex",
        style: {
            position: "absolute",
            zIndex: props.zIndex,
            top: 0,
            left: 0,
            right: 0
        }
    }, props.children));
};
/**
 * Portal that uses `document.body` as container
 */ var DefaultPortal = function DefaultPortal1(props) {
    var appendToParentPortal = props.appendToParentPortal, children = props.children;
    var tempNode = React.useRef(null);
    var portal = React.useRef(null);
    var forceUpdate = _hooks.useForceUpdate();
    var parentPortal = usePortalContext();
    var manager = _portalManager.usePortalManager();
    _hooks.useSafeLayoutEffect(function() {
        if (!tempNode.current) return;
        var doc = tempNode.current.ownerDocument;
        var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
        if (!host) return;
        portal.current = doc.createElement("div");
        portal.current.className = PORTAL_CLASSNAME;
        host.appendChild(portal.current);
        forceUpdate();
        var portalNode = portal.current;
        return function() {
            if (host.contains(portalNode)) host.removeChild(portalNode);
        };
    }, []);
    var _children = manager != null && manager.zIndex ? /*#__PURE__*/ React.createElement(Container, {
        zIndex: manager == null ? void 0 : manager.zIndex
    }, children) : children;
    return portal.current ? /*#__PURE__*/ _reactDom.createPortal(/*#__PURE__*/ React.createElement(PortalContextProvider, {
        value: portal.current
    }, _children), portal.current) : /*#__PURE__*/ React.createElement("span", {
        ref: tempNode
    });
};
/**
 * Portal that uses a custom container
 */ var ContainerPortal = function ContainerPortal1(props) {
    var children = props.children, containerRef = props.containerRef, appendToParentPortal = props.appendToParentPortal;
    var containerEl = containerRef.current;
    var host = containerEl != null ? containerEl : _utils.isBrowser ? document.body : undefined;
    var portal = React.useMemo(function() {
        var node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
        if (node) node.className = PORTAL_CLASSNAME;
        return node;
    }, [
        containerEl
    ]);
    var forceUpdate = _hooks.useForceUpdate();
    _hooks.useSafeLayoutEffect(function() {
        forceUpdate();
    }, []);
    _hooks.useSafeLayoutEffect(function() {
        if (!portal || !host) return;
        host.appendChild(portal);
        return function() {
            host.removeChild(portal);
        };
    }, [
        portal,
        host
    ]);
    if (host && portal) return(/*#__PURE__*/ _reactDom.createPortal(/*#__PURE__*/ React.createElement(PortalContextProvider, {
        value: appendToParentPortal ? portal : null
    }, children), portal));
    return null;
};
/**
 * Portal
 *
 * Declarative component used to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * @see Docs https://chakra-ui.com/docs/components/portal
 */ function Portal(props) {
    var containerRef = props.containerRef, rest = _objectWithoutPropertiesLoose(props, [
        "containerRef"
    ]);
    return containerRef ? /*#__PURE__*/ React.createElement(ContainerPortal, _extends({
        containerRef: containerRef
    }, rest)) : /*#__PURE__*/ React.createElement(DefaultPortal, rest);
}
Portal.defaultProps = {
    appendToParentPortal: true
};
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
if (_utils.__DEV__) Portal.displayName = "Portal";

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","react-dom":"PWMei","./portal-manager":"7h7y6"}],"ak6Dj":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _useBoolean = require("./use-boolean");
Object.keys(_useBoolean).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useBoolean[key]) return;
    exports[key] = _useBoolean[key];
});
var _useCallbackRef = require("./use-callback-ref");
Object.keys(_useCallbackRef).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useCallbackRef[key]) return;
    exports[key] = _useCallbackRef[key];
});
var _useClipboard = require("./use-clipboard");
Object.keys(_useClipboard).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useClipboard[key]) return;
    exports[key] = _useClipboard[key];
});
var _useConst = require("./use-const");
Object.keys(_useConst).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useConst[key]) return;
    exports[key] = _useConst[key];
});
var _useControllable = require("./use-controllable");
Object.keys(_useControllable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useControllable[key]) return;
    exports[key] = _useControllable[key];
});
var _useDimensions = require("./use-dimensions");
Object.keys(_useDimensions).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useDimensions[key]) return;
    exports[key] = _useDimensions[key];
});
var _useDisclosure = require("./use-disclosure");
Object.keys(_useDisclosure).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useDisclosure[key]) return;
    exports[key] = _useDisclosure[key];
});
var _useEventCallback = require("./use-event-callback");
Object.keys(_useEventCallback).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useEventCallback[key]) return;
    exports[key] = _useEventCallback[key];
});
var _useEventListener = require("./use-event-listener");
Object.keys(_useEventListener).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useEventListener[key]) return;
    exports[key] = _useEventListener[key];
});
var _useEventListenerMap = require("./use-event-listener-map");
Object.keys(_useEventListenerMap).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useEventListenerMap[key]) return;
    exports[key] = _useEventListenerMap[key];
});
var _useFocusEffect = require("./use-focus-effect");
Object.keys(_useFocusEffect).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useFocusEffect[key]) return;
    exports[key] = _useFocusEffect[key];
});
var _useFocusOnHide = require("./use-focus-on-hide");
Object.keys(_useFocusOnHide).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useFocusOnHide[key]) return;
    exports[key] = _useFocusOnHide[key];
});
var _useFocusOnPointerdown = require("./use-focus-on-pointerdown");
Object.keys(_useFocusOnPointerdown).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useFocusOnPointerdown[key]) return;
    exports[key] = _useFocusOnPointerdown[key];
});
var _useFocusOnShow = require("./use-focus-on-show");
Object.keys(_useFocusOnShow).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useFocusOnShow[key]) return;
    exports[key] = _useFocusOnShow[key];
});
var _useForceUpdate = require("./use-force-update");
Object.keys(_useForceUpdate).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useForceUpdate[key]) return;
    exports[key] = _useForceUpdate[key];
});
var _useId = require("./use-id");
Object.keys(_useId).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useId[key]) return;
    exports[key] = _useId[key];
});
var _useInterval = require("./use-interval");
Object.keys(_useInterval).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useInterval[key]) return;
    exports[key] = _useInterval[key];
});
var _useLatestRef = require("./use-latest-ref");
Object.keys(_useLatestRef).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useLatestRef[key]) return;
    exports[key] = _useLatestRef[key];
});
var _useMergeRefs = require("./use-merge-refs");
Object.keys(_useMergeRefs).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useMergeRefs[key]) return;
    exports[key] = _useMergeRefs[key];
});
var _useMouseDownRef = require("./use-mouse-down-ref");
Object.keys(_useMouseDownRef).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useMouseDownRef[key]) return;
    exports[key] = _useMouseDownRef[key];
});
var _useOutsideClick = require("./use-outside-click");
Object.keys(_useOutsideClick).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useOutsideClick[key]) return;
    exports[key] = _useOutsideClick[key];
});
var _usePanGesture = require("./use-pan-gesture");
Object.keys(_usePanGesture).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _usePanGesture[key]) return;
    exports[key] = _usePanGesture[key];
});
var _usePointerEvent = require("./use-pointer-event");
Object.keys(_usePointerEvent).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _usePointerEvent[key]) return;
    exports[key] = _usePointerEvent[key];
});
var _usePrevious = require("./use-previous");
Object.keys(_usePrevious).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _usePrevious[key]) return;
    exports[key] = _usePrevious[key];
});
var _useSafeLayoutEffect = require("./use-safe-layout-effect");
Object.keys(_useSafeLayoutEffect).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useSafeLayoutEffect[key]) return;
    exports[key] = _useSafeLayoutEffect[key];
});
var _useShortcut = require("./use-shortcut");
Object.keys(_useShortcut).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useShortcut[key]) return;
    exports[key] = _useShortcut[key];
});
var _useTimeout = require("./use-timeout");
Object.keys(_useTimeout).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useTimeout[key]) return;
    exports[key] = _useTimeout[key];
});
var _useUnmountEffect = require("./use-unmount-effect");
Object.keys(_useUnmountEffect).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useUnmountEffect[key]) return;
    exports[key] = _useUnmountEffect[key];
});
var _useUpdateEffect = require("./use-update-effect");
Object.keys(_useUpdateEffect).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useUpdateEffect[key]) return;
    exports[key] = _useUpdateEffect[key];
});
var _useWhyUpdate = require("./use-why-update");
Object.keys(_useWhyUpdate).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useWhyUpdate[key]) return;
    exports[key] = _useWhyUpdate[key];
});

},{"./use-boolean":"1NPNm","./use-callback-ref":"2yahV","./use-clipboard":"6CMN9","./use-const":"6BATl","./use-controllable":"1eJZs","./use-dimensions":"Ue7VK","./use-disclosure":"427p2","./use-event-callback":"7FXLP","./use-event-listener":"KtA2m","./use-event-listener-map":"1ff0p","./use-focus-effect":"1PZFA","./use-focus-on-hide":"6Lp2S","./use-focus-on-pointerdown":"4CBXI","./use-focus-on-show":"GTm9G","./use-force-update":"2LjuW","./use-id":"3DjQP","./use-interval":"3DfZ0","./use-latest-ref":"UMip5","./use-merge-refs":"5vb1V","./use-mouse-down-ref":"2fCNt","./use-outside-click":"1mcPB","./use-pan-gesture":"628QZ","./use-pointer-event":"3pzeB","./use-previous":"1DFtv","./use-safe-layout-effect":"7IExE","./use-shortcut":"4jZfi","./use-timeout":"4PAf6","./use-unmount-effect":"59nMC","./use-update-effect":"1I4zU","./use-why-update":"aWENp"}],"1NPNm":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useBoolean = useBoolean;
var _react = require("react");
/**
 * React hook to manage boolean (on - off) states
 *
 * @param initialState the initial boolean state value
 */ function useBoolean(initialState) {
    if (initialState === void 0) initialState = false;
    var _useState = _react.useState(initialState), value = _useState[0], setValue = _useState[1];
    var on = _react.useCallback(function() {
        setValue(true);
    }, []);
    var off = _react.useCallback(function() {
        setValue(false);
    }, []);
    var toggle = _react.useCallback(function() {
        setValue(function(prev) {
            return !prev;
        });
    }, []);
    return [
        value,
        {
            on: on,
            off: off,
            toggle: toggle
        }
    ];
}

},{"react":"3f97z"}],"2yahV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useCallbackRef = useCallbackRef;
var React = _interopRequireWildcard(require("react"));
var _useSafeLayoutEffect = require("./use-safe-layout-effect");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React hook to persist any value between renders,
 * but keeps it up-to-date if it changes.
 *
 * @param value the value or function to persist
 */ function useCallbackRef(fn, deps) {
    if (deps === void 0) deps = [];
    var ref = React.useRef(fn);
    _useSafeLayoutEffect.useSafeLayoutEffect(function() {
        ref.current = fn;
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
    return React.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return ref.current == null ? void 0 : ref.current.apply(ref, args);
    }, deps);
}

},{"react":"3f97z","./use-safe-layout-effect":"7IExE"}],"7IExE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useSafeLayoutEffect = void 0;
var React = _interopRequireWildcard(require("react"));
var _utils = require("@chakra-ui/utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * useSafeLayoutEffect enables us to safely call `useLayoutEffect` on the browser
 * (for SSR reasons)
 *
 * React currently throws a warning when using useLayoutEffect on the server.
 * To get around it, we can conditionally useEffect on the server (no-op) and
 * useLayoutEffect in the browser.
 *
 * @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 */ var useSafeLayoutEffect = _utils.isBrowser ? React.useLayoutEffect : React.useEffect;
exports.useSafeLayoutEffect = useSafeLayoutEffect;

},{"react":"3f97z","@chakra-ui/utils":"3364O"}],"6CMN9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useClipboard = useClipboard;
var _react = require("react");
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook to copy content to clipboard
 *
 * @param text the text or value to copy
 * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.
 * @param {Object} optionsOrTimeout
 * @param {string} optionsOrTimeout.format - set the desired MIME type
 * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.
 */ function useClipboard(text, optionsOrTimeout) {
    if (optionsOrTimeout === void 0) optionsOrTimeout = {
    };
    var _useState = _react.useState(false), hasCopied = _useState[0], setHasCopied = _useState[1];
    var _ref = typeof optionsOrTimeout === "number" ? {
        timeout: optionsOrTimeout
    } : optionsOrTimeout, _ref$timeout = _ref.timeout, timeout = _ref$timeout === void 0 ? 1500 : _ref$timeout, copyOptions = _objectWithoutPropertiesLoose(_ref, [
        "timeout"
    ]);
    var onCopy = _react.useCallback(function() {
        var didCopy = _copyToClipboard["default"](text, copyOptions);
        setHasCopied(didCopy);
    }, [
        text,
        copyOptions
    ]);
    _react.useEffect(function() {
        var timeoutId = null;
        if (hasCopied) timeoutId = window.setTimeout(function() {
            setHasCopied(false);
        }, timeout);
        return function() {
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [
        timeout,
        hasCopied
    ]);
    return {
        value: text,
        onCopy: onCopy,
        hasCopied: hasCopied
    };
}

},{"react":"3f97z","copy-to-clipboard":"19NML"}],"19NML":[function(require,module,exports) {
"use strict";
var deselectCurrent = require("toggle-selection");
var clipboardToIE11Formatting = {
    "text/plain": "Text",
    "text/html": "Url",
    "default": "Text"
};
var defaultMessage = "Copy to clipboard: #{key}, Enter";
function format(message) {
    var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
    return message.replace(/#{\s*key\s*}/g, copyKey);
}
function copy(text, options) {
    var debug, message, reselectPrevious, range, selection, mark, success = false;
    if (!options) options = {
    };
    debug = options.debug || false;
    try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        // reset user styles for span element
        mark.style.all = "unset";
        // prevents scrolling to the end of the page
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        // used to preserve spaces and line breaks
        mark.style.whiteSpace = "pre";
        // do not inherit user-select (it may be `none`)
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
            e.stopPropagation();
            if (options.format) {
                e.preventDefault();
                if (typeof e.clipboardData === "undefined") {
                    debug && console.warn("unable to use e.clipboardData");
                    debug && console.warn("trying IE specific stuff");
                    window.clipboardData.clearData();
                    var format1 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
                    window.clipboardData.setData(format1, text);
                } else {
                    e.clipboardData.clearData();
                    e.clipboardData.setData(options.format, text);
                }
            }
            if (options.onCopy) {
                e.preventDefault();
                options.onCopy(e.clipboardData);
            }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) throw new Error("copy command was unsuccessful");
        success = true;
    } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
            window.clipboardData.setData(options.format || "text", text);
            options.onCopy && options.onCopy(window.clipboardData);
            success = true;
        } catch (err1) {
            debug && console.error("unable to copy using clipboardData: ", err1);
            debug && console.error("falling back to prompt");
            message = format("message" in options ? options.message : defaultMessage);
            window.prompt(message, text);
        }
    } finally{
        if (selection) {
            if (typeof selection.removeRange == "function") selection.removeRange(range);
            else selection.removeAllRanges();
        }
        if (mark) document.body.removeChild(mark);
        reselectPrevious();
    }
    return success;
}
module.exports = copy;

},{"toggle-selection":"784yM"}],"784yM":[function(require,module,exports) {
module.exports = function() {
    var selection = document.getSelection();
    if (!selection.rangeCount) return function() {
    };
    var active = document.activeElement;
    var ranges = [];
    for(var i = 0; i < selection.rangeCount; i++)ranges.push(selection.getRangeAt(i));
    switch(active.tagName.toUpperCase()){
        case 'INPUT':
        case 'TEXTAREA':
            active.blur();
            break;
        default:
            active = null;
            break;
    }
    selection.removeAllRanges();
    return function() {
        selection.type === 'Caret' && selection.removeAllRanges();
        if (!selection.rangeCount) ranges.forEach(function(range) {
            selection.addRange(range);
        });
        active && active.focus();
    };
};

},{}],"6BATl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useConst = useConst;
var _react = require("react");
/**
 * Creates a constant value over the lifecycle of a component.
 *
 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
 * you can ensure that initialisers don't execute twice or more.
 */ function useConst(init) {
    var ref = _react.useRef(null);
    if (ref.current === null) ref.current = typeof init === "function" ? init() : init;
    return ref.current;
}

},{"react":"3f97z"}],"1eJZs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useControllableProp = useControllableProp;
exports.useControllableState = useControllableState;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useCallbackRef = require("./use-callback-ref");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function useControllableProp(prop, state) {
    var isControlled = prop !== undefined;
    var value = isControlled && typeof prop !== "undefined" ? prop : state;
    return [
        isControlled,
        value
    ];
}
/**
 * React hook for using controlling component state.
 * @param props
 */ function useControllableState(props) {
    var valueProp = props.value, defaultValue = props.defaultValue, onChange = props.onChange, _props$shouldUpdate = props.shouldUpdate, shouldUpdate = _props$shouldUpdate === void 0 ? function(prev, next) {
        return prev !== next;
    } : _props$shouldUpdate;
    var onChangeProp = _useCallbackRef.useCallbackRef(onChange);
    var shouldUpdateProp = _useCallbackRef.useCallbackRef(shouldUpdate);
    var _React$useState = React.useState(defaultValue), valueState = _React$useState[0], setValue = _React$useState[1];
    var isControlled = valueProp !== undefined;
    var value = isControlled ? valueProp : valueState;
    var updateValue = React.useCallback(function(next) {
        var nextValue = _utils.runIfFn(next, value);
        if (!shouldUpdateProp(value, nextValue)) return;
        if (!isControlled) setValue(nextValue);
        onChangeProp(nextValue);
    }, [
        isControlled,
        onChangeProp,
        value,
        shouldUpdateProp
    ]);
    return [
        value,
        updateValue
    ];
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-callback-ref":"2yahV"}],"Ue7VK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useDimensions = useDimensions;
var React = _interopRequireWildcard(require("react"));
var _utils = require("@chakra-ui/utils");
var _useSafeLayoutEffect = require("./use-safe-layout-effect");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Reack hook to measure a component's dimensions
 *
 * @param ref ref of the component to measure
 * @param observe if `true`, resize and scroll observers will be turned on
 */ function useDimensions(ref, observe) {
    var _React$useState = React.useState(null), dimensions = _React$useState[0], setDimensions = _React$useState[1];
    var rafId = React.useRef();
    _useSafeLayoutEffect.useSafeLayoutEffect(function() {
        if (!ref.current) return undefined;
        var node = ref.current;
        function measure() {
            rafId.current = requestAnimationFrame(function() {
                var boxModel = _utils.getBox(node);
                setDimensions(boxModel);
            });
        }
        measure();
        if (observe) {
            window.addEventListener("resize", measure);
            window.addEventListener("scroll", measure);
        }
        return function() {
            if (observe) {
                window.removeEventListener("resize", measure);
                window.removeEventListener("scroll", measure);
            }
            if (rafId.current) cancelAnimationFrame(rafId.current);
        };
    }, [
        observe
    ]);
    return dimensions;
}

},{"react":"3f97z","@chakra-ui/utils":"3364O","./use-safe-layout-effect":"7IExE"}],"427p2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useDisclosure = useDisclosure;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useControllable = require("./use-controllable");
var _useId = require("./use-id");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useDisclosure(props) {
    if (props === void 0) props = {
    };
    var _props = props, onCloseProp = _props.onClose, onOpenProp = _props.onOpen, isOpenProp = _props.isOpen, idProp = _props.id;
    var _React$useState = React.useState(props.defaultIsOpen || false), isOpenState = _React$useState[0], setIsOpen = _React$useState[1];
    var _useControllableProp = _useControllable.useControllableProp(isOpenProp, isOpenState), isControlled = _useControllableProp[0], isOpen = _useControllableProp[1];
    var id = _useId.useId(idProp, "disclosure");
    var onClose = React.useCallback(function() {
        if (!isControlled) setIsOpen(false);
        onCloseProp == null || onCloseProp();
    }, [
        isControlled,
        onCloseProp
    ]);
    var onOpen = React.useCallback(function() {
        if (!isControlled) setIsOpen(true);
        onOpenProp == null || onOpenProp();
    }, [
        isControlled,
        onOpenProp
    ]);
    var onToggle = React.useCallback(function() {
        var action = isOpen ? onClose : onOpen;
        action();
    }, [
        isOpen,
        onOpen,
        onClose
    ]);
    return {
        isOpen: !!isOpen,
        onOpen: onOpen,
        onClose: onClose,
        onToggle: onToggle,
        isControlled: isControlled,
        getButtonProps: function getButtonProps(props1) {
            if (props1 === void 0) props1 = {
            };
            return _extends({
            }, props1, {
                "aria-expanded": "true",
                "aria-controls": id,
                onClick: _utils.callAllHandlers(props1.onClick, onToggle)
            });
        },
        getDisclosureProps: function getDisclosureProps(props1) {
            if (props1 === void 0) props1 = {
            };
            return _extends({
            }, props1, {
                hidden: !isOpen,
                id: id
            });
        }
    };
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-controllable":"1eJZs","./use-id":"3DjQP"}],"3DjQP":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useId = useId;
exports.useIds = useIds;
var React = _interopRequireWildcard(require("react"));
var _useSafeLayoutEffect = require("./use-safe-layout-effect");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Credit: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx
 */ var handoffComplete = false;
var id = 0;
var genId = function genId1() {
    return ++id;
};
/**
 * Reack hook to generate unique id
 *
 * @param idProp the external id passed from the user
 * @param prefix prefix to append before the id
 */ function useId(idProp, prefix) {
    var initialId = idProp || (handoffComplete ? genId() : null);
    var _React$useState = React.useState(initialId), uid = _React$useState[0], setUid = _React$useState[1];
    _useSafeLayoutEffect.useSafeLayoutEffect(function() {
        if (uid === null) setUid(genId());
    }, []);
    React.useEffect(function() {
        if (handoffComplete === false) handoffComplete = true;
    }, []);
    var id1 = uid != null ? uid.toString() : undefined;
    return prefix ? prefix + "-" + id1 : id1;
}
/**
 * Reack hook to generate ids for use in compound components
 *
 * @param idProp the external id passed from the user
 * @param prefixes array of prefixes to use
 *
 * @example
 *
 * ```js
 * const [buttonId, menuId] = useIds("52", "button", "menu")
 *
 * // buttonId will be `button-52`
 * // menuId will be `menu-52`
 * ```
 */ function useIds(idProp) {
    var id1 = useId(idProp);
    for(var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)prefixes[_key - 1] = arguments[_key];
    return prefixes.map(function(prefix) {
        return prefix + "-" + id1;
    });
}

},{"react":"3f97z","./use-safe-layout-effect":"7IExE"}],"7FXLP":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEventCallback = useEventCallback;
var React = _interopRequireWildcard(require("react"));
var _useSafeLayoutEffect = require("./use-safe-layout-effect");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React hook for performant `useCallbacks`
 *
 * @see https://github.com/facebook/react/issues/14099#issuecomment-440013892
 *
 * @deprecated Use `useCallbackRef` instead. `useEventCallback` will be removed
 * in a future version.
 */ function useEventCallback(callback) {
    var ref = React.useRef(callback);
    _useSafeLayoutEffect.useSafeLayoutEffect(function() {
        ref.current = callback;
    });
    return React.useCallback(function(event) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return ref.current.apply(ref, [
            event
        ].concat(args));
    }, []);
}

},{"react":"3f97z","./use-safe-layout-effect":"7IExE"}],"KtA2m":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEventListener = useEventListener;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useCallbackRef = require("./use-callback-ref");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React hook to manage browser event listeners
 *
 * @param event the event name
 * @param handler the event handler function to execute
 * @param doc the dom environment to execute against (defaults to `document`)
 * @param options the event listener options
 *
 * @internal
 */ function useEventListener(event, handler, env, options) {
    var listener = _useCallbackRef.useCallbackRef(handler);
    React.useEffect(function() {
        var _runIfFn;
        var node = (_runIfFn = _utils.runIfFn(env)) != null ? _runIfFn : document;
        node.addEventListener(event, listener, options);
        return function() {
            node.removeEventListener(event, listener, options);
        };
    }, [
        event,
        env,
        options,
        listener
    ]);
    return function() {
        var _runIfFn2;
        var node = (_runIfFn2 = _utils.runIfFn(env)) != null ? _runIfFn2 : document;
        node.removeEventListener(event, listener, options);
    };
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-callback-ref":"2yahV"}],"1ff0p":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEventListenerMap = useEventListenerMap;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function useEventListenerMap() {
    var listeners = React.useRef(new Map());
    var currentListeners = listeners.current;
    var add = React.useCallback(function(el, type, listener, options) {
        var pointerEventListener = _utils.wrapPointerEventHandler(listener, type === "pointerdown");
        listeners.current.set(listener, {
            __listener: pointerEventListener,
            type: _utils.getPointerEventName(type),
            el: el,
            options: options
        });
        el.addEventListener(type, pointerEventListener, options);
    }, []);
    var remove = React.useCallback(function(el, type, listener, options) {
        var _listeners$current$ge = listeners.current.get(listener), pointerEventListener = _listeners$current$ge.__listener;
        el.removeEventListener(type, pointerEventListener, options);
        listeners.current["delete"](pointerEventListener);
    }, []);
    React.useEffect(function() {
        return function() {
            currentListeners.forEach(function(value, key) {
                remove(value.el, value.type, key, value.options);
            });
        };
    }, [
        remove,
        currentListeners
    ]);
    return {
        add: add,
        remove: remove
    };
}

},{"@chakra-ui/utils":"3364O","react":"3f97z"}],"1PZFA":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useFocusEffect = useFocusEffect;
var _utils = require("@chakra-ui/utils");
var _useUpdateEffect = require("./use-update-effect");
/**
 * React hook to focus an element conditionally
 *
 * @param ref the ref of the element to focus
 * @param options focus management options
 */ function useFocusEffect(ref, options) {
    var shouldFocus = options.shouldFocus, preventScroll = options.preventScroll;
    _useUpdateEffect.useUpdateEffect(function() {
        var node = ref.current;
        if (!node || !shouldFocus) return;
        if (!_utils.hasFocusWithin(node)) _utils.focus(node, {
            preventScroll: preventScroll,
            nextTick: true
        });
    }, [
        shouldFocus,
        ref,
        preventScroll
    ]);
}

},{"@chakra-ui/utils":"3364O","./use-update-effect":"1I4zU"}],"1I4zU":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useUpdateEffect = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React effect hook that invokes only on update.
 * It doesn't invoke on mount
 */ var useUpdateEffect = function useUpdateEffect1(effect, deps) {
    var mounted = React.useRef(false);
    React.useEffect(function() {
        if (mounted.current) return effect();
        mounted.current = true;
        return undefined; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
    return mounted.current;
};
exports.useUpdateEffect = useUpdateEffect;

},{"react":"3f97z"}],"6Lp2S":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useFocusOnHide = useFocusOnHide;
var _utils = require("@chakra-ui/utils");
var _useUpdateEffect = require("./use-update-effect");
function preventReturnFocus(containerRef) {
    var el = containerRef.current;
    if (!el) return false;
    var activeElement = _utils.getActiveElement(el);
    if (!activeElement) return false;
    if (_utils.contains(el, activeElement)) return false;
    if (_utils.isTabbable(activeElement)) return true;
    return false;
}
/**
 * Popover hook to manage the focus when the popover closes or hides.
 *
 * We either want to return focus back to the popover trigger or
 * let focus proceed normally if user moved to another interactive
 * element in the viewport.
 */ function useFocusOnHide(containerRef, options) {
    var shouldFocusProp = options.shouldFocus, visible = options.visible, focusRef = options.focusRef;
    var shouldFocus = shouldFocusProp && !visible;
    _useUpdateEffect.useUpdateEffect(function() {
        if (!shouldFocus) return;
        if (preventReturnFocus(containerRef)) return;
        var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
        if (el) _utils.focus(el, {
            nextTick: true
        });
    }, [
        shouldFocus,
        containerRef,
        focusRef
    ]);
}

},{"@chakra-ui/utils":"3364O","./use-update-effect":"1I4zU"}],"4CBXI":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useFocusOnPointerDown = useFocusOnPointerDown;
var _utils = require("@chakra-ui/utils");
var _usePointerEvent = require("./use-pointer-event");
/**
 * Polyfill to get `relatedTarget` working correctly consistently
 * across all browsers.
 *
 * It ensures that elements receives focus on pointer down if
 * it's not the active active element.
 *
 * @internal
 */ function useFocusOnPointerDown(props) {
    var ref = props.ref, elements = props.elements, enabled = props.enabled;
    var isSafari = _utils.detectBrowser("Safari");
    var doc = function doc1() {
        return _utils.getOwnerDocument(ref.current);
    };
    _usePointerEvent.usePointerEvent(doc, "pointerdown", function(event) {
        if (!isSafari || !enabled) return;
        var target = event.target;
        var els = elements != null ? elements : [
            ref
        ];
        var isValidTarget = els.some(function(elementOrRef) {
            var el = _utils.isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;
            return _utils.contains(el, target);
        });
        if (!_utils.isActiveElement(target) && isValidTarget) {
            event.preventDefault();
            _utils.focus(target);
        }
    });
}

},{"@chakra-ui/utils":"3364O","./use-pointer-event":"3pzeB"}],"3pzeB":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePointerEvent = usePointerEvent;
var _utils = require("@chakra-ui/utils");
var _useEventListener = require("./use-event-listener");
/**
 * Credit goes to `framer-motion` of this useful utilities.
 * License can be found here: https://github.com/framer/motion
 */ /**
 * @internal
 */ function usePointerEvent(env, eventName, handler, options) {
    return _useEventListener.useEventListener(_utils.getPointerEventName(eventName), _utils.wrapPointerEventHandler(handler, eventName === "pointerdown"), env, options);
}

},{"@chakra-ui/utils":"3364O","./use-event-listener":"KtA2m"}],"GTm9G":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useFocusOnShow = useFocusOnShow;
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _useEventListener = require("./use-event-listener");
var _useUpdateEffect = require("./use-update-effect");
var defaultOptions = {
    preventScroll: true,
    shouldFocus: false
};
function useFocusOnShow(target, options) {
    if (options === void 0) options = defaultOptions;
    var _options = options, focusRef = _options.focusRef, preventScroll = _options.preventScroll, shouldFocus = _options.shouldFocus, visible = _options.visible;
    var element = _utils.isRefObject(target) ? target.current : target;
    var autoFocus = shouldFocus && visible;
    var onFocus = _react.useCallback(function() {
        if (!element || !autoFocus) return;
        if (_utils.contains(element, document.activeElement)) return;
        if (focusRef != null && focusRef.current) _utils.focus(focusRef.current, {
            preventScroll: preventScroll,
            nextTick: true
        });
        else {
            var tabbableEls = _utils.getAllFocusable(element);
            if (tabbableEls.length > 0) _utils.focus(tabbableEls[0], {
                preventScroll: preventScroll,
                nextTick: true
            });
        }
    }, [
        autoFocus,
        preventScroll,
        element,
        focusRef
    ]);
    _useUpdateEffect.useUpdateEffect(function() {
        onFocus();
    }, [
        onFocus
    ]);
    _useEventListener.useEventListener("transitionend", onFocus, element);
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-event-listener":"KtA2m","./use-update-effect":"1I4zU"}],"2LjuW":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useForceUpdate = useForceUpdate;
var React = _interopRequireWildcard(require("react"));
var _useUnmountEffect = require("./use-unmount-effect");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function useForceUpdate() {
    var unloadingRef = React.useRef(false);
    var _React$useState = React.useState(0), count = _React$useState[0], setCount = _React$useState[1];
    _useUnmountEffect.useUnmountEffect(function() {
        unloadingRef.current = true;
    });
    return React.useCallback(function() {
        if (!unloadingRef.current) setCount(count + 1);
    }, [
        count
    ]);
}

},{"react":"3f97z","./use-unmount-effect":"59nMC"}],"59nMC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useUnmountEffect = useUnmountEffect;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function useUnmountEffect(fn, deps) {
    if (deps === void 0) deps = [];
    return React.useEffect(function() {
        return function() {
            return fn();
        };
    }, deps);
}

},{"react":"3f97z"}],"3DfZ0":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useInterval = useInterval;
var React = _interopRequireWildcard(require("react"));
var _useCallbackRef = require("./use-callback-ref");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React Hook that provides a declarative `setInterval`
 *
 * @param callback the callback to execute at interval
 * @param delay the `setInterval` delay (in ms)
 */ function useInterval(callback, delay) {
    var fn = _useCallbackRef.useCallbackRef(callback);
    React.useEffect(function() {
        var intervalId = null;
        var tick = function tick1() {
            return fn();
        };
        if (delay !== null) intervalId = window.setInterval(tick, delay);
        return function() {
            if (intervalId) window.clearInterval(intervalId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"react":"3f97z","./use-callback-ref":"2yahV"}],"UMip5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useLatestRef = useLatestRef;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React hook to persist any value between renders,
 * but keeps it up-to-date if it changes.
 *
 * @param value the value or function to persist
 */ function useLatestRef(value) {
    var ref = React.useRef(null);
    ref.current = value;
    return ref;
}

},{"react":"3f97z"}],"5vb1V":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.assignRef = assignRef;
exports.useMergeRefs = useMergeRefs;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/* eslint-disable react-hooks/exhaustive-deps */ function assignRef(ref, value) {
    if (ref == null) return;
    if (typeof ref === "function") {
        ref(value);
        return;
    }
    try {
        // @ts-ignore
        ref.current = value;
    } catch (error) {
        throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
    }
}
/**
 * React hook that merges react refs into a single memoized function
 *
 * @example
 * import React from "react";
 * import { useMergeRefs } from `@chakra-ui/hooks`;
 *
 * const Component = React.forwardRef((props, ref) => {
 *   const internalRef = React.useRef();
 *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;
 * });
 */ function useMergeRefs() {
    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++)refs[_key] = arguments[_key];
    return React.useMemo(function() {
        if (refs.every(function(ref) {
            return ref == null;
        })) return null;
        return function(node) {
            refs.forEach(function(ref) {
                if (ref) assignRef(ref, node);
            });
        };
    }, refs);
}

},{"react":"3f97z"}],"2fCNt":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useMouseDownRef = useMouseDownRef;
var _react = _interopRequireDefault(require("react"));
var _useEventListener = require("./use-event-listener");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
/**
 * @deprecated `useMouseDownRef` will be removed in a future version.
 */ function useMouseDownRef(shouldListen) {
    if (shouldListen === void 0) shouldListen = true;
    var mouseDownRef = _react["default"].useRef();
    _useEventListener.useEventListener("mousedown", function(event) {
        if (shouldListen) mouseDownRef.current = event.target;
    });
    return mouseDownRef;
}

},{"react":"3f97z","./use-event-listener":"KtA2m"}],"1mcPB":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useOutsideClick = useOutsideClick;
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _useCallbackRef = require("./use-callback-ref");
/**
 * Example, used in components like Dialogs and Popovers so they can close
 * when a user clicks outside them.
 */ function useOutsideClick(props) {
    var ref = props.ref, handler = props.handler;
    var savedHandler = _useCallbackRef.useCallbackRef(handler);
    var stateRef = _react.useRef({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false
    });
    var state = stateRef.current;
    _react.useEffect(function() {
        var onPointerDown = function onPointerDown1(e) {
            if (isValidEvent(e, ref)) state.isPointerDown = true;
        };
        var onMouseUp = function onMouseUp1(event) {
            if (state.ignoreEmulatedMouseEvents) {
                state.ignoreEmulatedMouseEvents = false;
                return;
            }
            if (state.isPointerDown && handler && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        var onTouchEnd = function onTouchEnd1(event) {
            state.ignoreEmulatedMouseEvents = true;
            if (handler && state.isPointerDown && isValidEvent(event, ref)) {
                state.isPointerDown = false;
                savedHandler(event);
            }
        };
        var doc = _utils.getOwnerDocument(ref.current);
        doc.addEventListener("mousedown", onPointerDown, true);
        doc.addEventListener("mouseup", onMouseUp, true);
        doc.addEventListener("touchstart", onPointerDown, true);
        doc.addEventListener("touchend", onTouchEnd, true);
        return function() {
            doc.removeEventListener("mousedown", onPointerDown, true);
            doc.removeEventListener("mouseup", onMouseUp, true);
            doc.removeEventListener("touchstart", onPointerDown, true);
            doc.removeEventListener("touchend", onTouchEnd, true);
        };
    }, [
        handler,
        ref,
        savedHandler,
        state
    ]);
}
function isValidEvent(event, ref) {
    var _ref$current;
    var target = event.target;
    if (event.button > 0) return false; // if the event target is no longer in the document
    if (target) {
        var doc = _utils.getOwnerDocument(target);
        if (!doc.body.contains(target)) return false;
    }
    return !((_ref$current = ref.current) != null && _ref$current.contains(target));
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-callback-ref":"2yahV"}],"628QZ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePanGesture = usePanGesture;
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _usePointerEvent = require("./use-pointer-event");
var _useUnmountEffect = require("./use-unmount-effect");
function usePanGesture(ref, props) {
    var onPan = props.onPan, onPanStart = props.onPanStart, onPanEnd = props.onPanEnd, onPanSessionStart = props.onPanSessionStart, onPanSessionEnd = props.onPanSessionEnd;
    var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);
    var panSession = _react.useRef(null);
    var handlers = {
        onSessionStart: onPanSessionStart,
        onSessionEnd: onPanSessionEnd,
        onStart: onPanStart,
        onMove: onPan,
        onEnd: function onEnd(event, info) {
            panSession.current = null;
            onPanEnd == null || onPanEnd(event, info);
        }
    };
    _react.useEffect(function() {
        var _panSession$current;
        (_panSession$current = panSession.current) == null || _panSession$current.updateHandlers(handlers);
    });
    function onPointerDown(event) {
        panSession.current = new _utils.PanSession(event, handlers);
    }
    _usePointerEvent.usePointerEvent(function() {
        return ref.current;
    }, "pointerdown", hasPanEvents ? onPointerDown : _utils.noop);
    _useUnmountEffect.useUnmountEffect(function() {
        var _panSession$current2;
        (_panSession$current2 = panSession.current) == null || _panSession$current2.end();
        panSession.current = null;
    });
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./use-pointer-event":"3pzeB","./use-unmount-effect":"59nMC"}],"1DFtv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePrevious = usePrevious;
var _react = require("react");
function usePrevious(value) {
    var ref = _react.useRef();
    _react.useEffect(function() {
        ref.current = value;
    }, [
        value
    ]);
    return ref.current;
}

},{"react":"3f97z"}],"4jZfi":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useShortcut = useShortcut;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Checks if the key pressed is a printable character
 * and can be used for shortcut navigation
 */ function isPrintableCharacter(event) {
    var key = event.key;
    return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
/**
 * React hook that provides an enhanced keydown handler,
 * that's used for key navigation within menus, select dropdowns.
 */ function useShortcut(props) {
    if (props === void 0) props = {
    };
    var _props = props, _props$timeout = _props.timeout, timeout = _props$timeout === void 0 ? 300 : _props$timeout, _props$preventDefault = _props.preventDefault, preventDefault = _props$preventDefault === void 0 ? function() {
        return true;
    } : _props$preventDefault;
    var _React$useState = React.useState([]), keys = _React$useState[0], setKeys = _React$useState[1];
    var timeoutRef = React.useRef();
    var flush = function flush1() {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
    };
    var clearKeysAfterDelay = function clearKeysAfterDelay1() {
        flush();
        timeoutRef.current = setTimeout(function() {
            setKeys([]);
            timeoutRef.current = null;
        }, timeout);
    };
    React.useEffect(function() {
        return flush;
    }, []);
    function onKeyDown(fn) {
        return function(event) {
            if (event.key === "Backspace") {
                var keysCopy = [].concat(keys);
                keysCopy.pop();
                setKeys(keysCopy);
                return;
            }
            if (isPrintableCharacter(event)) {
                var _keysCopy = keys.concat(event.key);
                if (preventDefault(event)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                setKeys(_keysCopy);
                fn(_keysCopy.join(""));
                clearKeysAfterDelay();
            }
        };
    }
    return onKeyDown;
}

},{"react":"3f97z"}],"4PAf6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useTimeout = useTimeout;
var React = _interopRequireWildcard(require("react"));
var _useCallbackRef = require("./use-callback-ref");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * React hook that provides a declarative `setTimeout`
 *
 * @param callback the callback to run after specified delay
 * @param delay the delay (in ms)
 */ function useTimeout(callback, delay) {
    var fn = _useCallbackRef.useCallbackRef(callback);
    React.useEffect(function() {
        if (delay == null) return undefined;
        var timeoutId = null;
        timeoutId = window.setTimeout(function() {
            fn();
        }, delay);
        return function() {
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [
        delay,
        fn
    ]);
}

},{"react":"3f97z","./use-callback-ref":"2yahV"}],"aWENp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useWhyDidYouUpdate = useWhyDidYouUpdate;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useWhyDidYouUpdate(name, props) {
    var previousProps = React.useRef();
    React.useEffect(function() {
        if (previousProps.current) {
            var allKeys = Object.keys(_extends({
            }, previousProps.current, props));
            var changesObj = {
            };
            allKeys.forEach(function(key) {
                if (previousProps.current[key] !== props[key]) changesObj[key] = {
                    from: previousProps.current[key],
                    to: props[key]
                };
            });
            if (Object.keys(changesObj).length) console.log("[why-did-you-update]", name, changesObj);
        }
        previousProps.current = props;
    });
}

},{"react":"3f97z"}],"4QBuE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    keyframes: true,
    omitThemingProps: true,
    shouldForwardProp: true
};
exports.shouldForwardProp = exports.omitThemingProps = exports.keyframes = void 0;
var _colorMode = require("@chakra-ui/color-mode");
Object.keys(_colorMode).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _colorMode[key]) return;
    exports[key] = _colorMode[key];
});
var _styledSystem = require("@chakra-ui/styled-system");
Object.keys(_styledSystem).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _styledSystem[key]) return;
    exports[key] = _styledSystem[key];
});
var _react = require("@emotion/react");
exports.keyframes = _react.keyframes;
var _hooks = require("./hooks");
Object.keys(_hooks).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _hooks[key]) return;
    exports[key] = _hooks[key];
});
var _system = require("./system.types");
Object.keys(_system).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _system[key]) return;
    exports[key] = _system[key];
});
var _providers = require("./providers");
Object.keys(_providers).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _providers[key]) return;
    exports[key] = _providers[key];
});
var _system2 = require("./system.utils");
exports.omitThemingProps = _system2.omitThemingProps;
var _system3 = require("./system");
Object.keys(_system3).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _system3[key]) return;
    exports[key] = _system3[key];
});
var _forwardRef = require("./forward-ref");
Object.keys(_forwardRef).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _forwardRef[key]) return;
    exports[key] = _forwardRef[key];
});
var _useStyleConfig = require("./use-style-config");
Object.keys(_useStyleConfig).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _useStyleConfig[key]) return;
    exports[key] = _useStyleConfig[key];
});
var _shouldForwardProp = require("./should-forward-prop");
exports.shouldForwardProp = _shouldForwardProp.shouldForwardProp;

},{"@chakra-ui/color-mode":"2xmmW","@chakra-ui/styled-system":"2YbW2","@emotion/react":"3DTbq","./hooks":"5pdEw","./system.types":"1ne4M","./providers":"2jD2z","./system.utils":"1pZk5","./system":"49MA0","./forward-ref":"2XKHX","./use-style-config":"6PIMr","./should-forward-prop":"3iG0O"}],"2xmmW":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _colorModeProvider = require("./color-mode-provider");
Object.keys(_colorModeProvider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _colorModeProvider[key]) return;
    exports[key] = _colorModeProvider[key];
});
var _storageManager = require("./storage-manager");
Object.keys(_storageManager).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _storageManager[key]) return;
    exports[key] = _storageManager[key];
});
var _colorModeScript = require("./color-mode-script");
Object.keys(_colorModeScript).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _colorModeScript[key]) return;
    exports[key] = _colorModeScript[key];
});

},{"./color-mode-provider":"4euQA","./storage-manager":"1lwhj","./color-mode-script":"15IE3"}],"4euQA":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ColorModeProvider = ColorModeProvider;
exports.useColorModeValue = useColorModeValue;
exports.LightMode = exports.DarkMode = exports.useColorMode = exports.ColorModeContext = void 0;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _colorMode = require("./color-mode.utils");
var _storageManager = require("./storage-manager");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var ColorModeContext = /*#__PURE__*/ React.createContext({
});
exports.ColorModeContext = ColorModeContext;
if (_utils.__DEV__) ColorModeContext.displayName = "ColorModeContext";
/**
 * React hook that reads from `ColorModeProvider` context
 * Returns the color mode and function to toggle it
 */ var useColorMode = function useColorMode1() {
    var context = React.useContext(ColorModeContext);
    if (context === undefined) throw new Error("useColorMode must be used within a ColorModeProvider");
    return context;
};
exports.useColorMode = useColorMode;
/**
 * Provides context for the color mode based on config in `theme`
 * Returns the color mode and function to toggle the color mode
 */ function ColorModeProvider(props) {
    var value = props.value, children = props.children, _props$options = props.options, useSystemColorMode = _props$options.useSystemColorMode, initialColorMode = _props$options.initialColorMode, _props$colorModeManag = props.colorModeManager, colorModeManager = _props$colorModeManag === void 0 ? _storageManager.localStorageManager : _props$colorModeManag;
    /**
   * Only attempt to retrieve if we're on the server. Else this will result
   * in a hydration mismatch warning and partially invalid visuals.
   *
   * Else fallback safely to `theme.config.initialColormode` (default light)
   */ var _React$useState = React.useState(colorModeManager.type === "cookie" ? colorModeManager.get(initialColorMode) : initialColorMode), colorMode = _React$useState[0], rawSetColorMode = _React$useState[1];
    React.useEffect(function() {
        /**
     * Since we cannot initially retrieve localStorage to due above mentioned
     * reasons, do so after hydration.
     *
     * Priority:
     * - system color mode
     * - defined value on <ColorModeScript />, if present
     * - previously stored value
     */ if (_utils.isBrowser && colorModeManager.type === "localStorage") {
            var mode = useSystemColorMode ? _colorMode.getColorScheme(initialColorMode) : _colorMode.root.get() || colorModeManager.get();
            if (mode) rawSetColorMode(mode);
        }
    }, [
        colorModeManager,
        useSystemColorMode,
        initialColorMode
    ]);
    React.useEffect(function() {
        var isDark = colorMode === "dark";
        _colorMode.syncBodyClassName(isDark);
        _colorMode.root.set(isDark ? "dark" : "light");
    }, [
        colorMode
    ]);
    var setColorMode = React.useCallback(function(value1) {
        colorModeManager.set(value1);
        rawSetColorMode(value1);
    }, [
        colorModeManager
    ]);
    var toggleColorMode = React.useCallback(function() {
        setColorMode(colorMode === "light" ? "dark" : "light");
    }, [
        colorMode,
        setColorMode
    ]);
    React.useEffect(function() {
        var removeListener;
        if (useSystemColorMode) removeListener = _colorMode.addListener(setColorMode);
        return function() {
            if (removeListener && useSystemColorMode) removeListener();
        };
    }, [
        setColorMode,
        useSystemColorMode
    ]); // presence of `value` indicates a controlled context
    var context = React.useMemo(function() {
        return {
            colorMode: value != null ? value : colorMode,
            toggleColorMode: value ? _utils.noop : toggleColorMode,
            setColorMode: value ? _utils.noop : setColorMode
        };
    }, [
        colorMode,
        setColorMode,
        toggleColorMode,
        value
    ]);
    return(/*#__PURE__*/ React.createElement(ColorModeContext.Provider, {
        value: context
    }, children));
}
if (_utils.__DEV__) ColorModeProvider.displayName = "ColorModeProvider";
/**
 * Locks the color mode to `dark`, without any way to change it.
 */ var DarkMode = function DarkMode1(props) {
    return(/*#__PURE__*/ React.createElement(ColorModeContext.Provider, _extends({
        value: {
            colorMode: "dark",
            toggleColorMode: _utils.noop,
            setColorMode: _utils.noop
        }
    }, props)));
};
exports.DarkMode = DarkMode;
if (_utils.__DEV__) DarkMode.displayName = "DarkMode";
/**
 * Locks the color mode to `light` without any way to change it.
 */ var LightMode = function LightMode1(props) {
    return(/*#__PURE__*/ React.createElement(ColorModeContext.Provider, _extends({
        value: {
            colorMode: "light",
            toggleColorMode: _utils.noop,
            setColorMode: _utils.noop
        }
    }, props)));
};
exports.LightMode = LightMode;
if (_utils.__DEV__) LightMode.displayName = "LightMode";
/**
 * Change value based on color mode.
 *
 * @param light the light mode value
 * @param dark the dark mode value
 *
 * @example
 *
 * ```js
 * const Icon = useColorModeValue(MoonIcon, SunIcon)
 * ```
 */ function useColorModeValue(light, dark) {
    var _useColorMode = useColorMode(), colorMode = _useColorMode.colorMode;
    return colorMode === "dark" ? dark : light;
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","./color-mode.utils":"1GVRX","./storage-manager":"1lwhj"}],"1GVRX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.syncBodyClassName = syncBodyClassName;
exports.getColorScheme = getColorScheme;
exports.addListener = addListener;
exports.root = exports.darkQuery = exports.lightQuery = exports.queries = void 0;
var _utils = require("@chakra-ui/utils");
var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
};
/**
 * SSR: Graceful fallback for the `body` element
 */ var mockBody = {
    classList: {
        add: _utils.noop,
        remove: _utils.noop
    }
};
var getBody = function getBody1() {
    return _utils.isBrowser ? document.body : mockBody;
};
/**
 * Function to add/remove class from `body` based on color mode
 */ function syncBodyClassName(isDark) {
    var body = getBody();
    body.classList.add(isDark ? classNames.dark : classNames.light);
    body.classList.remove(isDark ? classNames.light : classNames.dark);
}
/**
 * Check if JS media query matches the query string passed
 */ function getMediaQuery(query) {
    var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);
    if (!mediaQueryList) return undefined;
    return !!mediaQueryList.media === mediaQueryList.matches;
}
var queries = {
    light: "(prefers-color-scheme: light)",
    dark: "(prefers-color-scheme: dark)"
};
exports.queries = queries;
var lightQuery = queries.light;
exports.lightQuery = lightQuery;
var darkQuery = queries.dark;
exports.darkQuery = darkQuery;
function getColorScheme(fallback) {
    var _getMediaQuery;
    var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === "dark";
    return isDark ? "dark" : "light";
}
/**
 * Adds system os color mode listener, and run the callback
 * once preference changes
 */ function addListener(fn) {
    if (!("matchMedia" in window)) return _utils.noop;
    var mediaQueryList = window.matchMedia(queries.dark);
    var listener = function listener1() {
        fn(mediaQueryList.matches ? "dark" : "light");
    };
    listener();
    mediaQueryList.addListener(listener);
    return function() {
        mediaQueryList.removeListener(listener);
    };
}
var root = {
    get: function get() {
        return document.documentElement.style.getPropertyValue("--chakra-ui-color-mode");
    },
    set: function set(mode) {
        if (_utils.isBrowser) document.documentElement.style.setProperty("--chakra-ui-color-mode", mode);
    }
};
exports.root = root;

},{"@chakra-ui/utils":"3364O"}],"1lwhj":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.cookieStorageManager = exports.localStorageManager = exports.storageKey = void 0;
var _utils = require("@chakra-ui/utils");
var hasSupport = function hasSupport1() {
    return typeof Storage !== "undefined";
};
var storageKey = "chakra-ui-color-mode";
exports.storageKey = storageKey;
/**
 * Simple object to handle read-write to localStorage
 */ var localStorageManager = {
    get: function get(init) {
        if (!hasSupport()) return init;
        try {
            var _value = localStorage.getItem(storageKey);
            return _value != null ? _value : init;
        } catch (error) {
            if (_utils.__DEV__) console.log(error);
            return init;
        }
    },
    set: function set(value) {
        if (!hasSupport()) return;
        try {
            localStorage.setItem(storageKey, value);
        } catch (error) {
            if (_utils.__DEV__) console.log(error);
        }
    },
    type: "localStorage"
};
/**
 * Simple object to handle read-write to cookies
 */ exports.localStorageManager = localStorageManager;
var cookieStorageManager = function cookieStorageManager1(cookies) {
    if (cookies === void 0) cookies = "";
    return {
        get: function get(init) {
            var match = cookies.match(new RegExp("(^| )" + storageKey + "=([^;]+)"));
            if (match) return match[2];
            return init;
        },
        set: function set(value) {
            document.cookie = storageKey + "=" + value + "; max-age=31536000; path=/";
        },
        type: "cookie"
    };
};
exports.cookieStorageManager = cookieStorageManager;

},{"@chakra-ui/utils":"3364O"}],"15IE3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ColorModeScript = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function setScript(initialValue) {
    var mql = window.matchMedia("(prefers-color-scheme: dark)");
    var systemPreference = mql.matches ? "dark" : "light";
    var persistedPreference;
    try {
        persistedPreference = localStorage.getItem("chakra-ui-color-mode");
    } catch (error) {
        console.log("Chakra UI: localStorage is not available. Color mode persistence might not work as expected");
    }
    var isInStorage = typeof persistedPreference === "string";
    var colorMode;
    if (isInStorage) colorMode = persistedPreference;
    else colorMode = initialValue === "system" ? systemPreference : initialValue;
    if (colorMode) {
        var root = document.documentElement;
        root.style.setProperty("--chakra-ui-color-mode", colorMode);
    }
}
/**
 * Script to add to the root of your application when using localStorage,
 * to help prevent flash of color mode that can happen during page load.
 */ var ColorModeScript = function ColorModeScript1(props) {
    var _props$initialColorMo = props.initialColorMode, initialColorMode = _props$initialColorMo === void 0 ? "light" : _props$initialColorMo;
    var html = "(" + String(setScript) + ")('" + initialColorMode + "')";
    return(/*#__PURE__*/ React.createElement("script", {
        nonce: props.nonce,
        dangerouslySetInnerHTML: {
            __html: html
        }
    }));
};
exports.ColorModeScript = ColorModeScript;

},{"react":"3f97z"}],"2YbW2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    tokenToCSSVar: true
};
exports.tokenToCSSVar = void 0;
var _config = require("./config");
Object.keys(_config).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _config[key]) return;
    exports[key] = _config[key];
});
var _css = require("./css");
Object.keys(_css).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _css[key]) return;
    exports[key] = _css[key];
});
var _system = require("./system.types");
Object.keys(_system).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _system[key]) return;
    exports[key] = _system[key];
});
var _theming = require("./theming.types");
Object.keys(_theming).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _theming[key]) return;
    exports[key] = _theming[key];
});
var _system2 = require("./system");
Object.keys(_system2).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _system2[key]) return;
    exports[key] = _system2[key];
});
var _createThemeVars = require("./create-theme-vars");
Object.keys(_createThemeVars).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _createThemeVars[key]) return;
    exports[key] = _createThemeVars[key];
});
var _createTransform = require("./utils/create-transform");
exports.tokenToCSSVar = _createTransform.tokenToCSSVar;

},{"./config":"5ZFjR","./css":"7cPap","./system.types":"6OKWR","./theming.types":"4dLRf","./system":"cXss8","./create-theme-vars":"6lXZu","./utils/create-transform":"7BdH9"}],"5ZFjR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _background = require("./background");
Object.keys(_background).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _background[key]) return;
    exports[key] = _background[key];
});
var _border = require("./border");
Object.keys(_border).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _border[key]) return;
    exports[key] = _border[key];
});
var _color = require("./color");
Object.keys(_color).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _color[key]) return;
    exports[key] = _color[key];
});
var _effect = require("./effect");
Object.keys(_effect).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _effect[key]) return;
    exports[key] = _effect[key];
});
var _filter = require("./filter");
Object.keys(_filter).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _filter[key]) return;
    exports[key] = _filter[key];
});
var _flexbox = require("./flexbox");
Object.keys(_flexbox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _flexbox[key]) return;
    exports[key] = _flexbox[key];
});
var _grid = require("./grid");
Object.keys(_grid).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _grid[key]) return;
    exports[key] = _grid[key];
});
var _interactivity = require("./interactivity");
Object.keys(_interactivity).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _interactivity[key]) return;
    exports[key] = _interactivity[key];
});
var _layout = require("./layout");
Object.keys(_layout).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _layout[key]) return;
    exports[key] = _layout[key];
});
var _list = require("./list");
Object.keys(_list).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _list[key]) return;
    exports[key] = _list[key];
});
var _others = require("./others");
Object.keys(_others).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _others[key]) return;
    exports[key] = _others[key];
});
var _position = require("./position");
Object.keys(_position).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _position[key]) return;
    exports[key] = _position[key];
});
var _ring = require("./ring");
Object.keys(_ring).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _ring[key]) return;
    exports[key] = _ring[key];
});
var _space = require("./space");
Object.keys(_space).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _space[key]) return;
    exports[key] = _space[key];
});
var _textDecoration = require("./text-decoration");
Object.keys(_textDecoration).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _textDecoration[key]) return;
    exports[key] = _textDecoration[key];
});
var _transform = require("./transform");
Object.keys(_transform).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _transform[key]) return;
    exports[key] = _transform[key];
});
var _transition = require("./transition");
Object.keys(_transition).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _transition[key]) return;
    exports[key] = _transition[key];
});
var _typography = require("./typography");
Object.keys(_typography).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _typography[key]) return;
    exports[key] = _typography[key];
});

},{"./background":"4EYyt","./border":"8V7Gv","./color":"1GgAR","./effect":"2PhST","./filter":"2zsiQ","./flexbox":"4JKmm","./grid":"7BGbB","./interactivity":"blo79","./layout":"r9eOl","./list":"1IvVe","./others":"1TFoe","./position":"ohLQ6","./ring":"49M6M","./space":"3i2vj","./text-decoration":"5wJI2","./transform":"jdxND","./transition":"2vDSE","./typography":"Kc1Fl"}],"4EYyt":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.background = void 0;
var _utils = require("../utils");
var background = {
    background: _utils.t.colors("background"),
    backgroundColor: _utils.t.colors("backgroundColor"),
    backgroundImage: _utils.t.propT("backgroundImage", _utils.transforms.bgImage),
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundClip: {
        transform: _utils.transforms.bgClip
    },
    bgSize: _utils.t.prop("backgroundSize"),
    bgPosition: _utils.t.prop("backgroundPosition"),
    bg: _utils.t.colors("background"),
    bgColor: _utils.t.colors("backgroundColor"),
    bgPos: _utils.t.prop("backgroundPosition"),
    bgRepeat: _utils.t.prop("backgroundRepeat"),
    bgAttachment: _utils.t.prop("backgroundAttachment"),
    bgGradient: _utils.t.propT("backgroundImage", _utils.transforms.gradient),
    bgClip: {
        transform: _utils.transforms.bgClip
    }
};
exports.background = background;
Object.assign(background, {
    bgImage: background.backgroundImage,
    bgImg: background.backgroundImage
});

},{"../utils":"Xe0iv"}],"Xe0iv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    t: true,
    transforms: true
};
exports.t = void 0;
var _createTransform = require("./create-transform");
var _propConfig = require("./prop-config");
var _transformFunctions = require("./transform-functions");
exports.transforms = _transformFunctions.transformFunctions;
var _types = require("./types");
Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _types[key]) return;
    exports[key] = _types[key];
});
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var t = {
    borderWidths: _propConfig.toConfig("borderWidths"),
    borderStyles: _propConfig.toConfig("borderStyles"),
    colors: _propConfig.toConfig("colors"),
    borders: _propConfig.toConfig("borders"),
    radii: _propConfig.toConfig("radii", _transformFunctions.transformFunctions.px),
    space: _propConfig.toConfig("space", _transformFunctions.transformFunctions.px),
    spaceT: _propConfig.toConfig("space", _transformFunctions.transformFunctions.px),
    degreeT: function degreeT(property) {
        return {
            property: property,
            transform: _transformFunctions.transformFunctions.degree
        };
    },
    prop: function prop(property, scale, transform) {
        return _extends({
            property: property,
            scale: scale
        }, scale && {
            transform: _createTransform.createTransform({
                scale: scale,
                transform: transform
            })
        });
    },
    propT: function propT(property, transform) {
        return {
            property: property,
            transform: transform
        };
    },
    sizes: _propConfig.toConfig("sizes", _transformFunctions.transformFunctions.px),
    sizesT: _propConfig.toConfig("sizes", _transformFunctions.transformFunctions.fraction),
    shadows: _propConfig.toConfig("shadows"),
    logical: _propConfig.logical,
    blur: _propConfig.toConfig("blur", _transformFunctions.transformFunctions.blur)
};
exports.t = t;

},{"./create-transform":"7BdH9","./prop-config":"7211N","./transform-functions":"3sBi6","./types":"1lnVX"}],"7BdH9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createTransform = createTransform;
exports.tokenToCSSVar = void 0;
var _utils = require("@chakra-ui/utils");
var tokenToCSSVar = function tokenToCSSVar1(scale, value) {
    return function(theme) {
        var valueStr = String(value);
        var key = scale ? scale + "." + valueStr : valueStr;
        return _utils.isObject(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;
    };
};
exports.tokenToCSSVar = tokenToCSSVar;
function createTransform(options) {
    var scale = options.scale, transform = options.transform, compose = options.compose;
    var fn = function fn1(value, theme) {
        var _transform;
        var _value = tokenToCSSVar(scale, value)(theme);
        var result = (_transform = transform == null ? void 0 : transform(_value, theme)) != null ? _transform : _value;
        if (compose) result = compose(result, theme);
        return result;
    };
    return fn;
}

},{"@chakra-ui/utils":"3364O"}],"7211N":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.toConfig = toConfig;
exports.logical = logical;
var _createTransform = require("./create-transform");
function toConfig(scale, transform) {
    return function(property) {
        var result = {
            property: property,
            scale: scale
        };
        result.transform = _createTransform.createTransform({
            scale: scale,
            transform: transform
        });
        return result;
    };
}
var getRtl = function getRtl1(_ref) {
    var rtl = _ref.rtl, ltr = _ref.ltr;
    return function(theme) {
        return theme.direction === "rtl" ? rtl : ltr;
    };
};
function logical(options) {
    var property = options.property, scale = options.scale, transform = options.transform;
    return {
        scale: scale,
        property: getRtl(property),
        transform: scale ? _createTransform.createTransform({
            scale: scale,
            compose: transform
        }) : transform
    };
}

},{"./create-transform":"7BdH9"}],"3sBi6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.transformFunctions = void 0;
var _utils = require("@chakra-ui/utils");
var _templates = require("./templates");
var _parseGradient = require("./parse-gradient");
var analyzeCSSValue = function analyzeCSSValue1(value) {
    var num = parseFloat(value.toString());
    var unit = value.toString().replace(String(num), "");
    return {
        unitless: !unit,
        value: num,
        unit: unit
    };
};
var wrap = function wrap1(str) {
    return function(value) {
        return str + "(" + value + ")";
    };
};
var transformFunctions = {
    filter: function filter(value) {
        return value !== "auto" ? value : _templates.filterTemplate;
    },
    backdropFilter: function backdropFilter(value) {
        return value !== "auto" ? value : _templates.backdropFilterTemplate;
    },
    ring: function ring(value) {
        return _templates.getRingTemplate(transformFunctions.px(value));
    },
    bgClip: function bgClip(value) {
        return value === "text" ? {
            color: "transparent",
            backgroundClip: "text"
        } : {
            backgroundClip: value
        };
    },
    transform: function transform(value) {
        if (value === "auto") return _templates.getTransformTemplate();
        if (value === "auto-gpu") return _templates.getTransformGpuTemplate();
        return value;
    },
    px: function px(value) {
        if (value == null) return value;
        var _analyzeCSSValue = analyzeCSSValue(value), unitless = _analyzeCSSValue.unitless;
        return unitless || _utils.isNumber(value) ? value + "px" : value;
    },
    fraction: function fraction(value) {
        return !_utils.isNumber(value) || value > 1 ? value : value * 100 + "%";
    },
    "float": function float(value, theme) {
        var map = {
            left: "right",
            right: "left"
        };
        return theme.direction === "rtl" ? map[value] : value;
    },
    degree: function degree(value) {
        if (_utils.isCssVar(value) || value == null) return value;
        var unitless = _utils.isString(value) && !value.endsWith("deg");
        return _utils.isNumber(value) || unitless ? value + "deg" : value;
    },
    gradient: _parseGradient.gradientTransform,
    blur: wrap("blur"),
    opacity: wrap("opacity"),
    brightness: wrap("brightness"),
    contrast: wrap("contrast"),
    dropShadow: wrap("drop-shadow"),
    grayscale: wrap("grayscale"),
    hueRotate: wrap("hue-rotate"),
    invert: wrap("invert"),
    saturate: wrap("saturate"),
    sepia: wrap("sepia"),
    bgImage: function bgImage(value) {
        if (value == null) return value;
        var prevent = isCSSFunction(value) || _parseGradient.globalSet.has(value);
        return !prevent ? "url(" + value + ")" : value;
    },
    outline: function outline(value) {
        var isNoneOrZero = String(value) === "0" || String(value) === "none";
        return value !== null && isNoneOrZero ? {
            outline: "2px solid transparent",
            outlineOffset: "2px"
        } : {
            outline: value
        };
    },
    flexDirection: function flexDirection(value) {
        var _flexDirectionTemplat;
        var _ref = (_flexDirectionTemplat = _templates.flexDirectionTemplate[value]) != null ? _flexDirectionTemplat : {
        }, space = _ref.space, divide = _ref.divide;
        var result = {
            flexDirection: value
        };
        if (space) result[space] = 1;
        if (divide) result[divide] = 1;
        return result;
    }
};
exports.transformFunctions = transformFunctions;
var isCSSFunction = function isCSSFunction1(value) {
    return _utils.isString(value) && value.includes("(") && value.includes(")");
};

},{"@chakra-ui/utils":"3364O","./templates":"68M5I","./parse-gradient":"hnNyH"}],"68M5I":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getTransformTemplate = getTransformTemplate;
exports.getTransformGpuTemplate = getTransformGpuTemplate;
exports.getRingTemplate = getRingTemplate;
exports.spaceYTemplate = exports.spaceXTemplate = exports.flexDirectionTemplate = exports.backdropFilterTemplate = exports.filterTemplate = void 0;
var _spaceXTemplate, _spaceYTemplate;
/**
 * The CSS transform order following the upcoming spec from CSSWG
 * translate => rotate => scale => skew
 * @see https://drafts.csswg.org/css-transforms-2/#ctm
 * @see https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/
 */ var transformTemplate = [
    "rotate(var(--chakra-rotate, 0))",
    "scaleX(var(--chakra-scale-x, 1))",
    "scaleY(var(--chakra-scale-y, 1))",
    "skewX(var(--chakra-skew-x, 0))",
    "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
    return [
        "translateX(var(--chakra-translate-x, 0))",
        "translateY(var(--chakra-translate-y, 0))"
    ].concat(transformTemplate).join(" ");
}
function getTransformGpuTemplate() {
    return [
        "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)"
    ].concat(transformTemplate).join(" ");
}
var filterTemplate = {
    "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
    filter: [
        "var(--chakra-blur)",
        "var(--chakra-brightness)",
        "var(--chakra-contrast)",
        "var(--chakra-grayscale)",
        "var(--chakra-hue-rotate)",
        "var(--chakra-invert)",
        "var(--chakra-saturate)",
        "var(--chakra-sepia)",
        "var(--chakra-drop-shadow)"
    ].join(" ")
};
exports.filterTemplate = filterTemplate;
var backdropFilterTemplate = {
    backdropFilter: [
        "var(--chakra-backdrop-blur)",
        "var(--chakra-backdrop-brightness)",
        "var(--chakra-backdrop-contrast)",
        "var(--chakra-backdrop-grayscale)",
        "var(--chakra-backdrop-hue-rotate)",
        "var(--chakra-backdrop-invert)",
        "var(--chakra-backdrop-opacity)",
        "var(--chakra-backdrop-saturate)",
        "var(--chakra-backdrop-sepia)"
    ].join(" "),
    "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
exports.backdropFilterTemplate = backdropFilterTemplate;
function getRingTemplate(value) {
    return {
        "--chakra-ring-offset-shadow": "var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)",
        "--chakra-ring-shadow": "var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)",
        "--chakra-ring-width": value,
        boxShadow: [
            "var(--chakra-ring-offset-shadow)",
            "var(--chakra-ring-shadow)",
            "var(--chakra-shadow, 0 0 #0000)"
        ].join(", ")
    };
}
var flexDirectionTemplate = {
    "row-reverse": {
        space: "--chakra-space-x-reverse",
        divide: "--chakra-divide-x-reverse"
    },
    "column-reverse": {
        space: "--chakra-space-y-reverse",
        divide: "--chakra-divide-y-reverse"
    }
};
exports.flexDirectionTemplate = flexDirectionTemplate;
var owlSelector = "& > :not(style) ~ :not(style)";
var spaceXTemplate = (_spaceXTemplate = {
}, _spaceXTemplate[owlSelector] = {
    marginInlineStart: "calc(var(--chakra-space-x) * calc(1 - var(--chakra-space-x-reverse)))",
    marginInlineEnd: "calc(var(--chakra-space-x) * var(--chakra-space-x-reverse))"
}, _spaceXTemplate);
exports.spaceXTemplate = spaceXTemplate;
var spaceYTemplate = (_spaceYTemplate = {
}, _spaceYTemplate[owlSelector] = {
    marginTop: "calc(var(--chakra-space-y) * calc(1 - var(--chakra-space-y-reverse)))",
    marginBottom: "calc(var(--chakra-space-y) * var(--chakra-space-y-reverse))"
}, _spaceYTemplate);
exports.spaceYTemplate = spaceYTemplate;

},{}],"hnNyH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.parseGradient = parseGradient;
exports.gradientTransform = exports.globalSet = void 0;
function _wrapRegExp(re, groups) {
    _wrapRegExp = function _wrapRegExp1(re1, groups1) {
        return new BabelRegExp(re1, undefined, groups1);
    };
    var _RegExp = _wrapNativeSuper(RegExp);
    var _super = RegExp.prototype;
    var _groups = new WeakMap();
    function BabelRegExp(re1, flags, groups1) {
        var _this = _RegExp.call(this, re1, flags);
        _groups.set(_this, groups1 || _groups.get(re1));
        return _this;
    }
    _inherits(BabelRegExp, _RegExp);
    BabelRegExp.prototype.exec = function(str) {
        var result = _super.exec.call(this, str);
        if (result) result.groups = buildGroups(result, this);
        return result;
    };
    BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
        if (typeof substitution === "string") {
            var groups1 = _groups.get(this);
            return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
                return "$" + groups1[name];
            }));
        } else if (typeof substitution === "function") {
            var _this = this;
            return _super[Symbol.replace].call(this, str, function() {
                var args = [];
                args.push.apply(args, arguments);
                if (typeof args[args.length - 1] !== "object") args.push(buildGroups(args, _this));
                return substitution.apply(this, args);
            });
        } else return _super[Symbol.replace].call(this, str, substitution);
    };
    function buildGroups(result, re1) {
        var g = _groups.get(re1);
        return Object.keys(g).reduce(function(groups2, name) {
            groups2[name] = result[g[name]];
            return groups2;
        }, Object.create(null));
    }
    return _wrapRegExp.apply(this, arguments);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper1(Class1) {
        if (Class1 === null || !_isNativeFunction(Class1)) return Class1;
        if (typeof Class1 !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class1)) return _cache.get(Class1);
            _cache.set(Class1, Wrapper);
        }
        function Wrapper() {
            return _construct(Class1, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class1.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class1);
    };
    return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct1(Parent1, args1, Class1) {
        var a = [
            null
        ];
        a.push.apply(a, args1);
        var Constructor = Function.bind.apply(Parent1, a);
        var instance = new Constructor();
        if (Class1) _setPrototypeOf(instance, Class1.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf1(o1) {
        return o1.__proto__ || Object.getPrototypeOf(o1);
    };
    return _getPrototypeOf(o);
}
var directionMap = {
    "to-t": "to top",
    "to-tr": "to top right",
    "to-r": "to right",
    "to-br": "to bottom right",
    "to-b": "to bottom",
    "to-bl": "to bottom left",
    "to-l": "to left",
    "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = new Set([
    "none",
    "-moz-initial",
    "inherit",
    "initial",
    "revert",
    "unset"
]);
exports.globalSet = globalSet;
var trimSpace = function trimSpace1(str) {
    return str.trim();
};
function parseGradient(value, theme) {
    var _regex$exec$groups, _regex$exec;
    if (value == null || globalSet.has(value)) return value;
    var regex = /*#__PURE__*/ _wrapRegExp(/(^[\x2DA-Za-z]+)\(((.*))\)/g, {
        type: 1,
        values: 2
    });
    var _ref = (_regex$exec$groups = (_regex$exec = regex.exec(value)) == null ? void 0 : _regex$exec.groups) != null ? _regex$exec$groups : {
    }, type = _ref.type, values = _ref.values;
    if (!type || !values) return value;
    var _type = type.includes("-gradient") ? type : type + "-gradient";
    var _values$split$map$fil = values.split(",").map(trimSpace).filter(Boolean), maybeDirection = _values$split$map$fil[0], stops = _values$split$map$fil.slice(1);
    if ((stops == null ? void 0 : stops.length) === 0) return value;
    var direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
    stops.unshift(direction);
    var _values = stops.map(function(stop) {
        // if stop is valid shorthand direction, return it
        if (valueSet.has(stop)) return stop; // color stop could be `red.200 20%` based on css gradient spec
        var _stop$split = stop.split(" "), _color = _stop$split[0], _stop = _stop$split[1]; // else, get and transform the color token or css value
        var key = "colors." + _color;
        var color = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;
        return _stop ? [
            color,
            _stop
        ].join(" ") : color;
    });
    return _type + "(" + _values.join(", ") + ")";
}
var gradientTransform = function gradientTransform1(value, theme) {
    return parseGradient(value, theme != null ? theme : {
    });
};
exports.gradientTransform = gradientTransform;

},{}],"1lnVX":[function(require,module,exports) {
"use strict";

},{}],"8V7Gv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.border = void 0;
var _utils = require("../utils");
var border = {
    border: _utils.t.borders("border"),
    borderWidth: _utils.t.borderWidths("borderWidth"),
    borderStyle: _utils.t.borderStyles("borderStyle"),
    borderColor: _utils.t.colors("borderColor"),
    borderRadius: _utils.t.radii("borderRadius"),
    borderTop: _utils.t.borders("borderTop"),
    borderBlockStart: _utils.t.borders("borderBlockStart"),
    borderTopLeftRadius: _utils.t.radii("borderTopLeftRadius"),
    borderStartStartRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: "borderTopLeftRadius",
            rtl: "borderTopRightRadius"
        }
    }),
    borderEndStartRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: "borderBottomLeftRadius",
            rtl: "borderBottomRightRadius"
        }
    }),
    borderTopRightRadius: _utils.t.radii("borderTopRightRadius"),
    borderStartEndRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: "borderTopRightRadius",
            rtl: "borderTopLeftRadius"
        }
    }),
    borderEndEndRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: "borderBottomRightRadius",
            rtl: "borderBottomLeftRadius"
        }
    }),
    borderRight: _utils.t.borders("borderRight"),
    borderInlineEnd: _utils.t.borders("borderInlineEnd"),
    borderBottom: _utils.t.borders("borderBottom"),
    borderBlockEnd: _utils.t.borders("borderBlockEnd"),
    borderBottomLeftRadius: _utils.t.radii("borderBottomLeftRadius"),
    borderBottomRightRadius: _utils.t.radii("borderBottomRightRadius"),
    borderLeft: _utils.t.borders("borderLeft"),
    borderInlineStart: {
        property: "borderInlineStart",
        scale: "borders"
    },
    borderInlineStartRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: [
                "borderTopLeftRadius",
                "borderBottomLeftRadius"
            ],
            rtl: [
                "borderTopRightRadius",
                "borderBottomRightRadius"
            ]
        }
    }),
    borderInlineEndRadius: _utils.t.logical({
        scale: "radii",
        property: {
            ltr: [
                "borderTopRightRadius",
                "borderBottomRightRadius"
            ],
            rtl: [
                "borderTopLeftRadius",
                "borderBottomLeftRadius"
            ]
        }
    }),
    borderX: _utils.t.borders([
        "borderLeft",
        "borderRight"
    ]),
    borderInline: _utils.t.borders("borderInline"),
    borderY: _utils.t.borders([
        "borderTop",
        "borderBottom"
    ]),
    borderBlock: _utils.t.borders("borderBlock"),
    borderTopWidth: _utils.t.borderWidths("borderTopWidth"),
    borderBlockStartWidth: _utils.t.borderWidths("borderBlockStartWidth"),
    borderTopColor: _utils.t.colors("borderTopColor"),
    borderBlockStartColor: _utils.t.colors("borderBlockStartColor"),
    borderTopStyle: _utils.t.borderStyles("borderTopStyle"),
    borderBlockStartStyle: _utils.t.borderStyles("borderBlockStartStyle"),
    borderBottomWidth: _utils.t.borderWidths("borderBottomWidth"),
    borderBlockEndWidth: _utils.t.borderWidths("borderBlockEndWidth"),
    borderBottomColor: _utils.t.colors("borderBottomColor"),
    borderBlockEndColor: _utils.t.colors("borderBlockEndColor"),
    borderBottomStyle: _utils.t.borderStyles("borderBottomStyle"),
    borderBlockEndStyle: _utils.t.borderStyles("borderBlockEndStyle"),
    borderLeftWidth: _utils.t.borderWidths("borderLeftWidth"),
    borderInlineStartWidth: _utils.t.borderWidths("borderInlineStartWidth"),
    borderLeftColor: _utils.t.colors("borderLeftColor"),
    borderInlineStartColor: _utils.t.colors("borderInlineStartColor"),
    borderLeftStyle: _utils.t.borderStyles("borderLeftStyle"),
    borderInlineStartStyle: _utils.t.borderStyles("borderInlineStartStyle"),
    borderRightWidth: _utils.t.borderWidths("borderRightWidth"),
    borderInlineEndWidth: _utils.t.borderWidths("borderInlineEndWidth"),
    borderRightColor: _utils.t.colors("borderRightColor"),
    borderInlineEndColor: _utils.t.colors("borderInlineEndColor"),
    borderRightStyle: _utils.t.borderStyles("borderRightStyle"),
    borderInlineEndStyle: _utils.t.borderStyles("borderInlineEndStyle"),
    borderTopRadius: _utils.t.radii([
        "borderTopLeftRadius",
        "borderTopRightRadius"
    ]),
    borderBottomRadius: _utils.t.radii([
        "borderBottomLeftRadius",
        "borderBottomRightRadius"
    ]),
    borderLeftRadius: _utils.t.radii([
        "borderTopLeftRadius",
        "borderBottomLeftRadius"
    ]),
    borderRightRadius: _utils.t.radii([
        "borderTopRightRadius",
        "borderBottomRightRadius"
    ])
};
exports.border = border;
Object.assign(border, {
    rounded: border.borderRadius,
    roundedTop: border.borderTopRadius,
    roundedTopLeft: border.borderTopLeftRadius,
    roundedTopRight: border.borderTopRightRadius,
    roundedTopStart: border.borderStartStartRadius,
    roundedTopEnd: border.borderStartEndRadius,
    roundedBottom: border.borderBottomRadius,
    roundedBottomLeft: border.borderBottomLeftRadius,
    roundedBottomRight: border.borderBottomRightRadius,
    roundedBottomStart: border.borderEndStartRadius,
    roundedBottomEnd: border.borderEndEndRadius,
    roundedLeft: border.borderLeftRadius,
    roundedRight: border.borderRightRadius,
    roundedStart: border.borderInlineStartRadius,
    roundedEnd: border.borderInlineEndRadius,
    borderStart: border.borderInlineStart,
    borderEnd: border.borderInlineEnd,
    borderTopStartRadius: border.borderStartStartRadius,
    borderTopEndRadius: border.borderStartEndRadius,
    borderBottomStartRadius: border.borderEndStartRadius,
    borderBottomEndRadius: border.borderEndEndRadius,
    borderStartRadius: border.borderInlineStartRadius,
    borderEndRadius: border.borderInlineEndRadius,
    borderStartWidth: border.borderInlineStartWidth,
    borderEndWidth: border.borderInlineEndWidth,
    borderStartColor: border.borderInlineStartColor,
    borderEndColor: border.borderInlineEndColor,
    borderStartStyle: border.borderInlineStartStyle,
    borderEndStyle: border.borderInlineEndStyle
}); /**
 * The prop types for border properties listed above
 */ 

},{"../utils":"Xe0iv"}],"1GgAR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.color = void 0;
var _utils = require("../utils");
var color = {
    color: _utils.t.colors("color"),
    textColor: _utils.t.colors("color"),
    fill: _utils.t.colors("fill"),
    stroke: _utils.t.colors("stroke")
};
exports.color = color;

},{"../utils":"Xe0iv"}],"2PhST":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.effect = void 0;
var _utils = require("../utils");
var effect = {
    boxShadow: _utils.t.shadows("boxShadow"),
    mixBlendMode: true,
    blendMode: _utils.t.prop("mixBlendMode"),
    backgroundBlendMode: true,
    bgBlendMode: _utils.t.prop("backgroundBlendMode"),
    opacity: true
};
exports.effect = effect;
Object.assign(effect, {
    shadow: effect.boxShadow
}); /**
 * Types for box and text shadow properties
 */ 

},{"../utils":"Xe0iv"}],"2zsiQ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.filter = void 0;
var _utils = require("../utils");
var filter = {
    filter: {
        transform: _utils.transforms.filter
    },
    blur: _utils.t.blur("--chakra-blur"),
    brightness: _utils.t.propT("--chakra-brightness", _utils.transforms.brightness),
    contrast: _utils.t.propT("--chakra-contrast", _utils.transforms.contrast),
    hueRotate: _utils.t.degreeT("--chakra-hue-rotate"),
    invert: _utils.t.propT("--chakra-invert", _utils.transforms.invert),
    saturate: _utils.t.propT("--chakra-saturate", _utils.transforms.saturate),
    dropShadow: _utils.t.propT("--chakra-drop-shadow", _utils.transforms.dropShadow),
    backdropFilter: {
        transform: _utils.transforms.backdropFilter
    },
    backdropBlur: _utils.t.blur("--chakra-backdrop-blur"),
    backdropBrightness: _utils.t.propT("--chakra-backdrop-brightness", _utils.transforms.brightness),
    backdropContrast: _utils.t.propT("--chakra-backdrop-contrast", _utils.transforms.contrast),
    backdropHueRotate: _utils.t.degreeT("--chakra-backdrop-hue-rotate"),
    backdropInvert: _utils.t.propT("--chakra-backdrop-invert", _utils.transforms.invert),
    backdropSaturate: _utils.t.propT("--chakra-backdrop-saturate", _utils.transforms.saturate)
};
exports.filter = filter;

},{"../utils":"Xe0iv"}],"4JKmm":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.flexbox = void 0;
var _utils = require("../utils");
var _createTransform = require("../utils/create-transform");
var _templates = require("../utils/templates");
var flexbox = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: {
        transform: _utils.transforms.flexDirection
    },
    experimental_spaceX: {
        "static": _templates.spaceXTemplate,
        transform: _createTransform.createTransform({
            scale: "space",
            transform: function transform(value) {
                return value !== null ? {
                    "--chakra-space-x": value
                } : null;
            }
        })
    },
    experimental_spaceY: {
        "static": _templates.spaceYTemplate,
        transform: _createTransform.createTransform({
            scale: "space",
            transform: function transform(value) {
                return value != null ? {
                    "--chakra-space-y": value
                } : null;
            }
        })
    },
    flex: true,
    flexFlow: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: _utils.t.sizes("flexBasis"),
    justifySelf: true,
    alignSelf: true,
    order: true,
    placeItems: true,
    placeContent: true,
    placeSelf: true
};
exports.flexbox = flexbox;
Object.assign(flexbox, {
    flexDir: flexbox.flexDirection
});

},{"../utils":"Xe0iv","../utils/create-transform":"7BdH9","../utils/templates":"68M5I"}],"7BGbB":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.grid = void 0;
var _utils = require("../utils");
var grid = {
    gridGap: _utils.t.space("gridGap"),
    gridColumnGap: _utils.t.space("gridColumnGap"),
    gridRowGap: _utils.t.space("gridRowGap"),
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridAutoRows: true,
    gridTemplate: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true
};
exports.grid = grid;

},{"../utils":"Xe0iv"}],"blo79":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.interactivity = void 0;
var _utils = require("../utils");
var interactivity = {
    appearance: true,
    cursor: true,
    resize: true,
    userSelect: true,
    pointerEvents: true,
    outline: {
        transform: _utils.transforms.outline
    },
    outlineOffset: true,
    outlineColor: _utils.t.colors("outlineColor")
};
exports.interactivity = interactivity;

},{"../utils":"Xe0iv"}],"r9eOl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.layout = void 0;
var _utils = require("../utils");
var layout = {
    width: _utils.t.sizesT("width"),
    inlineSize: _utils.t.sizesT("inlineSize"),
    height: _utils.t.sizes("height"),
    blockSize: _utils.t.sizes("blockSize"),
    boxSize: _utils.t.sizes([
        "width",
        "height"
    ]),
    minWidth: _utils.t.sizes("minWidth"),
    minInlineSize: _utils.t.sizes("minInlineSize"),
    minHeight: _utils.t.sizes("minHeight"),
    minBlockSize: _utils.t.sizes("minBlockSize"),
    maxWidth: _utils.t.sizes("maxWidth"),
    maxInlineSize: _utils.t.sizes("maxInlineSize"),
    maxHeight: _utils.t.sizes("maxHeight"),
    maxBlockSize: _utils.t.sizes("maxBlockSize"),
    d: _utils.t.prop("display"),
    overflow: true,
    overflowX: true,
    overflowY: true,
    overscrollBehavior: true,
    overscrollBehaviorX: true,
    overscrollBehaviorY: true,
    display: true,
    verticalAlign: true,
    boxSizing: true,
    boxDecorationBreak: true,
    "float": _utils.t.propT("float", _utils.transforms["float"]),
    objectFit: true,
    objectPosition: true,
    visibility: true,
    isolation: true
};
exports.layout = layout;
Object.assign(layout, {
    w: layout.width,
    h: layout.height,
    minW: layout.minWidth,
    maxW: layout.maxWidth,
    minH: layout.minHeight,
    maxH: layout.maxHeight,
    overscroll: layout.overscrollBehavior,
    overscrollX: layout.overscrollBehaviorX,
    overscrollY: layout.overscrollBehaviorY
}); /**
 * Types for layout related CSS properties
 */ 

},{"../utils":"Xe0iv"}],"1IvVe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.list = void 0;
var _utils = require("../utils");
var list = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: _utils.t.prop("listStylePosition"),
    listStyleImage: true,
    listStyleImg: _utils.t.prop("listStyleImage")
};
exports.list = list;

},{"../utils":"Xe0iv"}],"1TFoe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.others = void 0;
var _utils = require("@chakra-ui/utils");
var srOnly = {
    border: "0px",
    clip: "rect(0, 0, 0, 0)",
    width: "1px",
    height: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
};
var srFocusable = {
    position: "static",
    width: "auto",
    height: "auto",
    clip: "auto",
    padding: "0",
    margin: "0",
    overflow: "visible",
    whiteSpace: "normal"
};
var getWithPriority = function getWithPriority1(theme, key, styles) {
    var result = {
    };
    var obj = _utils.memoizedGet(theme, key, {
    });
    for(var prop in obj){
        var isInStyles = prop in styles && styles[prop] != null;
        if (!isInStyles) result[prop] = obj[prop];
    }
    return result;
};
var others = {
    srOnly: {
        transform: function transform(value) {
            if (value === true) return srOnly;
            if (value === "focusable") return srFocusable;
            return {
            };
        }
    },
    layerStyle: {
        processResult: true,
        transform: function transform(value, theme, styles) {
            return getWithPriority(theme, "layerStyles." + value, styles);
        }
    },
    textStyle: {
        processResult: true,
        transform: function transform(value, theme, styles) {
            return getWithPriority(theme, "textStyles." + value, styles);
        }
    },
    apply: {
        processResult: true,
        transform: function transform(value, theme, styles) {
            return getWithPriority(theme, value, styles);
        }
    }
};
exports.others = others;

},{"@chakra-ui/utils":"3364O"}],"ohLQ6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.position = void 0;
var _utils = require("../utils");
var position = {
    position: true,
    pos: _utils.t.prop("position"),
    zIndex: _utils.t.prop("zIndex", "zIndices"),
    inset: _utils.t.spaceT([
        "top",
        "right",
        "bottom",
        "left"
    ]),
    insetX: _utils.t.spaceT([
        "left",
        "right"
    ]),
    insetInline: _utils.t.spaceT("insetInline"),
    insetY: _utils.t.spaceT([
        "top",
        "bottom"
    ]),
    insetBlock: _utils.t.spaceT("insetBlock"),
    top: _utils.t.spaceT("top"),
    insetBlockStart: _utils.t.spaceT("insetBlockStart"),
    bottom: _utils.t.spaceT("bottom"),
    insetBlockEnd: _utils.t.spaceT("insetBlockEnd"),
    left: _utils.t.spaceT("left"),
    insetInlineStart: _utils.t.logical({
        scale: "space",
        property: {
            ltr: "left",
            rtl: "right"
        }
    }),
    right: _utils.t.spaceT("right"),
    insetInlineEnd: _utils.t.logical({
        scale: "space",
        property: {
            ltr: "right",
            rtl: "left"
        }
    })
};
exports.position = position;
Object.assign(position, {
    insetStart: position.insetInlineStart,
    insetEnd: position.insetInlineEnd
}); /**
 * Types for position CSS properties
 */ 

},{"../utils":"Xe0iv"}],"49M6M":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ring = void 0;
var _utils = require("../utils");
/**
 * The parser configuration for common outline properties
 */ var ring = {
    ring: {
        transform: _utils.transforms.ring
    },
    ringColor: _utils.t.colors("--chakra-ring-color"),
    ringOffset: _utils.t.prop("--chakra-ring-offset-width"),
    ringOffsetColor: _utils.t.colors("--chakra-ring-offset-color"),
    ringInset: _utils.t.prop("--chakra-ring-inset")
};
exports.ring = ring;

},{"../utils":"Xe0iv"}],"3i2vj":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.space = void 0;
var _utils = require("../utils");
var space = {
    margin: _utils.t.spaceT("margin"),
    marginTop: _utils.t.spaceT("marginTop"),
    marginBlockStart: _utils.t.spaceT("marginBlockStart"),
    marginRight: _utils.t.spaceT("marginRight"),
    marginInlineEnd: _utils.t.spaceT("marginInlineEnd"),
    marginBottom: _utils.t.spaceT("marginBottom"),
    marginBlockEnd: _utils.t.spaceT("marginBlockEnd"),
    marginLeft: _utils.t.spaceT("marginLeft"),
    marginInlineStart: _utils.t.spaceT("marginInlineStart"),
    marginX: _utils.t.spaceT([
        "marginInlineStart",
        "marginInlineEnd"
    ]),
    marginInline: _utils.t.spaceT("marginInline"),
    marginY: _utils.t.spaceT([
        "marginTop",
        "marginBottom"
    ]),
    marginBlock: _utils.t.spaceT("marginBlock"),
    padding: _utils.t.space("padding"),
    paddingTop: _utils.t.space("paddingTop"),
    paddingBlockStart: _utils.t.space("paddingBlockStart"),
    paddingRight: _utils.t.space("paddingRight"),
    paddingBottom: _utils.t.space("paddingBottom"),
    paddingBlockEnd: _utils.t.space("paddingBlockEnd"),
    paddingLeft: _utils.t.space("paddingLeft"),
    paddingInlineStart: _utils.t.space("paddingInlineStart"),
    paddingInlineEnd: _utils.t.space("paddingInlineEnd"),
    paddingX: _utils.t.space([
        "paddingInlineStart",
        "paddingInlineEnd"
    ]),
    paddingInline: _utils.t.space("paddingInline"),
    paddingY: _utils.t.space([
        "paddingTop",
        "paddingBottom"
    ]),
    paddingBlock: _utils.t.space("paddingBlock")
};
exports.space = space;
Object.assign(space, {
    m: space.margin,
    mt: space.marginTop,
    mr: space.marginRight,
    me: space.marginInlineEnd,
    marginEnd: space.marginInlineEnd,
    mb: space.marginBottom,
    ml: space.marginLeft,
    ms: space.marginInlineStart,
    marginStart: space.marginInlineStart,
    mx: space.marginX,
    my: space.marginY,
    p: space.padding,
    pt: space.paddingTop,
    py: space.paddingY,
    px: space.paddingX,
    pb: space.paddingBottom,
    pl: space.paddingLeft,
    ps: space.paddingInlineStart,
    paddingStart: space.paddingInlineStart,
    pr: space.paddingRight,
    pe: space.paddingInlineEnd,
    paddingEnd: space.paddingInlineEnd
}); /**
 * Types for space related CSS properties
 */ 

},{"../utils":"Xe0iv"}],"5wJI2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.textDecoration = void 0;
var _utils = require("../utils");
var textDecoration = {
    textDecorationColor: _utils.t.colors("textDecorationColor"),
    textDecoration: true,
    textDecor: {
        property: "textDecoration"
    },
    textDecorationLine: true,
    textDecorationStyle: true,
    textDecorationThickness: true,
    textUnderlineOffset: true,
    textShadow: _utils.t.shadows("textShadow")
};
exports.textDecoration = textDecoration;

},{"../utils":"Xe0iv"}],"jdxND":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.transform = void 0;
var _utils = require("../utils");
var transform = {
    clipPath: true,
    transform: _utils.t.propT("transform", _utils.transforms.transform),
    transformOrigin: true,
    translateX: _utils.t.spaceT("--chakra-translate-x"),
    translateY: _utils.t.spaceT("--chakra-translate-y"),
    skewX: _utils.t.degreeT("--chakra-skew-x"),
    skewY: _utils.t.degreeT("--chakra-skew-y"),
    scaleX: _utils.t.prop("--chakra-scale-x"),
    scaleY: _utils.t.prop("--chakra-scale-y"),
    scale: _utils.t.prop([
        "--chakra-scale-x",
        "--chakra-scale-y"
    ]),
    rotate: _utils.t.degreeT("--chakra-rotate")
};
exports.transform = transform;

},{"../utils":"Xe0iv"}],"2vDSE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.transition = void 0;
var _utils = require("../utils");
var transition = {
    transition: true,
    transitionDelay: true,
    animation: true,
    willChange: true,
    transitionDuration: _utils.t.prop("transitionDuration", "transition.duration"),
    transitionProperty: _utils.t.prop("transitionProperty", "transition.property"),
    transitionTimingFunction: _utils.t.prop("transitionTimingFunction", "transition.easing")
};
exports.transition = transition;

},{"../utils":"Xe0iv"}],"Kc1Fl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.typography = void 0;
var _utils = require("../utils");
var typography = {
    fontFamily: _utils.t.prop("fontFamily", "fonts"),
    fontSize: _utils.t.prop("fontSize", "fontSizes", _utils.transforms.px),
    fontWeight: _utils.t.prop("fontWeight", "fontWeights"),
    lineHeight: _utils.t.prop("lineHeight", "lineHeights"),
    letterSpacing: _utils.t.prop("letterSpacing", "letterSpacings"),
    textAlign: true,
    fontStyle: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    noOfLines: {
        "static": {
            overflow: "hidden",
            textOverflow: "ellipsis",
            display: "-webkit-box",
            WebkitBoxOrient: "vertical",
            //@ts-ignore
            WebkitLineClamp: "var(--chakra-line-clamp)"
        },
        property: "--chakra-line-clamp"
    },
    isTruncated: {
        transform: function transform(value) {
            if (value === true) return {
                overflow: "hidden",
                textOverflow: "ellipsis",
                whiteSpace: "nowrap"
            };
        }
    }
};
/**
 * Types for typography related CSS properties
 */ exports.typography = typography;

},{"../utils":"Xe0iv"}],"7cPap":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getCss = getCss;
exports.css = void 0;
var _utils = require("@chakra-ui/utils");
var _pseudos = require("./pseudos");
var _system = require("./system");
var _expandResponsive = require("./utils/expand-responsive");
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function() {
                if (i >= o.length) return {
                    done: true
                };
                return {
                    done: false,
                    value: o[i++]
                };
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    it = o[Symbol.iterator]();
    return it.next.bind(it);
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
var isCSSVariableTokenValue = function isCSSVariableTokenValue1(key, value) {
    return key.startsWith("--") && _utils.isString(value) && !_utils.isCssVar(value);
};
var resolveTokenValue = function resolveTokenValue1(theme, value) {
    var _ref, _getVar2;
    if (value == null) return value;
    var getVar = function getVar1(val) {
        var _theme$__cssMap, _theme$__cssMap$val;
        return (_theme$__cssMap = theme.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;
    };
    var getValue = function getValue1(val) {
        var _getVar;
        return (_getVar = getVar(val)) != null ? _getVar : val;
    };
    var valueSplit = value.split(",").map(function(v) {
        return v.trim();
    });
    var tokenValue = valueSplit[0], fallbackValue = valueSplit[1];
    value = (_ref = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref : getValue(value);
    return value;
};
function getCss(options) {
    var _options$configs = options.configs, configs = _options$configs === void 0 ? {
    } : _options$configs, _options$pseudos = options.pseudos, pseudos = _options$pseudos === void 0 ? {
    } : _options$pseudos, theme = options.theme;
    var css = function css1(stylesOrFn, nested) {
        if (nested === void 0) nested = false;
        var _styles = _utils.runIfFn(stylesOrFn, theme);
        var styles = _expandResponsive.expandResponsive(_styles)(theme);
        var computedStyles = {
        };
        for(var key in styles){
            var _config$transform, _config, _config2, _config3, _config4;
            var valueOrFn = styles[key];
            /**
       * allows the user to pass functional values
       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`
       */ var value = _utils.runIfFn(valueOrFn, theme);
            /**
       * converts pseudo shorthands to valid selector
       * "_hover" => "&:hover"
       */ if (key in pseudos) key = pseudos[key];
            /**
       * allows the user to use theme tokens in css vars
       * { --banner-height: "sizes.md" } => { --banner-height: "var(--chakra-sizes-md)" }
       *
       * You can also provide fallback values
       * { --banner-height: "sizes.no-exist, 40px" } => { --banner-height: "40px" }
       */ if (isCSSVariableTokenValue(key, value)) value = resolveTokenValue(theme, value);
            var config = configs[key];
            if (config === true) config = {
                property: key
            };
            if (_utils.isObject(value)) {
                var _computedStyles$key;
                computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {
                };
                computedStyles[key] = _utils.mergeWith({
                }, computedStyles[key], css1(value, true));
                continue;
            }
            var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;
            /**
       * Used for `layerStyle`, `textStyle` and `apply`. After getting the
       * styles in the theme, we need to process them since they might
       * contain theme tokens.
       *
       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`
       */ rawValue = (_config2 = config) != null && _config2.processResult ? css1(rawValue, true) : rawValue;
            /**
       * allows us define css properties for RTL and LTR.
       *
       * const marginStart = {
       *   property: theme => theme.direction === "rtl" ? "marginRight": "marginLeft",
       * }
       */ var configProperty = _utils.runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);
            if (!nested && (_config4 = config) != null && _config4["static"]) {
                var staticStyles = _utils.runIfFn(config["static"], theme);
                computedStyles = _utils.mergeWith({
                }, computedStyles, staticStyles);
            }
            if (configProperty && Array.isArray(configProperty)) {
                for(var _iterator = _createForOfIteratorHelperLoose(configProperty), _step; !(_step = _iterator()).done;){
                    var property = _step.value;
                    computedStyles[property] = rawValue;
                }
                continue;
            }
            if (configProperty) {
                if (configProperty === "&" && _utils.isObject(rawValue)) computedStyles = _utils.mergeWith({
                }, computedStyles, rawValue);
                else computedStyles[configProperty] = rawValue;
                continue;
            }
            if (_utils.isObject(rawValue)) {
                computedStyles = _utils.mergeWith({
                }, computedStyles, rawValue);
                continue;
            }
            computedStyles[key] = rawValue;
        }
        return computedStyles;
    };
    return css;
}
var css = function css1(styles) {
    return function(theme) {
        var cssFn = getCss({
            theme: theme,
            pseudos: _pseudos.pseudoSelectors,
            configs: _system.systemProps
        });
        return cssFn(styles);
    };
};
exports.css = css;

},{"@chakra-ui/utils":"3364O","./pseudos":"674dx","./system":"cXss8","./utils/expand-responsive":"76vxD"}],"674dx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.pseudoPropNames = exports.pseudoSelectors = void 0;
var _utils = require("@chakra-ui/utils");
var group = {
    hover: function hover(selector) {
        return selector + ":hover &, " + selector + "[data-hover] &";
    },
    focus: function focus(selector) {
        return selector + ":focus &, " + selector + "[data-focus] &";
    },
    active: function active(selector) {
        return selector + ":active &, " + selector + "[data-active] &";
    },
    disabled: function disabled(selector) {
        return selector + ":disabled &, " + selector + "[data-disabled] &";
    },
    invalid: function invalid(selector) {
        return selector + ":invalid &, " + selector + "[data-invalid] &";
    },
    checked: function checked(selector) {
        return selector + ":checked &, " + selector + "[data-checked] &";
    },
    indeterminate: function indeterminate(selector) {
        return selector + ":indeterminate &, " + selector + "[aria-checked=mixed] &, " + selector + "[data-indeterminate] &";
    },
    readOnly: function readOnly(selector) {
        return selector + ":read-only &, " + selector + "[readonly] &, " + selector + "[data-read-only] &";
    },
    expanded: function expanded(selector) {
        return selector + ":read-only &, " + selector + "[aria-expanded=true] &, " + selector + "[data-expanded] &";
    }
};
var toGroup = function toGroup1(fn) {
    return merge(fn, "[role=group]", "[data-group]", ".group");
};
var merge = function merge1(fn) {
    for(var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)selectors[_key - 1] = arguments[_key];
    return selectors.map(fn).join(", ");
};
var pseudoSelectors = {
    /**
   * Styles for CSS selector `&:hover`
   */ _hover: "&:hover, &[data-hover]",
    /**
   * Styles for CSS Selector `&:active`
   */ _active: "&:active, &[data-active]",
    /**
   * Styles for CSS selector `&:focus`
   *
   */ _focus: "&:focus, &[data-focus]",
    /**
   * Styles for the highlighted state.
   */ _highlighted: "&[data-highlighted]",
    /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */ _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible",
    /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   */ _disabled: "&[disabled], &[aria-disabled=true], &[data-disabled]",
    /**
   * Styles for CSS Selector `&:readonly`
   */ _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */ _before: "&::before",
    /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */ _after: "&::after",
    _empty: "&:empty",
    /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */ _expanded: "&[aria-expanded=true], &[data-expanded]",
    /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */ _checked: "&[aria-checked=true], &[data-checked]",
    /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */ _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */ _pressed: "&[aria-pressed=true], &[data-pressed]",
    /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */ _invalid: "&[aria-invalid=true], &[data-invalid]",
    /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */ _valid: "&[data-valid], &[data-state=valid]",
    /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */ _loading: "&[data-loading], &[aria-busy=true]",
    /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */ _selected: "&[aria-selected=true], &[data-selected]",
    /**
   * Styles for CSS Selector `[hidden=true]`
   */ _hidden: "&[hidden], &[data-hidden]",
    /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */ _autofill: "&:-webkit-autofill",
    /**
   * Styles for CSS Selector `&:nth-child(even)`
   */ _even: "&:nth-of-type(even)",
    /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */ _odd: "&:nth-of-type(odd)",
    /**
   * Styles for CSS Selector `&:first-of-type`
   */ _first: "&:first-of-type",
    /**
   * Styles for CSS Selector `&:last-of-type`
   */ _last: "&:last-of-type",
    /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */ _notFirst: "&:not(:first-of-type)",
    /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */ _notLast: "&:not(:last-of-type)",
    /**
   * Styles for CSS Selector `&:visited`
   */ _visited: "&:visited",
    /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */ _activeLink: "&[aria-current=page]",
    /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */ _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    /**
   * Styles to apply when parent is hovered
   */ _groupHover: toGroup(group.hover),
    /**
   * Styles to apply when parent is focused
   */ _groupFocus: toGroup(group.focus),
    /**
   * Styles to apply when parent is active
   */ _groupActive: toGroup(group.active),
    /**
   * Styles to apply when parent is disabled
   */ _groupDisabled: toGroup(group.disabled),
    /**
   * Styles to apply when parent is invalid
   */ _groupInvalid: toGroup(group.invalid),
    /**
   * Styles to apply when parent is checked
   */ _groupChecked: toGroup(group.checked),
    /**
   * Styles for CSS Selector `&::placeholder`.
   */ _placeholder: "&::placeholder",
    /**
   * Styles for CSS Selector `&:fullscreen`.
   */ _fullScreen: "&:fullscreen",
    /**
   * Styles for CSS Selector `&::selection`
   */ _selection: "&::selection",
    /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when any parent element has `dir="rtl"`
   */ _rtl: "[dir=rtl] &",
    /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * used when the user has requested the system
   * use a light or dark color theme.
   */ _mediaDark: "@media (prefers-color-scheme: dark)",
    /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */ _dark: ".chakra-ui-dark &, [data-theme=dark] &, &[data-theme=dark]",
    /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */ _light: ".chakra-ui-light &, [data-theme=light] &, &[data-theme=light]"
};
exports.pseudoSelectors = pseudoSelectors;
var pseudoPropNames = _utils.objectKeys(pseudoSelectors);
exports.pseudoPropNames = pseudoPropNames;

},{"@chakra-ui/utils":"3364O"}],"cXss8":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isStyleProp = exports.propNames = exports.layoutPropNames = exports.systemProps = void 0;
var _utils = require("@chakra-ui/utils");
var _config = require("./config");
var _pseudos = require("./pseudos");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var systemProps = _utils.mergeWith({
}, _config.background, _config.border, _config.color, _config.flexbox, _config.layout, _config.filter, _config.ring, _config.interactivity, _config.grid, _config.others, _config.position, _config.effect, _config.space, _config.typography, _config.textDecoration, _config.transform, _config.list, _config.transition);
exports.systemProps = systemProps;
var layoutSystem = Object.assign({
}, _config.space, _config.layout, _config.flexbox, _config.grid, _config.position);
var layoutPropNames = _utils.objectKeys(layoutSystem);
exports.layoutPropNames = layoutPropNames;
var propNames = [].concat(_utils.objectKeys(systemProps), _pseudos.pseudoPropNames);
exports.propNames = propNames;
var styleProps = _extends({
}, systemProps, _pseudos.pseudoSelectors);
var isStyleProp = function isStyleProp1(prop) {
    return prop in styleProps;
};
exports.isStyleProp = isStyleProp;

},{"@chakra-ui/utils":"3364O","./config":"5ZFjR","./pseudos":"674dx"}],"76vxD":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.expandResponsive = void 0;
var _utils = require("@chakra-ui/utils");
/**
 * Expands an array or object syntax responsive style.
 *
 * @example
 * expandResponsive({ mx: [1, 2] })
 * // or
 * expandResponsive({ mx: { base: 1, sm: 2 } })
 *
 * // => { mx: 1, "@media(min-width:<sm>)": { mx: 2 } }
 */ var expandResponsive = function expandResponsive1(styles) {
    return function(theme) {
        /**
     * Before any style can be processed, the user needs to call `toCSSVar`
     * which analyzes the theme's breakpoint and appends a `__breakpoints` property
     * to the theme with more details of the breakpoints.
     *
     * To learn more, go here: packages/utils/src/responsive.ts #analyzeBreakpoints
     */ if (!theme.__breakpoints) return styles;
        var _theme$__breakpoints = theme.__breakpoints, isResponsive = _theme$__breakpoints.isResponsive, toArrayValue = _theme$__breakpoints.toArrayValue, medias = _theme$__breakpoints.media;
        var computedStyles = {
        };
        for(var key in styles){
            var value = _utils.runIfFn(styles[key], theme);
            if (value == null) continue; // converts the object responsive syntax to array syntax
            value = _utils.isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
            if (!Array.isArray(value)) {
                computedStyles[key] = value;
                continue;
            }
            var queries = value.slice(0, medias.length).length;
            for(var index = 0; index < queries; index += 1){
                var media = medias == null ? void 0 : medias[index];
                if (!media) {
                    computedStyles[key] = value[index];
                    continue;
                }
                computedStyles[media] = computedStyles[media] || {
                };
                if (value[index] == null) continue;
                computedStyles[media][key] = value[index];
            }
        }
        return computedStyles;
    };
};
exports.expandResponsive = expandResponsive;

},{"@chakra-ui/utils":"3364O"}],"6OKWR":[function(require,module,exports) {
"use strict";

},{}],"4dLRf":[function(require,module,exports) {
"use strict";

},{}],"6lXZu":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _calc = require("./calc");
Object.keys(_calc).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _calc[key]) return;
    exports[key] = _calc[key];
});
var _cssVar = require("./css-var");
Object.keys(_cssVar).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _cssVar[key]) return;
    exports[key] = _cssVar[key];
});
var _toCssVar = require("./to-css-var");
Object.keys(_toCssVar).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _toCssVar[key]) return;
    exports[key] = _toCssVar[key];
});

},{"./calc":"5JU8C","./css-var":"6lpaq","./to-css-var":"6h8Gq"}],"5JU8C":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.calc = void 0;
var _utils = require("@chakra-ui/utils");
/**
 * Thank you @markdalgleish for this piece of art!
 */ function resolveReference(operand) {
    if (_utils.isObject(operand) && operand.reference) return operand.reference;
    return String(operand);
}
var toExpression = function toExpression1(operator) {
    for(var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)operands[_key - 1] = arguments[_key];
    return operands.map(resolveReference).join(" " + operator + " ").replace(/calc/g, "");
};
var _add = function add() {
    for(var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)operands[_key2] = arguments[_key2];
    return "calc(" + toExpression.apply(void 0, [
        "+"
    ].concat(operands)) + ")";
};
var _subtract = function subtract() {
    for(var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)operands[_key3] = arguments[_key3];
    return "calc(" + toExpression.apply(void 0, [
        "-"
    ].concat(operands)) + ")";
};
var _multiply = function multiply() {
    for(var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)operands[_key4] = arguments[_key4];
    return "calc(" + toExpression.apply(void 0, [
        "*"
    ].concat(operands)) + ")";
};
var _divide = function divide() {
    for(var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)operands[_key5] = arguments[_key5];
    return "calc(" + toExpression.apply(void 0, [
        "/"
    ].concat(operands)) + ")";
};
var _negate = function negate(x) {
    var value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) return String(value).startsWith("-") ? String(value).slice(1) : "-" + value;
    return _multiply(value, -1);
};
var calc = Object.assign(function(x) {
    return {
        add: function add1() {
            for(var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)operands[_key6] = arguments[_key6];
            return calc(_add.apply(void 0, [
                x
            ].concat(operands)));
        },
        subtract: function subtract1() {
            for(var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++)operands[_key7] = arguments[_key7];
            return calc(_subtract.apply(void 0, [
                x
            ].concat(operands)));
        },
        multiply: function multiply1() {
            for(var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++)operands[_key8] = arguments[_key8];
            return calc(_multiply.apply(void 0, [
                x
            ].concat(operands)));
        },
        divide: function divide1() {
            for(var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++)operands[_key9] = arguments[_key9];
            return calc(_divide.apply(void 0, [
                x
            ].concat(operands)));
        },
        negate: function negate1() {
            return calc(_negate(x));
        },
        toString: function toString() {
            return x.toString();
        }
    };
}, {
    add: _add,
    subtract: _subtract,
    multiply: _multiply,
    divide: _divide,
    negate: _negate
});
exports.calc = calc;

},{"@chakra-ui/utils":"3364O"}],"6lpaq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.addPrefix = addPrefix;
exports.toVarReference = toVarReference;
exports.toVarDefinition = toVarDefinition;
exports.cssVar = cssVar;
function replaceWhiteSpace(value, replaceValue) {
    if (replaceValue === void 0) replaceValue = "-";
    return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
    var valueStr = replaceWhiteSpace(value.toString());
    if (valueStr.includes("\\.")) return value;
    var isDecimal = !Number.isInteger(parseFloat(value.toString()));
    return isDecimal ? valueStr.replace(".", "\\.") : value;
}
function addPrefix(value, prefix) {
    if (prefix === void 0) prefix = "";
    return [
        prefix,
        escape(value)
    ].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
    return "var(" + escape(name) + (fallback ? ", " + fallback : "") + ")";
}
function toVarDefinition(value, prefix) {
    if (prefix === void 0) prefix = "";
    return "--" + addPrefix(value, prefix);
}
function cssVar(name, fallback, cssVarPrefix) {
    var cssVariable = toVarDefinition(name, cssVarPrefix);
    return {
        variable: cssVariable,
        reference: toVarReference(cssVariable, fallback)
    };
}

},{}],"6h8Gq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.toCSSVar = toCSSVar;
var _utils = require("@chakra-ui/utils");
var _createThemeVars2 = require("./create-theme-vars");
var _themeTokens = require("./theme-tokens");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function toCSSVar(rawTheme) {
    var _theme$config;
    /**
   * In the case the theme has already been converted to css-var (e.g extending the theme),
   * we can omit the computed css vars and recompute it for the extended theme.
   */ var theme = _themeTokens.omitVars(rawTheme); // omit components and breakpoints from css variable map
    var tokens = _themeTokens.extractTokens(theme);
    var cssVarPrefix = (_theme$config = theme.config) == null ? void 0 : _theme$config.cssVarPrefix;
    var _createThemeVars = _createThemeVars2.createThemeVars(tokens, {
        cssVarPrefix: cssVarPrefix
    }), cssMap = _createThemeVars.cssMap, cssVars = _createThemeVars.cssVars;
    var defaultCssVars = {
        "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
        "--chakra-ring-offset-width": "0px",
        "--chakra-ring-offset-color": "#fff",
        "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
        "--chakra-ring-offset-shadow": "0 0 #0000",
        "--chakra-ring-shadow": "0 0 #0000",
        "--chakra-space-x-reverse": "0",
        "--chakra-space-y-reverse": "0"
    };
    Object.assign(theme, {
        __cssVars: _extends({
        }, defaultCssVars, cssVars),
        __cssMap: cssMap,
        __breakpoints: _utils.analyzeBreakpoints(theme.breakpoints)
    });
    return theme;
}

},{"@chakra-ui/utils":"3364O","./create-theme-vars":"6QJLS","./theme-tokens":"32uww"}],"6QJLS":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createThemeVars = createThemeVars;
var _utils = require("@chakra-ui/utils");
var _calc = require("./calc");
var _cssVar3 = require("./css-var");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function createThemeVars(target, options) {
    var context = {
        cssMap: {
        },
        cssVars: {
        }
    };
    _utils.walkObject(target, function(value, path) {
        var _tokenHandlerMap$firs;
        // firstKey will be e.g. "space"
        var firstKey = path[0];
        var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;
        var _handler = handler(path, value, options), cssVars = _handler.cssVars, cssMap = _handler.cssMap;
        Object.assign(context.cssVars, cssVars);
        Object.assign(context.cssMap, cssMap);
    });
    return context;
}
/**
 * Define transformation handlers for ThemeScale
 */ var tokenHandlerMap = {
    space: function space(keys, value, options) {
        var _extends2;
        var properties = tokenHandlerMap.defaultHandler(keys, value, options);
        var firstKey = keys[0], referenceKeys = keys.slice(1);
        var negativeLookupKey = firstKey + ".-" + referenceKeys.join(".");
        var negativeVarKey = keys.join("-");
        var _cssVar = _cssVar3.cssVar(negativeVarKey, undefined, options.cssVarPrefix), variable = _cssVar.variable, reference = _cssVar.reference;
        var negativeValue = _calc.calc.negate(value);
        var varRef = _calc.calc.negate(reference);
        return {
            cssVars: properties.cssVars,
            cssMap: _extends({
            }, properties.cssMap, (_extends2 = {
            }, _extends2[negativeLookupKey] = {
                value: "" + negativeValue,
                "var": "" + variable,
                varRef: varRef
            }, _extends2))
        };
    },
    defaultHandler: function defaultHandler(keys, value, options) {
        var _cssVars, _cssMap;
        var lookupKey = keys.join(".");
        var varKey = keys.join("-");
        var _cssVar2 = _cssVar3.cssVar(varKey, undefined, options.cssVarPrefix), variable = _cssVar2.variable, reference = _cssVar2.reference;
        return {
            cssVars: (_cssVars = {
            }, _cssVars[variable] = value, _cssVars),
            cssMap: (_cssMap = {
            }, _cssMap[lookupKey] = {
                value: value,
                "var": variable,
                varRef: reference
            }, _cssMap)
        };
    }
};

},{"@chakra-ui/utils":"3364O","./calc":"5JU8C","./css-var":"6lpaq"}],"32uww":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.extractTokens = extractTokens;
exports.omitVars = omitVars;
var _utils = require("@chakra-ui/utils");
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var tokens = [
    "colors",
    "borders",
    "borderWidths",
    "borderStyles",
    "fonts",
    "fontSizes",
    "fontWeights",
    "letterSpacings",
    "lineHeights",
    "radii",
    "space",
    "shadows",
    "sizes",
    "zIndices",
    "transition",
    "blur"
];
function extractTokens(theme) {
    var _tokens = tokens;
    return _utils.pick(theme, _tokens);
}
function omitVars(rawTheme) {
    var __cssMap = rawTheme.__cssMap, __cssVars = rawTheme.__cssVars, __breakpoints = rawTheme.__breakpoints, cleanTheme = _objectWithoutPropertiesLoose(rawTheme, [
        "__cssMap",
        "__cssVars",
        "__breakpoints"
    ]);
    return cleanTheme;
}

},{"@chakra-ui/utils":"3364O"}],"5pdEw":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useChakra = useChakra;
exports.useToken = useToken;
exports.useProps = useProps;
var _colorMode = require("@chakra-ui/color-mode");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));
var _providers = require("./providers");
var _system = require("./system.utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useChakra() {
    var colorModeResult = _colorMode.useColorMode();
    var theme = _providers.useTheme();
    return _extends({
    }, colorModeResult, {
        theme: theme
    });
}
function useToken(scale, token, fallback) {
    var theme = _providers.useTheme();
    if (Array.isArray(token)) {
        var fallbackArr = [];
        if (fallback) fallbackArr = Array.isArray(fallback) ? fallback : [
            fallback
        ];
        return token.map(function(token1, index) {
            var _fallbackArr$index;
            var path = scale + "." + token1;
            return _utils.memoizedGet(theme, path, (_fallbackArr$index = fallbackArr[index]) != null ? _fallbackArr$index : token1);
        });
    }
    var path = scale + "." + token;
    return _utils.memoizedGet(theme, path, fallback != null ? fallback : token);
}
function useProps(themeKey, props) {
    var _theme$components, _styleConfig$defaultP;
    var _useChakra = useChakra(), theme = _useChakra.theme, colorMode = _useChakra.colorMode;
    var styleConfig = props.styleConfig || ((_theme$components = theme.components) == null ? void 0 : _theme$components[themeKey]);
    var defaultProps = (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {
    };
    var propsWithDefault = _extends({
    }, defaultProps, _utils.filterUndefined(props));
    var stylesRef = _react.useRef({
    });
    var mergedProps = _utils.mergeWith({
    }, propsWithDefault, {
        theme: theme,
        colorMode: colorMode
    });
    var memoizedStyles = _react.useMemo(function() {
        if (styleConfig) {
            var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes, _styleConfig$sizes2;
            var baseStyles = _utils.runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {
            }, mergedProps);
            var variants = _utils.runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {
            }, mergedProps);
            var sizes = _utils.runIfFn((_styleConfig$sizes = (_styleConfig$sizes2 = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes2[mergedProps.size]) != null ? _styleConfig$sizes : {
            }, mergedProps);
            var styles = _utils.mergeWith(baseStyles, sizes, variants);
            if (styleConfig.parts) styleConfig.parts.forEach(function(part) {
                var _styles$part;
                styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {
                };
            });
            var isStyleEqual = _reactFastCompare["default"](stylesRef.current, styles);
            if (!isStyleEqual) stylesRef.current = styles;
        }
        return stylesRef.current;
    }, [
        styleConfig,
        mergedProps
    ]);
    return {
        styles: memoizedStyles,
        props: _system.omitThemingProps(propsWithDefault)
    };
}

},{"@chakra-ui/color-mode":"2xmmW","@chakra-ui/utils":"3364O","react":"3f97z","react-fast-compare":"6khZc","./providers":"2jD2z","./system.utils":"1pZk5"}],"6khZc":[function(require,module,exports) {
/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;
// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js
function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.1
    if (a === b) return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!equal(i.value[1], b.get(i.value[0]))) return false;
            return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
            if (a.size !== b.size) return false;
            it = a.entries();
            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;
            return true;
        }
        // END: Modifications
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; (i--) !== 0;)if (a[i] !== b[i]) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; (i--) !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        // END: fast-deep-equal
        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element) return false;
        // custom handling for React/Preact
        for(i = length; (i--) !== 0;){
            if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) continue;
            // all other properties should be traversed as usual
            if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        // END: react-fast-compare
        // START: fast-deep-equal
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
module.exports = function isEqual(a, b) {
    try {
        return equal(a, b);
    } catch (error) {
        if ((error.message || '').match(/stack|recursion/i)) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn('react-fast-compare cannot handle circular refs');
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};

},{}],"2jD2z":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useTheme = useTheme;
exports.GlobalStyle = exports.useStyles = exports.StylesProvider = exports.ThemeProvider = void 0;
var _colorMode = require("@chakra-ui/color-mode");
var _styledSystem = require("@chakra-ui/styled-system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var _react = require("@emotion/react");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var ThemeProvider = function ThemeProvider1(props) {
    var _props$cssVarsRoot = props.cssVarsRoot, cssVarsRoot = _props$cssVarsRoot === void 0 ? ":host, :root" : _props$cssVarsRoot, theme = props.theme, children = props.children;
    var computedTheme = React.useMemo(function() {
        return _styledSystem.toCSSVar(theme);
    }, [
        theme
    ]);
    return(/*#__PURE__*/ React.createElement(_react.ThemeProvider, {
        theme: computedTheme
    }, /*#__PURE__*/ React.createElement(_react.Global, {
        styles: function styles(theme1) {
            var _ref;
            return _ref = {
            }, _ref[cssVarsRoot] = theme1.__cssVars, _ref;
        }
    }), children));
};
exports.ThemeProvider = ThemeProvider;
function useTheme() {
    var theme = React.useContext(_react.ThemeContext);
    if (!theme) throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`");
    return theme;
}
var _createContext = _reactUtils.createContext({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
}), StylesProvider = _createContext[0], useStyles = _createContext[1];
exports.useStyles = useStyles;
exports.StylesProvider = StylesProvider;
/**
 * Applies styles defined in `theme.styles.global` globally
 * using emotion's `Global` component
 */ var GlobalStyle = function GlobalStyle1() {
    var _useColorMode = _colorMode.useColorMode(), colorMode = _useColorMode.colorMode;
    return(/*#__PURE__*/ React.createElement(_react.Global, {
        styles: function styles(theme) {
            var styleObjectOrFn = _utils.memoizedGet(theme, "styles.global");
            var globalStyles = _utils.runIfFn(styleObjectOrFn, {
                theme: theme,
                colorMode: colorMode
            });
            if (!globalStyles) return undefined;
            var styles = _styledSystem.css(globalStyles)(theme);
            return styles;
        }
    }));
};
exports.GlobalStyle = GlobalStyle;

},{"@chakra-ui/color-mode":"2xmmW","@chakra-ui/styled-system":"2YbW2","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","@emotion/react":"3DTbq","react":"3f97z"}],"1pZk5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.omitThemingProps = omitThemingProps;
exports["default"] = isTag;
exports.getDisplayName = getDisplayName;
exports.domElements = void 0;
var _utils = require("@chakra-ui/utils");
/**
 * Carefully selected html elements for chakra components.
 * This is mostly for `chakra.<element>` syntax.
 */ var domElements = [
    "a",
    "b",
    "article",
    "aside",
    "blockquote",
    "button",
    "caption",
    "cite",
    "circle",
    "code",
    "dd",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hr",
    "img",
    "input",
    "kbd",
    "label",
    "li",
    "main",
    "mark",
    "nav",
    "ol",
    "p",
    "path",
    "pre",
    "q",
    "rect",
    "s",
    "svg",
    "section",
    "select",
    "strong",
    "small",
    "span",
    "sub",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "tr",
    "ul"
];
exports.domElements = domElements;
function omitThemingProps(props) {
    return _utils.omit(props, [
        "styleConfig",
        "size",
        "variant",
        "colorScheme"
    ]);
}
function isTag(target) {
    return _utils.isString(target) && (_utils.__DEV__ ? target.charAt(0) === target.charAt(0).toLowerCase() : true);
}
function getDisplayName(primitive) {
    return isTag(primitive) ? "chakra." + primitive : getComponentName(primitive);
}
function getComponentName(primitive) {
    return (_utils.__DEV__ ? _utils.isString(primitive) && primitive : false) || !_utils.isString(primitive) && primitive.displayName || !_utils.isString(primitive) && primitive.name || "ChakraComponent";
}

},{"@chakra-ui/utils":"3364O"}],"1ne4M":[function(require,module,exports) {
"use strict";

},{}],"49MA0":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.styled = styled;
exports.chakra = exports.toCSSObject = void 0;
var _styledSystem = require("@chakra-ui/styled-system");
var _utils = require("@chakra-ui/utils");
var _styled2 = _interopRequireDefault(require("@emotion/styled"));
var _shouldForwardProp = require("./should-forward-prop");
var _system = require("./system.utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Style resolver function that manages how style props are merged
 * in combination with other possible ways of defining styles.
 *
 * For example, take a component defined this way:
 * ```jsx
 * <Box fontSize="24px" sx={{ fontSize: "40px" }}></Box>
 * ```
 *
 * We want to manage the priority of the styles properly to prevent unwanted
 * behaviors. Right now, the `sx` prop has the highest priority so the resolved
 * fontSize will be `40px`
 */ var toCSSObject = function toCSSObject1(_ref) {
    var baseStyle = _ref.baseStyle;
    return function(props) {
        var theme = props.theme, cssProp = props.css, __css = props.__css, sx = props.sx, rest = _objectWithoutPropertiesLoose(props, [
            "theme",
            "css",
            "__css",
            "sx"
        ]);
        var styleProps = _utils.objectFilter(rest, function(_, prop) {
            return _styledSystem.isStyleProp(prop);
        });
        var finalStyles = Object.assign({
        }, __css, baseStyle, styleProps, sx);
        var computedCSS = _styledSystem.css(finalStyles)(props.theme);
        return cssProp ? [
            computedCSS,
            cssProp
        ] : computedCSS;
    };
};
exports.toCSSObject = toCSSObject;
function styled(component, options) {
    var _ref2 = options != null ? options : {
    }, baseStyle = _ref2.baseStyle, styledOptions = _objectWithoutPropertiesLoose(_ref2, [
        "baseStyle"
    ]);
    if (!styledOptions.shouldForwardProp) styledOptions.shouldForwardProp = _shouldForwardProp.shouldForwardProp;
    var styleObject = toCSSObject({
        baseStyle: baseStyle
    });
    return _styled2["default"](component, styledOptions)(styleObject);
}
var chakra = styled;
exports.chakra = chakra;
_system.domElements.forEach(function(tag) {
    chakra[tag] = chakra(tag);
});

},{"@chakra-ui/styled-system":"2YbW2","@chakra-ui/utils":"3364O","@emotion/styled":"6c82b","./should-forward-prop":"3iG0O","./system.utils":"1pZk5"}],"6c82b":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
require('@babel/runtime/helpers/extends');
require('react');
require('@emotion/is-prop-valid');
var base_dist_emotionStyledBase = require('../base/dist/emotion-styled-base.browser.cjs.js');
require('@emotion/react');
require('@emotion/utils');
require('@emotion/serialize');
var tags = [
    'a',
    'abbr',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'base',
    'bdi',
    'bdo',
    'big',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'embed',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hgroup',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'legend',
    'li',
    'link',
    'main',
    'map',
    'mark',
    'marquee',
    'menu',
    'menuitem',
    'meta',
    'meter',
    'nav',
    'noscript',
    'object',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'param',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'script',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'track',
    'u',
    'ul',
    'var',
    'video',
    'wbr',
    'circle',
    'clipPath',
    'defs',
    'ellipse',
    'foreignObject',
    'g',
    'image',
    'line',
    'linearGradient',
    'mask',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'stop',
    'svg',
    'text',
    'tspan'
];
var newStyled = base_dist_emotionStyledBase['default'].bind();
tags.forEach(function(tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
});
exports.default = newStyled;

},{"@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","@emotion/is-prop-valid":"6inNh","../base/dist/emotion-styled-base.browser.cjs.js":"50wvE","@emotion/react":"3DTbq","@emotion/utils":"3bU6u","@emotion/serialize":"7L4kg"}],"6inNh":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var memoize = require('@emotion/memoize');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var memoize__default = /*#__PURE__*/ _interopDefault(memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ memoize__default['default'](function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
exports.default = isPropValid;

},{"@emotion/memoize":"46jWj"}],"50wvE":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var _extends = require('@babel/runtime/helpers/extends');
var React = require('react');
var isPropValid = require('@emotion/is-prop-valid');
var react = require('@emotion/react');
var utils = require('@emotion/utils');
var serialize = require('@emotion/serialize');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var _extends__default = /*#__PURE__*/ _interopDefault(_extends);
var isPropValid__default = /*#__PURE__*/ _interopDefault(isPropValid);
var testOmitPropsOnStringTag = isPropValid__default['default'];
var testOmitPropsOnComponent = function testOmitPropsOnComponent1(key) {
    return key !== 'theme';
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp1(tag) {
    return typeof tag === 'string' && // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps1(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== 'function' && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var createStyled = function createStyled1(tag, options) {
    if (tag === undefined) throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) styles.push.apply(styles, args);
        else {
            if (args[0][0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++){
                if (args[0][i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
                styles.push(args[i], args[0][i]);
            }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class
        var Styled = react.withEmotionCache(function(props, cache, ref) {
            var finalTag = shouldUseAs && props.as || baseTag;
            var className = '';
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {
                };
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = React.useContext(react.ThemeContext);
            }
            if (typeof props.className === 'string') className = utils.getRegisteredStyles(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = serialize.serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
            var rules = utils.insertStyles(cache, serialized, typeof finalTag === 'string');
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
            var newProps = {
            };
            for(var _key in props){
                if (shouldUseAs && _key === 'as') continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            newProps.ref = ref;
            var ele = /*#__PURE__*/ React.createElement(finalTag, newProps);
            return ele;
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, 'toString', {
            value: function value() {
                if (targetClassName === undefined && true) return 'NO_COMPONENT_SELECTOR';
                 // $FlowFixMe: coerce undefined to string
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled1(nextTag, _extends__default['default']({
            }, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
        };
        return Styled;
    };
};
exports.default = createStyled;

},{"@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","@emotion/is-prop-valid":"6inNh","@emotion/react":"3DTbq","@emotion/utils":"3bU6u","@emotion/serialize":"7L4kg"}],"3iG0O":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.shouldForwardProp = void 0;
var _styledSystem = require("@chakra-ui/styled-system");
/**
 * List of props for emotion to omit from DOM.
 * It mostly consists of Chakra props
 */ var allPropNames = new Set([].concat(_styledSystem.propNames, [
    "textStyle",
    "layerStyle",
    "apply",
    "isTruncated",
    "noOfLines",
    "focusBorderColor",
    "errorBorderColor",
    "as",
    "__css",
    "css",
    "sx"
]));
/**
 * htmlWidth and htmlHeight is used in the <Image />
 * component to support the native `width` and `height` attributes
 *
 * https://github.com/chakra-ui/chakra-ui/issues/149
 */ var validHTMLProps = new Set([
    "htmlWidth",
    "htmlHeight",
    "htmlSize"
]);
var shouldForwardProp = function shouldForwardProp1(prop) {
    return validHTMLProps.has(prop) || !allPropNames.has(prop);
};
exports.shouldForwardProp = shouldForwardProp;

},{"@chakra-ui/styled-system":"2YbW2"}],"2XKHX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.forwardRef = forwardRef;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * All credit goes to Chance (Reach UI), Haz (Reakit) and (fluentui)
 * for creating the base type definitions upon which we improved on
 */ function forwardRef(component) {
    return(/*#__PURE__*/ React.forwardRef(component));
}

},{"react":"3f97z"}],"6PIMr":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useStyleConfig = useStyleConfig;
exports.useMultiStyleConfig = useMultiStyleConfig;
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));
var _hooks = require("./hooks");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useStyleConfig(themeKey, props, opts) {
    var _styleConfig$defaultP, _opts2;
    if (props === void 0) props = {
    };
    if (opts === void 0) opts = {
    };
    var _props = props, styleConfigProp = _props.styleConfig, rest = _objectWithoutPropertiesLoose(_props, [
        "styleConfig"
    ]);
    var _useChakra = _hooks.useChakra(), theme = _useChakra.theme, colorMode = _useChakra.colorMode;
    var themeStyleConfig = _utils.memoizedGet(theme, "components." + themeKey);
    var styleConfig = styleConfigProp || themeStyleConfig;
    var mergedProps = _utils.mergeWith({
        theme: theme,
        colorMode: colorMode
    }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {
    }, _utils.filterUndefined(_utils.omit(rest, [
        "children"
    ])));
    /**
   * Store the computed styles in a `ref` to avoid unneeded re-computation
   */ var stylesRef = _react.useRef({
    });
    return _react.useMemo(function() {
        if (styleConfig) {
            var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;
            var baseStyles = _utils.runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {
            }, mergedProps);
            var variants = _utils.runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {
            }, mergedProps);
            var sizes = _utils.runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {
            }, mergedProps);
            var styles = _utils.mergeWith({
            }, baseStyles, sizes, variants);
            if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) styleConfig.parts.forEach(function(part) {
                var _styles$part;
                styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {
                };
            });
            var isStyleEqual = _reactFastCompare["default"](stylesRef.current, styles);
            if (!isStyleEqual) stylesRef.current = styles;
        }
        return stylesRef.current;
    }, [
        styleConfig,
        mergedProps,
        (_opts2 = opts) == null ? void 0 : _opts2.isMultiPart
    ]);
}
function useMultiStyleConfig(themeKey, props) {
    return useStyleConfig(themeKey, props, {
        isMultiPart: true
    });
}

},{"@chakra-ui/utils":"3364O","react":"3f97z","react-fast-compare":"6khZc","./hooks":"5pdEw"}],"4ht9o":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    theme: true
};
exports["default"] = exports.theme = void 0;
var _components = _interopRequireDefault(require("./components"));
var _foundations = _interopRequireDefault(require("./foundations"));
var _styles = _interopRequireDefault(require("./styles"));
var _theme = require("./theme.types");
Object.keys(_theme).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _theme[key]) return;
    exports[key] = _theme[key];
});
var _utils = require("./utils");
Object.keys(_utils).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _utils[key]) return;
    exports[key] = _utils[key];
});
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var direction = "ltr";
var config = {
    useSystemColorMode: false,
    initialColorMode: "light",
    cssVarPrefix: "chakra"
};
var theme = _extends({
    direction: direction
}, _foundations["default"], {
    components: _components["default"],
    styles: _styles["default"],
    config: config
});
exports.theme = theme;
var _default = theme;
exports["default"] = _default;

},{"./components":"4W41m","./foundations":"KZEUh","./styles":"7CgB3","./theme.types":"4ACjD","./utils":"2Kon2"}],"4W41m":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _accordion = _interopRequireDefault(require("./accordion"));
var _alert = _interopRequireDefault(require("./alert"));
var _avatar = _interopRequireDefault(require("./avatar"));
var _badge = _interopRequireDefault(require("./badge"));
var _breadcrumb = _interopRequireDefault(require("./breadcrumb"));
var _button = _interopRequireDefault(require("./button"));
var _checkbox = _interopRequireDefault(require("./checkbox"));
var _closeButton = _interopRequireDefault(require("./close-button"));
var _code = _interopRequireDefault(require("./code"));
var _container = _interopRequireDefault(require("./container"));
var _divider = _interopRequireDefault(require("./divider"));
var _drawer = _interopRequireDefault(require("./drawer"));
var _editable = _interopRequireDefault(require("./editable"));
var _form = _interopRequireDefault(require("./form"));
var _formLabel = _interopRequireDefault(require("./form-label"));
var _heading = _interopRequireDefault(require("./heading"));
var _input = _interopRequireDefault(require("./input"));
var _kbd = _interopRequireDefault(require("./kbd"));
var _link = _interopRequireDefault(require("./link"));
var _list = _interopRequireDefault(require("./list"));
var _menu = _interopRequireDefault(require("./menu"));
var _modal = _interopRequireDefault(require("./modal"));
var _numberInput = _interopRequireDefault(require("./number-input"));
var _pinInput = _interopRequireDefault(require("./pin-input"));
var _popover = _interopRequireDefault(require("./popover"));
var _progress = _interopRequireDefault(require("./progress"));
var _radio = _interopRequireDefault(require("./radio"));
var _select = _interopRequireDefault(require("./select"));
var _skeleton = _interopRequireDefault(require("./skeleton"));
var _skipLink = _interopRequireDefault(require("./skip-link"));
var _slider = _interopRequireDefault(require("./slider"));
var _spinner = _interopRequireDefault(require("./spinner"));
var _stat = _interopRequireDefault(require("./stat"));
var _switch = _interopRequireDefault(require("./switch"));
var _table = _interopRequireDefault(require("./table"));
var _tabs = _interopRequireDefault(require("./tabs"));
var _tag = _interopRequireDefault(require("./tag"));
var _textarea = _interopRequireDefault(require("./textarea"));
var _tooltip = _interopRequireDefault(require("./tooltip"));
var _formError = _interopRequireDefault(require("./form-error"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
var _default = {
    Accordion: _accordion["default"],
    Alert: _alert["default"],
    Avatar: _avatar["default"],
    Badge: _badge["default"],
    Breadcrumb: _breadcrumb["default"],
    Button: _button["default"],
    Checkbox: _checkbox["default"],
    CloseButton: _closeButton["default"],
    Code: _code["default"],
    Container: _container["default"],
    Divider: _divider["default"],
    Drawer: _drawer["default"],
    Editable: _editable["default"],
    Form: _form["default"],
    FormLabel: _formLabel["default"],
    Heading: _heading["default"],
    Input: _input["default"],
    Kbd: _kbd["default"],
    Link: _link["default"],
    List: _list["default"],
    Menu: _menu["default"],
    Modal: _modal["default"],
    NumberInput: _numberInput["default"],
    PinInput: _pinInput["default"],
    Popover: _popover["default"],
    Progress: _progress["default"],
    Radio: _radio["default"],
    Select: _select["default"],
    Skeleton: _skeleton["default"],
    SkipLink: _skipLink["default"],
    Slider: _slider["default"],
    Spinner: _spinner["default"],
    Stat: _stat["default"],
    Switch: _switch["default"],
    Table: _table["default"],
    Tabs: _tabs["default"],
    Tag: _tag["default"],
    Textarea: _textarea["default"],
    Tooltip: _tooltip["default"],
    FormError: _formError["default"]
};
exports["default"] = _default;

},{"./accordion":"ea1Kx","./alert":"2V2GK","./avatar":"1HzwM","./badge":"52XAW","./breadcrumb":"3xypV","./button":"6t1dc","./checkbox":"6uTqT","./close-button":"1tX7p","./code":"1MKUm","./container":"2rzJe","./divider":"1fxH1","./drawer":"3tOdp","./editable":"DIZow","./form":"1T8Ri","./form-label":"6JBFp","./heading":"6paX8","./input":"4XBF6","./kbd":"plMZe","./link":"4o2kn","./list":"5gVEa","./menu":"6NT8U","./modal":"4Roa1","./number-input":"3nGkS","./pin-input":"7HOTb","./popover":"2zXLH","./progress":"14TvO","./radio":"5KQJT","./select":"oh0y4","./skeleton":"DcTWC","./skip-link":"OMbHJ","./slider":"borTg","./spinner":"57SIx","./stat":"1gPJq","./switch":"2U2XS","./table":"4tZ86","./tabs":"1kFDl","./tag":"33gm3","./textarea":"h48EX","./tooltip":"7gkP7","./form-error":"2sPd2"}],"ea1Kx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var parts = [
    "container",
    "button",
    "panel",
    "icon"
];
var baseStyleContainer = {
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
        borderBottomWidth: "1px"
    }
};
var baseStyleButton = {
    fontSize: "1rem",
    _focus: {
        boxShadow: "outline"
    },
    _hover: {
        bg: "blackAlpha.50"
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
    },
    px: 4,
    py: 2
};
var baseStylePanel = {
    pt: 2,
    px: 4,
    pb: 5
};
var baseStyleIcon = {
    fontSize: "1.25em"
};
var baseStyle = {
    container: baseStyleContainer,
    button: baseStyleButton,
    panel: baseStylePanel,
    icon: baseStyleIcon
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"2V2GK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "container",
    "title",
    "description",
    "icon"
];
var baseStyle = {
    container: {
        px: 4,
        py: 3
    },
    title: {
        fontWeight: "bold",
        lineHeight: 6,
        marginEnd: 2
    },
    description: {
        lineHeight: 6
    },
    icon: {
        flexShrink: 0,
        marginEnd: 3,
        w: 5,
        h: 6
    }
};
function getBg(props) {
    var theme = props.theme, c = props.colorScheme;
    var lightBg = _themeTools.getColor(theme, c + ".100", c);
    var darkBg = _themeTools.transparentize(c + ".200", 0.16)(theme);
    return _themeTools.mode(lightBg, darkBg)(props);
}
function variantSubtle(props) {
    var c = props.colorScheme;
    return {
        container: {
            bg: getBg(props)
        },
        icon: {
            color: _themeTools.mode(c + ".500", c + ".200")(props)
        }
    };
}
function variantLeftAccent(props) {
    var c = props.colorScheme;
    return {
        container: {
            paddingStart: 3,
            borderStartWidth: "4px",
            borderStartColor: _themeTools.mode(c + ".500", c + ".200")(props),
            bg: getBg(props)
        },
        icon: {
            color: _themeTools.mode(c + ".500", c + ".200")(props)
        }
    };
}
function variantTopAccent(props) {
    var c = props.colorScheme;
    return {
        container: {
            pt: 2,
            borderTopWidth: "4px",
            borderTopColor: _themeTools.mode(c + ".500", c + ".200")(props),
            bg: getBg(props)
        },
        icon: {
            color: _themeTools.mode(c + ".500", c + ".200")(props)
        }
    };
}
function variantSolid(props) {
    var c = props.colorScheme;
    return {
        container: {
            bg: _themeTools.mode(c + ".500", c + ".200")(props),
            color: _themeTools.mode("white", "gray.900")(props)
        }
    };
}
var variants = {
    subtle: variantSubtle,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid
};
var defaultProps = {
    variant: "subtle",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"3amSR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _color = require("./color");
Object.keys(_color).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _color[key]) return;
    exports[key] = _color[key];
});
var _component = require("./component");
Object.keys(_component).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _component[key]) return;
    exports[key] = _component[key];
});
var _createBreakpoints = require("./create-breakpoints");
Object.keys(_createBreakpoints).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _createBreakpoints[key]) return;
    exports[key] = _createBreakpoints[key];
});

},{"./color":"5I60c","./component":"60LEw","./create-breakpoints":"noLWO"}],"5I60c":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.generateStripe = generateStripe;
exports.randomColor = randomColor;
exports.complementary = exports.isAccessible = exports.contrast = exports.lighten = exports.darken = exports.blacken = exports.whiten = exports.transparentize = exports.isLight = exports.isDark = exports.tone = exports.getColor = void 0;
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _utils = require("@chakra-ui/utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
/**
 * Get the color raw value from theme
 * @param theme - the theme object
 * @param color - the color path ("green.200")
 * @param fallback - the fallback color
 */ var getColor = function getColor1(theme, color, fallback) {
    var hex = _utils.memoizedGet(theme, "colors." + color, color);
    var isValid = _tinycolor["default"](hex).isValid();
    return isValid ? hex : fallback;
};
/**
 * Determines if the tone of given color is "light" or "dark"
 * @param color - the color in hex, rgb, or hsl
 */ exports.getColor = getColor;
var tone = function tone1(color) {
    return function(theme) {
        var hex = getColor(theme, color);
        var isDark = _tinycolor["default"](hex).isDark();
        return isDark ? "dark" : "light";
    };
};
/**
 * Determines if a color tone is "dark"
 * @param color - the color in hex, rgb, or hsl
 */ exports.tone = tone;
var isDark = function isDark1(color) {
    return function(theme) {
        return tone(color)(theme) === "dark";
    };
};
/**
 * Determines if a color tone is "light"
 * @param color - the color in hex, rgb, or hsl
 */ exports.isDark = isDark;
var isLight = function isLight1(color) {
    return function(theme) {
        return tone(color)(theme) === "light";
    };
};
/**
 * Make a color transparent
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount white to add
 */ exports.isLight = isLight;
var transparentize = function transparentize1(color, opacity) {
    return function(theme) {
        var raw = getColor(theme, color);
        return _tinycolor["default"](raw).setAlpha(opacity).toRgbString();
    };
};
/**
 * Add white to a color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount white to add (0-1)
 */ exports.transparentize = transparentize;
var whiten = function whiten1(color, amount) {
    return function(theme) {
        var raw = getColor(theme, color);
        return _tinycolor["default"].mix(raw, "#fff", amount).toHexString();
    };
};
/**
 * Add black to a color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount black to add (0-1)
 */ exports.whiten = whiten;
var blacken = function blacken1(color, amount) {
    return function(theme) {
        var raw = getColor(theme, color);
        return _tinycolor["default"].mix(raw, "#000", amount).toHexString();
    };
};
/**
 * Darken a specified color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount to darken (0-1)
 */ exports.blacken = blacken;
var darken = function darken1(color, amount) {
    return function(theme) {
        var raw = getColor(theme, color);
        return _tinycolor["default"](raw).darken(amount).toHexString();
    };
};
/**
 * Lighten a specified color
 * @param color - the color in hex, rgb, or hsl
 * @param amount - the amount to lighten (0-1)
 */ exports.darken = darken;
var lighten = function lighten1(color, amount) {
    return function(theme) {
        return _tinycolor["default"](getColor(theme, color)).lighten(amount).toHexString();
    };
};
/**
 * Checks the contract ratio of between 2 colors,
 * based on the Web Content Accessibility Guidelines (Version 2.0).
 *
 * @param fg - the foreground or text color
 * @param bg - the background color
 */ exports.lighten = lighten;
var contrast = function contrast1(fg, bg) {
    return function(theme) {
        return _tinycolor["default"].readability(getColor(theme, bg), getColor(theme, fg));
    };
};
/**
 * Checks if a color meets the Web Content Accessibility
 * Guidelines (Version 2.0) for constract ratio.
 *
 * @param fg - the foreground or text color
 * @param bg - the background color
 */ exports.contrast = contrast;
var isAccessible = function isAccessible1(textColor, bgColor, options) {
    return function(theme) {
        return _tinycolor["default"].isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);
    };
};
exports.isAccessible = isAccessible;
var complementary = function complementary1(color) {
    return function(theme) {
        return _tinycolor["default"](getColor(theme, color)).complement().toHexString();
    };
};
exports.complementary = complementary;
function generateStripe(size, color) {
    if (size === void 0) size = "1rem";
    if (color === void 0) color = "rgba(255, 255, 255, 0.15)";
    return {
        backgroundImage: "linear-gradient(\n    45deg,\n    " + color + " 25%,\n    transparent 25%,\n    transparent 50%,\n    " + color + " 50%,\n    " + color + " 75%,\n    transparent 75%,\n    transparent\n  )",
        backgroundSize: size + " " + size
    };
}
function randomColor(opts) {
    var fallback = _tinycolor["default"].random().toHexString();
    if (!opts || _utils.isEmptyObject(opts)) return fallback;
    if (opts.string && opts.colors) return randomColorFromList(opts.string, opts.colors);
    if (opts.string && !opts.colors) return randomColorFromString(opts.string);
    if (opts.colors && !opts.string) return randomFromList(opts.colors);
    return fallback;
}
function randomColorFromString(str) {
    var hash = 0;
    if (str.length === 0) return hash.toString();
    for(var i = 0; i < str.length; i += 1){
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
        hash = hash & hash;
    }
    var color = "#";
    for(var j = 0; j < 3; j += 1){
        var value = hash >> j * 8 & 255;
        color += ("00" + value.toString(16)).substr(-2);
    }
    return color;
}
function randomColorFromList(str, list) {
    var index = 0;
    if (str.length === 0) return list[0];
    for(var i = 0; i < str.length; i += 1){
        index = str.charCodeAt(i) + ((index << 5) - index);
        index = index & index;
    }
    index = (index % list.length + list.length) % list.length;
    return list[index];
}
function randomFromList(list) {
    return list[Math.floor(Math.random() * list.length)];
}

},{"tinycolor2":"101FG","@chakra-ui/utils":"3364O"}],"101FG":[function(require,module,exports) {
// TinyColor v1.4.2
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License
(function(Math1) {
    var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math1.round, mathMin = Math1.min, mathMax = Math1.max, mathRandom = Math1.random;
    function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {
        };
        // If input is already a tinycolor, return itself
        if (color instanceof tinycolor) return color;
        // If we are called as a function, call using new instead
        if (!(this instanceof tinycolor)) return new tinycolor(color, opts);
        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this._r < 1) this._r = mathRound(this._r);
        if (this._g < 1) this._g = mathRound(this._g);
        if (this._b < 1) this._b = mathRound(this._b);
        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
    }
    tinycolor.prototype = {
        isDark: function() {
            return this.getBrightness() < 128;
        },
        isLight: function() {
            return !this.isDark();
        },
        isValid: function() {
            return this._ok;
        },
        getOriginalInput: function() {
            return this._originalInput;
        },
        getFormat: function() {
            return this._format;
        },
        getAlpha: function() {
            return this._a;
        },
        getBrightness: function() {
            //http://www.w3.org/TR/AERT#color-contrast
            var rgb = this.toRgb();
            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function() {
            //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
            var rgb = this.toRgb();
            var RsRGB, GsRGB, BsRGB, R, G, B;
            RsRGB = rgb.r / 255;
            GsRGB = rgb.g / 255;
            BsRGB = rgb.b / 255;
            if (RsRGB <= 0.03928) R = RsRGB / 12.92;
            else R = Math1.pow((RsRGB + 0.055) / 1.055, 2.4);
            if (GsRGB <= 0.03928) G = GsRGB / 12.92;
            else G = Math1.pow((GsRGB + 0.055) / 1.055, 2.4);
            if (BsRGB <= 0.03928) B = BsRGB / 12.92;
            else B = Math1.pow((BsRGB + 0.055) / 1.055, 2.4);
            return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function(value) {
            this._a = boundAlpha(value);
            this._roundA = mathRound(100 * this._a) / 100;
            return this;
        },
        toHsv: function() {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            return {
                h: hsv.h * 360,
                s: hsv.s,
                v: hsv.v,
                a: this._a
            };
        },
        toHsvString: function() {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
            return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function() {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            return {
                h: hsl.h * 360,
                s: hsl.s,
                l: hsl.l,
                a: this._a
            };
        },
        toHslString: function() {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
            return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function(allow3Char) {
            return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function(allow3Char) {
            return '#' + this.toHex(allow3Char);
        },
        toHex8: function(allow4Char) {
            return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function(allow4Char) {
            return '#' + this.toHex8(allow4Char);
        },
        toRgb: function() {
            return {
                r: mathRound(this._r),
                g: mathRound(this._g),
                b: mathRound(this._b),
                a: this._a
            };
        },
        toRgbString: function() {
            return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function() {
            return {
                r: mathRound(bound01(this._r, 255) * 100) + "%",
                g: mathRound(bound01(this._g, 255) * 100) + "%",
                b: mathRound(bound01(this._b, 255) * 100) + "%",
                a: this._a
            };
        },
        toPercentageRgbString: function() {
            return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function() {
            if (this._a === 0) return "transparent";
            if (this._a < 1) return false;
            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function(secondColor) {
            var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
            var secondHex8String = hex8String;
            var gradientType = this._gradientType ? "GradientType = 1, " : "";
            if (secondColor) {
                var s = tinycolor(secondColor);
                secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
            }
            return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function(format) {
            var formatSet = !!format;
            format = format || this._format;
            var formattedString = false;
            var hasAlpha = this._a < 1 && this._a >= 0;
            var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
            if (needsAlphaFormat) {
                // Special case for "transparent", all other non-alpha formats
                // will return rgba when there is transparency.
                if (format === "name" && this._a === 0) return this.toName();
                return this.toRgbString();
            }
            if (format === "rgb") formattedString = this.toRgbString();
            if (format === "prgb") formattedString = this.toPercentageRgbString();
            if (format === "hex" || format === "hex6") formattedString = this.toHexString();
            if (format === "hex3") formattedString = this.toHexString(true);
            if (format === "hex4") formattedString = this.toHex8String(true);
            if (format === "hex8") formattedString = this.toHex8String();
            if (format === "name") formattedString = this.toName();
            if (format === "hsl") formattedString = this.toHslString();
            if (format === "hsv") formattedString = this.toHsvString();
            return formattedString || this.toHexString();
        },
        clone: function() {
            return tinycolor(this.toString());
        },
        _applyModification: function(fn, args) {
            var color = fn.apply(null, [
                this
            ].concat([].slice.call(args)));
            this._r = color._r;
            this._g = color._g;
            this._b = color._b;
            this.setAlpha(color._a);
            return this;
        },
        lighten: function() {
            return this._applyModification(lighten, arguments);
        },
        brighten: function() {
            return this._applyModification(brighten, arguments);
        },
        darken: function() {
            return this._applyModification(darken, arguments);
        },
        desaturate: function() {
            return this._applyModification(desaturate, arguments);
        },
        saturate: function() {
            return this._applyModification(saturate, arguments);
        },
        greyscale: function() {
            return this._applyModification(greyscale, arguments);
        },
        spin: function() {
            return this._applyModification(spin, arguments);
        },
        _applyCombination: function(fn, args) {
            return fn.apply(null, [
                this
            ].concat([].slice.call(args)));
        },
        analogous: function() {
            return this._applyCombination(analogous, arguments);
        },
        complement: function() {
            return this._applyCombination(complement, arguments);
        },
        monochromatic: function() {
            return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function() {
            return this._applyCombination(splitcomplement, arguments);
        },
        triad: function() {
            return this._applyCombination(triad, arguments);
        },
        tetrad: function() {
            return this._applyCombination(tetrad, arguments);
        }
    };
    // If input is an object, force 1 into "1.0" to handle ratios properly
    // String input requires "1.0" as input, so 1 will be treated as 1
    tinycolor.fromRatio = function(color, opts) {
        if (typeof color == "object") {
            var newColor = {
            };
            for(var i in color)if (color.hasOwnProperty(i)) {
                if (i === "a") newColor[i] = color[i];
                else newColor[i] = convertToPercentage(color[i]);
            }
            color = newColor;
        }
        return tinycolor(color, opts);
    };
    // Given a string or object, convert that input to RGB
    // Possible string inputs:
    //
    //     "red"
    //     "#f00" or "f00"
    //     "#ff0000" or "ff0000"
    //     "#ff000000" or "ff000000"
    //     "rgb 255 0 0" or "rgb (255, 0, 0)"
    //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
    //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
    //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
    //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
    //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
    //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
    //
    function inputToRGB(color) {
        var rgb = {
            r: 0,
            g: 0,
            b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color == "string") color = stringInputToObject(color);
        if (typeof color == "object") {
            if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                s = convertToPercentage(color.s);
                v = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, s, v);
                ok = true;
                format = "hsv";
            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                s = convertToPercentage(color.s);
                l = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, s, l);
                ok = true;
                format = "hsl";
            }
            if (color.hasOwnProperty("a")) a = color.a;
        }
        a = boundAlpha(a);
        return {
            ok: ok,
            format: color.format || format,
            r: mathMin(255, mathMax(rgb.r, 0)),
            g: mathMin(255, mathMax(rgb.g, 0)),
            b: mathMin(255, mathMax(rgb.b, 0)),
            a: a
        };
    }
    // Conversion Functions
    // --------------------
    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
    // `rgbToRgb`
    // Handle bounds / percentage checking to conform to CSS color spec
    // <http://www.w3.org/TR/css3-color/>
    // *Assumes:* r, g, b in [0, 255] or [0, 1]
    // *Returns:* { r, g, b } in [0, 255]
    function rgbToRgb(r, g, b) {
        return {
            r: bound01(r, 255) * 255,
            g: bound01(g, 255) * 255,
            b: bound01(b, 255) * 255
        };
    }
    // `rgbToHsl`
    // Converts an RGB color value to HSL.
    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
    // *Returns:* { h, s, l } in [0,1]
    function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) h = s = 0; // achromatic
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch(max){
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    }
    // `hslToRgb`
    // Converts an HSL color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]
    function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 0.5) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }
        if (s === 0) r = g = b = l; // achromatic
        else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }
    // `rgbToHsv`
    // Converts an RGB color value to HSV
    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
    // *Returns:* { h, s, v } in [0,1]
    function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) h = 0; // achromatic
        else {
            switch(max){
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            v: v
        };
    }
    // `hsvToRgb`
    // Converts an HSV color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]
    function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math1.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [
            v,
            q,
            p,
            p,
            t,
            v
        ][mod], g = [
            t,
            v,
            v,
            q,
            p,
            p
        ][mod], b = [
            p,
            p,
            t,
            v,
            v,
            q
        ][mod];
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    }
    // `rgbToHex`
    // Converts an RGB color to hex
    // Assumes r, g, and b are contained in the set [0, 255]
    // Returns a 3 or 6 character hex
    function rgbToHex(r, g, b, allow3Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        // Return a 3 character hex if possible
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        return hex.join("");
    }
    // `rgbaToHex`
    // Converts an RGBA color plus alpha transparency to hex
    // Assumes r, g, b are contained in the set [0, 255] and
    // a in [0, 1]. Returns a 4 or 8 character rgba hex
    function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16)),
            pad2(convertDecimalToHex(a))
        ];
        // Return a 4 character hex if possible
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        return hex.join("");
    }
    // `rgbaToArgbHex`
    // Converts an RGBA color to an ARGB Hex8 string
    // Rarely used, but required for "toFilter()"
    function rgbaToArgbHex(r, g, b, a) {
        var hex = [
            pad2(convertDecimalToHex(a)),
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        return hex.join("");
    }
    // `equals`
    // Can be called with any tinycolor input
    tinycolor.equals = function(color1, color2) {
        if (!color1 || !color2) return false;
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
    };
    tinycolor.random = function() {
        return tinycolor.fromRatio({
            r: mathRandom(),
            g: mathRandom(),
            b: mathRandom()
        });
    };
    // Modification Functions
    // ----------------------
    // Thanks to less.js for some of the basics here
    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
    function desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function greyscale(color) {
        return tinycolor(color).desaturate(100);
    }
    function lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    function brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
    }
    function darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
    // Values outside of this range will be wrapped into this range.
    function spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
    }
    // Combination Functions
    // ---------------------
    // Thanks to jQuery xColor for some of the ideas behind these
    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
    function complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
    }
    function triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 120) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 240) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 90) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 180) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 270) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({
                h: (h + 72) % 360,
                s: hsl.s,
                l: hsl.l
            }),
            tinycolor({
                h: (h + 216) % 360,
                s: hsl.s,
                l: hsl.l
            })
        ];
    }
    function analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [
            tinycolor(color)
        ];
        for(hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;){
            hsl.h = (hsl.h + part) % 360;
            ret.push(tinycolor(hsl));
        }
        return ret;
    }
    function monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while(results--){
            ret.push(tinycolor({
                h: h,
                s: s,
                v: v
            }));
            v = (v + modification) % 1;
        }
        return ret;
    }
    // Utility Functions
    // ---------------------
    tinycolor.mix = function(color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
            r: (rgb2.r - rgb1.r) * p + rgb1.r,
            g: (rgb2.g - rgb1.g) * p + rgb1.g,
            b: (rgb2.b - rgb1.b) * p + rgb1.b,
            a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
    };
    // Readability Functions
    // ---------------------
    // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
    // `contrast`
    // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
    tinycolor.readability = function(color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math1.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math1.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
    };
    // `isReadable`
    // Ensure that foreground and background color combinations meet WCAG2 guidelines.
    // The third argument is an optional Object.
    //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
    //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
    // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
    // *Example*
    //    tinycolor.isReadable("#000", "#111") => false
    //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
    tinycolor.isReadable = function(color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch(wcag2Parms.level + wcag2Parms.size){
            case "AAsmall":
            case "AAAlarge":
                out = readability >= 4.5;
                break;
            case "AAlarge":
                out = readability >= 3;
                break;
            case "AAAsmall":
                out = readability >= 7;
                break;
        }
        return out;
    };
    // `mostReadable`
    // Given a base color and a list of possible foreground or background
    // colors for that base, returns the most readable color.
    // Optionally returns Black or White if the most readable color is unreadable.
    // *Example*
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
    tinycolor.mostReadable = function(baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {
        };
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for(var i = 0; i < colorList.length; i++){
            readability = tinycolor.readability(baseColor, colorList[i]);
            if (readability > bestScore) {
                bestScore = readability;
                bestColor = tinycolor(colorList[i]);
            }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {
            "level": level,
            "size": size
        }) || !includeFallbackColors) return bestColor;
        else {
            args.includeFallbackColors = false;
            return tinycolor.mostReadable(baseColor, [
                "#fff",
                "#000"
            ], args);
        }
    };
    // Big List of Colors
    // ------------------
    // <http://www.w3.org/TR/css3-color/#svg-color>
    var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
    };
    // Make it easy to access colors via `hexNames[hex]`
    var hexNames = tinycolor.hexNames = flip(names);
    // Utilities
    // ---------
    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
    function flip(o) {
        var flipped = {
        };
        for(var i in o)if (o.hasOwnProperty(i)) flipped[o[i]] = i;
        return flipped;
    }
    // Return a valid alpha value [0,1] with all invalid values being set to 1
    function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) a = 1;
        return a;
    }
    // Take input from [0, n] and return it as [0, 1]
    function bound01(n, max) {
        if (isOnePointZero(n)) n = "100%";
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));
        // Automatically convert percentage into number
        if (processPercent) n = parseInt(n * max, 10) / 100;
        // Handle floating point rounding errors
        if (Math1.abs(n - max) < 0.000001) return 1;
        // Convert into [0, 1] range if it isn't already
        return n % max / parseFloat(max);
    }
    // Force a number between 0 and 1
    function clamp01(val) {
        return mathMin(1, mathMax(0, val));
    }
    // Parse a base-16 hex value into a base-10 integer
    function parseIntFromHex(val) {
        return parseInt(val, 16);
    }
    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
    function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
    }
    // Check to see if string passed in is a percentage
    function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
    }
    // Force a hex value to have 2 characters
    function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
    }
    // Replace a decimal with it's percentage value
    function convertToPercentage(n) {
        if (n <= 1) n = n * 100 + "%";
        return n;
    }
    // Converts a decimal to a hex value
    function convertDecimalToHex(d) {
        return Math1.round(parseFloat(d) * 255).toString(16);
    }
    // Converts a hex value to a decimal
    function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
    }
    var matchers = function() {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        // <http://www.w3.org/TR/css3-values/#number-value>
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
            CSS_UNIT: new RegExp(CSS_UNIT),
            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
            hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
    }();
    // `isValidCSSUnit`
    // Take in a single string / number and check to see if it looks like a CSS unit
    // (see `matchers` above for definition).
    function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
    }
    // `stringInputToObject`
    // Permissive string parsing.  Take in a number of formats, and output an object
    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
    function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;
        if (names[color]) {
            color = names[color];
            named = true;
        } else if (color == 'transparent') return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
        };
        // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.
        var match;
        if (match = matchers.rgb.exec(color)) return {
            r: match[1],
            g: match[2],
            b: match[3]
        };
        if (match = matchers.rgba.exec(color)) return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
        };
        if (match = matchers.hsl.exec(color)) return {
            h: match[1],
            s: match[2],
            l: match[3]
        };
        if (match = matchers.hsla.exec(color)) return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
        };
        if (match = matchers.hsv.exec(color)) return {
            h: match[1],
            s: match[2],
            v: match[3]
        };
        if (match = matchers.hsva.exec(color)) return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
        };
        if (match = matchers.hex8.exec(color)) return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
        if (match = matchers.hex6.exec(color)) return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
        if (match = matchers.hex4.exec(color)) return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
        if (match = matchers.hex3.exec(color)) return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
        return false;
    }
    function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || {
            "level": "AA",
            "size": "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") level = "AA";
        if (size !== "small" && size !== "large") size = "small";
        return {
            "level": level,
            "size": size
        };
    }
    // Node: Export function
    if (typeof module !== "undefined" && module.exports) module.exports = tinycolor;
    else if (typeof define === 'function' && define.amd) define(function() {
        return tinycolor;
    });
    else window.tinycolor = tinycolor;
})(Math);

},{}],"60LEw":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.mode = mode;
exports.orient = orient;
var _utils = require("@chakra-ui/utils");
exports.runIfFn = _utils.runIfFn;
function mode(light, dark) {
    return function(props) {
        return props.colorMode === "dark" ? dark : light;
    };
}
function orient(options) {
    var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
    if (!orientation) return {
    };
    return orientation === "vertical" ? vertical : horizontal;
}

},{"@chakra-ui/utils":"3364O"}],"noLWO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createBreakpoints = void 0;
var _utils = require("@chakra-ui/utils");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var createBreakpoints = function createBreakpoints1(config) {
    _utils.warn({
        condition: true,
        message: [
            "[chakra-ui]: createBreakpoints(...) will be deprecated pretty soon",
            "simply pass the breakpoints as an object. Remove the createBreakpoint(..) call"
        ].join("")
    });
    return _extends({
        base: "0em"
    }, config);
};
exports.createBreakpoints = createBreakpoints;

},{"@chakra-ui/utils":"3364O"}],"1HzwM":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var _sizes = _interopRequireDefault(require("../foundations/sizes"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
var parts = [
    "container",
    "excessLabel",
    "badge",
    "label"
];
function baseStyleBadge(props) {
    return {
        transform: "translate(25%, 25%)",
        borderRadius: "full",
        border: "0.2em solid",
        borderColor: _themeTools.mode("white", "gray.800")(props)
    };
}
function baseStyleExcessLabel(props) {
    return {
        bg: _themeTools.mode("gray.200", "whiteAlpha.400")(props)
    };
}
function baseStyleContainer(props) {
    var name = props.name, theme = props.theme;
    var bg = name ? _themeTools.randomColor({
        string: name
    }) : "gray.400";
    var isBgDark = _themeTools.isDark(bg)(theme);
    var color = "white";
    if (!isBgDark) color = "gray.800";
    var borderColor = _themeTools.mode("white", "gray.800")(props);
    return {
        bg: bg,
        color: color,
        borderColor: borderColor,
        verticalAlign: "top"
    };
}
var baseStyle = function baseStyle1(props) {
    return {
        badge: baseStyleBadge(props),
        excessLabel: baseStyleExcessLabel(props),
        container: baseStyleContainer(props)
    };
};
function getSize(size) {
    var themeSize = _sizes["default"][size];
    return {
        container: {
            width: size,
            height: size,
            fontSize: "calc(" + (themeSize != null ? themeSize : size) + " / 2.5)"
        },
        excessLabel: {
            width: size,
            height: size
        },
        label: {
            fontSize: "calc(" + (themeSize != null ? themeSize : size) + " / 2.5)",
            lineHeight: size !== "100%" ? themeSize != null ? themeSize : size : undefined
        }
    };
}
var sizes = {
    "2xs": getSize("4"),
    xs: getSize("6"),
    sm: getSize("8"),
    md: getSize("12"),
    lg: getSize("16"),
    xl: getSize("24"),
    "2xl": getSize("32"),
    full: getSize("100%")
};
var defaultProps = {
    size: "md"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR","../foundations/sizes":"4le4A"}],"4le4A":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _spacing = require("./spacing");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var largeSizes = {
    max: "max-content",
    min: "min-content",
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    "8xl": "90rem"
};
var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
};
var sizes = _extends({
}, _spacing.spacing, largeSizes, {
    container: container
});
/**
 * @deprecated
 * You can derive the Sizes type from the DefaultChakraTheme
 *
 * type Sizes = DefaultChakraTheme['sizes']
 */ var _default = sizes;
exports["default"] = _default;

},{"./spacing":"2dzff"}],"2dzff":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.spacing = void 0;
var spacing = {
    px: "1px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
};
/**
 * @deprecated
 * Spacing tokens are a part of DefaultChakraTheme['sizes']
 */ exports.spacing = spacing;

},{}],"52XAW":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var baseStyle = {
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold"
};
function variantSolid(props) {
    var c = props.colorScheme, theme = props.theme;
    var dark = _themeTools.transparentize(c + ".500", 0.6)(theme);
    return {
        bg: _themeTools.mode(c + ".500", dark)(props),
        color: _themeTools.mode("white", "whiteAlpha.800")(props)
    };
}
function variantSubtle(props) {
    var c = props.colorScheme, theme = props.theme;
    var darkBg = _themeTools.transparentize(c + ".200", 0.16)(theme);
    return {
        bg: _themeTools.mode(c + ".100", darkBg)(props),
        color: _themeTools.mode(c + ".800", c + ".200")(props)
    };
}
function variantOutline(props) {
    var c = props.colorScheme, theme = props.theme;
    var darkColor = _themeTools.transparentize(c + ".200", 0.8)(theme);
    var lightColor = _themeTools.getColor(theme, c + ".500");
    var color = _themeTools.mode(lightColor, darkColor)(props);
    return {
        color: color,
        boxShadow: "inset 0 0 0px 1px " + color
    };
}
var variants = {
    solid: variantSolid,
    subtle: variantSubtle,
    outline: variantOutline
};
var defaultProps = {
    variant: "subtle",
    colorScheme: "gray"
};
var _default = {
    baseStyle: baseStyle,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"3xypV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var parts = [
    "container",
    "item",
    "link",
    "separator"
];
var baseStyleLink = {
    transition: "all 0.15s ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
        textDecoration: "underline"
    },
    _focus: {
        boxShadow: "outline"
    }
};
var baseStyle = {
    link: baseStyleLink
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"6t1dc":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var baseStyle = {
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    _focus: {
        boxShadow: "outline"
    },
    _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
    },
    _hover: {
        _disabled: {
            bg: "initial"
        }
    }
};
function variantGhost(props) {
    var c = props.colorScheme, theme = props.theme;
    if (c === "gray") return {
        color: _themeTools.mode("inherit", "whiteAlpha.900")(props),
        _hover: {
            bg: _themeTools.mode("gray.100", "whiteAlpha.200")(props)
        },
        _active: {
            bg: _themeTools.mode("gray.200", "whiteAlpha.300")(props)
        }
    };
    var darkHoverBg = _themeTools.transparentize(c + ".200", 0.12)(theme);
    var darkActiveBg = _themeTools.transparentize(c + ".200", 0.24)(theme);
    return {
        color: _themeTools.mode(c + ".600", c + ".200")(props),
        bg: "transparent",
        _hover: {
            bg: _themeTools.mode(c + ".50", darkHoverBg)(props)
        },
        _active: {
            bg: _themeTools.mode(c + ".100", darkActiveBg)(props)
        }
    };
}
function variantOutline(props) {
    var c = props.colorScheme;
    var borderColor = _themeTools.mode("gray.200", "whiteAlpha.300")(props);
    return _extends({
        border: "1px solid",
        borderColor: c === "gray" ? borderColor : "currentColor"
    }, variantGhost(props));
}
/** Accessible color overrides for less accessible colors. */ var accessibleColorMap = {
    yellow: {
        bg: "yellow.400",
        color: "black",
        hoverBg: "yellow.500",
        activeBg: "yellow.600"
    },
    cyan: {
        bg: "cyan.400",
        color: "black",
        hoverBg: "cyan.500",
        activeBg: "cyan.600"
    }
};
function variantSolid(props) {
    var c = props.colorScheme;
    if (c === "gray") {
        var _bg = _themeTools.mode("gray.100", "whiteAlpha.200")(props);
        return {
            bg: _bg,
            _hover: {
                bg: _themeTools.mode("gray.200", "whiteAlpha.300")(props),
                _disabled: {
                    bg: _bg
                }
            },
            _active: {
                bg: _themeTools.mode("gray.300", "whiteAlpha.400")(props)
            }
        };
    }
    var _ref = accessibleColorMap[c] || {
    }, _ref$bg = _ref.bg, bg = _ref$bg === void 0 ? c + ".500" : _ref$bg, _ref$color = _ref.color, color = _ref$color === void 0 ? "white" : _ref$color, _ref$hoverBg = _ref.hoverBg, hoverBg = _ref$hoverBg === void 0 ? c + ".600" : _ref$hoverBg, _ref$activeBg = _ref.activeBg, activeBg = _ref$activeBg === void 0 ? c + ".700" : _ref$activeBg;
    var background = _themeTools.mode(bg, c + ".200")(props);
    return {
        bg: background,
        color: _themeTools.mode(color, "gray.800")(props),
        _hover: {
            bg: _themeTools.mode(hoverBg, c + ".300")(props),
            _disabled: {
                bg: background
            }
        },
        _active: {
            bg: _themeTools.mode(activeBg, c + ".400")(props)
        }
    };
}
function variantLink(props) {
    var c = props.colorScheme;
    return {
        padding: 0,
        height: "auto",
        lineHeight: "normal",
        verticalAlign: "baseline",
        color: _themeTools.mode(c + ".500", c + ".200")(props),
        _hover: {
            textDecoration: "underline",
            _disabled: {
                textDecoration: "none"
            }
        },
        _active: {
            color: _themeTools.mode(c + ".700", c + ".500")(props)
        }
    };
}
var variantUnstyled = {
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: 0,
    p: 0
};
var variants = {
    ghost: variantGhost,
    outline: variantOutline,
    solid: variantSolid,
    link: variantLink,
    unstyled: variantUnstyled
};
var sizes = {
    lg: {
        h: 12,
        minW: 12,
        fontSize: "lg",
        px: 6
    },
    md: {
        h: 10,
        minW: 10,
        fontSize: "md",
        px: 4
    },
    sm: {
        h: 8,
        minW: 8,
        fontSize: "sm",
        px: 3
    },
    xs: {
        h: 6,
        minW: 6,
        fontSize: "xs",
        px: 2
    }
};
var defaultProps = {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
};
var _default = {
    baseStyle: baseStyle,
    variants: variants,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"6uTqT":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "container",
    "control",
    "label",
    "icon"
];
function baseStyleControl(props) {
    var c = props.colorScheme;
    return {
        w: "100%",
        transition: "box-shadow 250ms",
        border: "2px solid",
        borderRadius: "sm",
        borderColor: "inherit",
        color: "white",
        _checked: {
            bg: _themeTools.mode(c + ".500", c + ".200")(props),
            borderColor: _themeTools.mode(c + ".500", c + ".200")(props),
            color: _themeTools.mode("white", "gray.900")(props),
            _hover: {
                bg: _themeTools.mode(c + ".600", c + ".300")(props),
                borderColor: _themeTools.mode(c + ".600", c + ".300")(props)
            },
            _disabled: {
                borderColor: _themeTools.mode("gray.200", "transparent")(props),
                bg: _themeTools.mode("gray.200", "whiteAlpha.300")(props),
                color: _themeTools.mode("gray.500", "whiteAlpha.500")(props)
            }
        },
        _indeterminate: {
            bg: _themeTools.mode(c + ".500", c + ".200")(props),
            borderColor: _themeTools.mode(c + ".500", c + ".200")(props),
            color: _themeTools.mode("white", "gray.900")(props)
        },
        _disabled: {
            bg: _themeTools.mode("gray.100", "whiteAlpha.100")(props),
            borderColor: _themeTools.mode("gray.100", "transparent")(props)
        },
        _focus: {
            boxShadow: "outline"
        },
        _invalid: {
            borderColor: _themeTools.mode("red.500", "red.300")(props)
        }
    };
}
var baseStyleLabel = {
    userSelect: "none",
    _disabled: {
        opacity: 0.4
    }
};
var baseStyle = function baseStyle1(props) {
    return {
        control: baseStyleControl(props),
        label: baseStyleLabel
    };
};
var sizes = {
    sm: {
        control: {
            h: 3,
            w: 3
        },
        label: {
            fontSize: "sm"
        },
        icon: {
            fontSize: "0.45rem"
        }
    },
    md: {
        control: {
            w: 4,
            h: 4
        },
        label: {
            fontSize: "md"
        },
        icon: {
            fontSize: "0.625rem"
        }
    },
    lg: {
        control: {
            w: 5,
            h: 5
        },
        label: {
            fontSize: "lg"
        },
        icon: {
            fontSize: "0.625rem"
        }
    }
};
var defaultProps = {
    size: "md",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"1tX7p":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function baseStyle(props) {
    var hoverBg = _themeTools.mode("blackAlpha.100", "whiteAlpha.100")(props);
    var activeBg = _themeTools.mode("blackAlpha.200", "whiteAlpha.200")(props);
    return {
        borderRadius: "md",
        transition: "all 0.2s",
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed",
            boxShadow: "none"
        },
        _hover: {
            bg: hoverBg
        },
        _active: {
            bg: activeBg
        },
        _focus: {
            boxShadow: "outline"
        }
    };
}
var sizes = {
    lg: {
        w: "40px",
        h: "40px",
        fontSize: "16px"
    },
    md: {
        w: "32px",
        h: "32px",
        fontSize: "12px"
    },
    sm: {
        w: "24px",
        h: "24px",
        fontSize: "10px"
    }
};
var defaultProps = {
    size: "md"
};
var _default = {
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"1MKUm":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _badge = _interopRequireDefault(require("./badge"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
var variants = _badge["default"].variants, defaultProps = _badge["default"].defaultProps;
var baseStyle = {
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm"
};
var _default = {
    baseStyle: baseStyle,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"./badge":"52XAW"}],"2rzJe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    w: "100%",
    mx: "auto",
    maxW: "60ch",
    px: "1rem"
};
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"1fxH1":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    opacity: 0.6,
    borderColor: "inherit"
};
var variantSolid = {
    borderStyle: "solid"
};
var variantDashed = {
    borderStyle: "dashed"
};
var variants = {
    solid: variantSolid,
    dashed: variantDashed
};
var defaultProps = {
    variant: "solid"
};
var _default = {
    baseStyle: baseStyle,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{}],"3tOdp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var _modal = _interopRequireDefault(require("./modal"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = _modal["default"].parts;
/**
 * Since the `maxWidth` prop references theme.sizes internally,
 * we can leverage that to size our modals.
 */ function getSize(value) {
    if (value === "full") return {
        dialog: {
            maxW: "100vw",
            h: "100vh"
        }
    };
    return {
        dialog: {
            maxW: value
        }
    };
}
var baseStyleOverlay = {
    bg: "blackAlpha.600",
    zIndex: "overlay"
};
var baseStyleDialogContainer = {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
};
function baseStyleDialog(props) {
    var isFullHeight = props.isFullHeight;
    return _extends({
    }, isFullHeight && {
        height: "100vh"
    }, {
        zIndex: "modal",
        maxH: "100vh",
        bg: _themeTools.mode("white", "gray.700")(props),
        color: "inherit",
        boxShadow: _themeTools.mode("lg", "dark-lg")(props)
    });
}
var baseStyleHeader = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
};
var baseStyleCloseButton = {
    position: "absolute",
    top: 2,
    insetEnd: 3
};
var baseStyleBody = {
    px: 6,
    py: 2,
    flex: 1,
    overflow: "auto"
};
var baseStyleFooter = {
    px: 6,
    py: 4
};
var baseStyle = function baseStyle1(props) {
    return {
        overlay: baseStyleOverlay,
        dialogContainer: baseStyleDialogContainer,
        dialog: baseStyleDialog(props),
        header: baseStyleHeader,
        closeButton: baseStyleCloseButton,
        body: baseStyleBody,
        footer: baseStyleFooter
    };
};
var sizes = {
    xs: getSize("xs"),
    sm: getSize("md"),
    md: getSize("lg"),
    lg: getSize("2xl"),
    xl: getSize("4xl"),
    full: getSize("full")
};
var defaultProps = {
    size: "xs"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR","./modal":"4Roa1"}],"4Roa1":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "overlay",
    "dialogContainer",
    "dialog",
    "header",
    "closeButton",
    "body",
    "footer"
];
var baseStyleOverlay = {
    bg: "blackAlpha.600",
    zIndex: "modal"
};
function baseStyleDialogContainer(props) {
    var isCentered = props.isCentered, scrollBehavior = props.scrollBehavior;
    return {
        display: "flex",
        zIndex: "modal",
        justifyContent: "center",
        alignItems: isCentered ? "center" : "flex-start",
        overflow: scrollBehavior === "inside" ? "hidden" : "auto"
    };
}
function baseStyleDialog(props) {
    var scrollBehavior = props.scrollBehavior;
    return {
        borderRadius: "md",
        bg: _themeTools.mode("white", "gray.700")(props),
        color: "inherit",
        my: "3.75rem",
        zIndex: "modal",
        maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : undefined,
        boxShadow: _themeTools.mode("lg", "dark-lg")(props)
    };
}
var baseStyleHeader = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
};
var baseStyleCloseButton = {
    position: "absolute",
    top: 2,
    insetEnd: 3
};
function baseStyleBody(props) {
    var scrollBehavior = props.scrollBehavior;
    return {
        px: 6,
        py: 2,
        flex: 1,
        overflow: scrollBehavior === "inside" ? "auto" : undefined
    };
}
var baseStyleFooter = {
    px: 6,
    py: 4
};
var baseStyle = function baseStyle1(props) {
    return {
        overlay: baseStyleOverlay,
        dialogContainer: baseStyleDialogContainer(props),
        dialog: baseStyleDialog(props),
        header: baseStyleHeader,
        closeButton: baseStyleCloseButton,
        body: baseStyleBody(props),
        footer: baseStyleFooter
    };
};
/**
 * Since the `maxWidth` prop references theme.sizes internally,
 * we can leverage that to size our modals.
 */ function getSize(value) {
    if (value === "full") return {
        dialog: {
            maxW: "100vw",
            minH: "100vh"
        }
    };
    return {
        dialog: {
            maxW: value
        }
    };
}
var sizes = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg"),
    xl: getSize("xl"),
    "2xl": getSize("2xl"),
    "3xl": getSize("3xl"),
    "4xl": getSize("4xl"),
    "5xl": getSize("5xl"),
    "6xl": getSize("6xl"),
    full: getSize("full")
};
var defaultProps = {
    size: "md"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"DIZow":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var parts = [
    "preview",
    "input"
];
var baseStylePreview = {
    borderRadius: "md",
    py: "3px",
    transition: "all 0.2s"
};
var baseStyleInput = {
    borderRadius: "md",
    py: "3px",
    transition: "all 0.2s",
    width: "full",
    _focus: {
        boxShadow: "outline"
    },
    _placeholder: {
        opacity: 0.6
    }
};
var baseStyle = {
    preview: baseStylePreview,
    input: baseStyleInput
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"1T8Ri":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "requiredIndicator",
    "helperText"
];
function baseStyleRequiredIndicator(props) {
    return {
        marginStart: 1,
        color: _themeTools.mode("red.500", "red.300")(props)
    };
}
function baseStyleHelperText(props) {
    return {
        mt: 2,
        color: _themeTools.mode("gray.500", "whiteAlpha.600")(props),
        lineHeight: "normal",
        fontSize: "sm"
    };
}
var baseStyle = function baseStyle1(props) {
    return {
        requiredIndicator: baseStyleRequiredIndicator(props),
        helperText: baseStyleHelperText(props)
    };
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"6JBFp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    fontSize: "md",
    marginEnd: 3,
    mb: 2,
    fontWeight: "medium",
    transition: "all 0.2s",
    opacity: 1,
    _disabled: {
        opacity: 0.4
    }
};
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"6paX8":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    fontFamily: "heading",
    fontWeight: "bold"
};
var sizes = {
    "4xl": {
        fontSize: [
            "6xl",
            null,
            "7xl"
        ],
        lineHeight: 1
    },
    "3xl": {
        fontSize: [
            "5xl",
            null,
            "6xl"
        ],
        lineHeight: 1
    },
    "2xl": {
        fontSize: [
            "4xl",
            null,
            "5xl"
        ],
        lineHeight: [
            1.2,
            null,
            1
        ]
    },
    xl: {
        fontSize: [
            "3xl",
            null,
            "4xl"
        ],
        lineHeight: [
            1.33,
            null,
            1.2
        ]
    },
    lg: {
        fontSize: [
            "2xl",
            null,
            "3xl"
        ],
        lineHeight: [
            1.33,
            null,
            1.2
        ]
    },
    md: {
        fontSize: "xl",
        lineHeight: 1.2
    },
    sm: {
        fontSize: "md",
        lineHeight: 1.2
    },
    xs: {
        fontSize: "sm",
        lineHeight: 1.2
    }
};
var defaultProps = {
    size: "xl"
};
var _default = {
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{}],"4XBF6":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "field",
    "addon"
];
var baseStyle = {
    field: {
        width: "100%",
        minWidth: 0,
        outline: 0,
        position: "relative",
        appearance: "none",
        transition: "all 0.2s"
    }
};
var size = {
    lg: {
        fontSize: "lg",
        px: 4,
        h: 12,
        borderRadius: "md"
    },
    md: {
        fontSize: "md",
        px: 4,
        h: 10,
        borderRadius: "md"
    },
    sm: {
        fontSize: "sm",
        px: 3,
        h: 8,
        borderRadius: "sm"
    },
    xs: {
        fontSize: "xs",
        px: 2,
        h: 6,
        borderRadius: "sm"
    }
};
var sizes = {
    lg: {
        field: size.lg,
        addon: size.lg
    },
    md: {
        field: size.md,
        addon: size.md
    },
    sm: {
        field: size.sm,
        addon: size.sm
    },
    xs: {
        field: size.xs,
        addon: size.xs
    }
};
function getDefaults(props) {
    var fc = props.focusBorderColor, ec = props.errorBorderColor;
    return {
        focusBorderColor: fc || _themeTools.mode("blue.500", "blue.300")(props),
        errorBorderColor: ec || _themeTools.mode("red.500", "red.300")(props)
    };
}
function variantOutline(props) {
    var theme = props.theme;
    var _getDefaults = getDefaults(props), fc = _getDefaults.focusBorderColor, ec = _getDefaults.errorBorderColor;
    return {
        field: {
            border: "1px solid",
            borderColor: "inherit",
            bg: "inherit",
            _hover: {
                borderColor: _themeTools.mode("gray.300", "whiteAlpha.400")(props)
            },
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _disabled: {
                opacity: 0.4,
                cursor: "not-allowed"
            },
            _invalid: {
                borderColor: _themeTools.getColor(theme, ec),
                boxShadow: "0 0 0 1px " + _themeTools.getColor(theme, ec)
            },
            _focus: {
                zIndex: 1,
                borderColor: _themeTools.getColor(theme, fc),
                boxShadow: "0 0 0 1px " + _themeTools.getColor(theme, fc)
            }
        },
        addon: {
            border: "1px solid",
            borderColor: _themeTools.mode("inherit", "whiteAlpha.50")(props),
            bg: _themeTools.mode("gray.100", "whiteAlpha.300")(props)
        }
    };
}
function variantFilled(props) {
    var theme = props.theme;
    var _getDefaults2 = getDefaults(props), fc = _getDefaults2.focusBorderColor, ec = _getDefaults2.errorBorderColor;
    return {
        field: {
            border: "2px solid",
            borderColor: "transparent",
            bg: _themeTools.mode("gray.100", "whiteAlpha.50")(props),
            _hover: {
                bg: _themeTools.mode("gray.200", "whiteAlpha.100")(props)
            },
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _disabled: {
                opacity: 0.4,
                cursor: "not-allowed"
            },
            _invalid: {
                borderColor: _themeTools.getColor(theme, ec)
            },
            _focus: {
                bg: "transparent",
                borderColor: _themeTools.getColor(theme, fc)
            }
        },
        addon: {
            border: "2px solid",
            borderColor: "transparent",
            bg: _themeTools.mode("gray.100", "whiteAlpha.50")(props)
        }
    };
}
function variantFlushed(props) {
    var theme = props.theme;
    var _getDefaults3 = getDefaults(props), fc = _getDefaults3.focusBorderColor, ec = _getDefaults3.errorBorderColor;
    return {
        field: {
            borderBottom: "1px solid",
            borderColor: "inherit",
            borderRadius: 0,
            px: 0,
            bg: "transparent",
            _readOnly: {
                boxShadow: "none !important",
                userSelect: "all"
            },
            _invalid: {
                borderColor: _themeTools.getColor(theme, ec),
                boxShadow: "0px 1px 0px 0px " + _themeTools.getColor(theme, ec)
            },
            _focus: {
                borderColor: _themeTools.getColor(theme, fc),
                boxShadow: "0px 1px 0px 0px " + _themeTools.getColor(theme, fc)
            }
        },
        addon: {
            borderBottom: "2px solid",
            borderColor: "inherit",
            borderRadius: 0,
            px: 0,
            bg: "transparent"
        }
    };
}
var variantUnstyled = {
    field: {
        bg: "transparent",
        px: 0,
        height: "auto"
    },
    addon: {
        bg: "transparent",
        px: 0,
        height: "auto"
    }
};
var variants = {
    outline: variantOutline,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled
};
var defaultProps = {
    size: "md",
    variant: "outline"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"plMZe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function baseStyle(props) {
    return {
        bg: _themeTools.mode("gray.100", "whiteAlpha")(props),
        borderRadius: "md",
        borderWidth: "1px",
        borderBottomWidth: "3px",
        fontSize: "0.8em",
        fontWeight: "bold",
        lineHeight: "normal",
        px: "0.4em",
        whiteSpace: "nowrap"
    };
}
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"4o2kn":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    transition: "all 0.15s ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
        textDecoration: "underline"
    },
    _focus: {
        boxShadow: "outline"
    }
};
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"5gVEa":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var parts = [
    "container",
    "item",
    "icon"
];
var baseStyleContainer = {
};
var baseStyleItem = {
};
var baseStyleIcon = {
    marginEnd: "0.5rem",
    display: "inline",
    verticalAlign: "text-bottom"
};
var baseStyle = {
    container: baseStyleContainer,
    item: baseStyleItem,
    icon: baseStyleIcon
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{}],"6NT8U":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "item",
    "command",
    "list",
    "button",
    "groupTitle",
    "divider"
];
function baseStyleList(props) {
    return {
        bg: _themeTools.mode("#fff", "gray.700")(props),
        boxShadow: _themeTools.mode("sm", "dark-lg")(props),
        color: "inherit",
        minW: "3xs",
        py: "2",
        zIndex: 1,
        borderRadius: "md",
        borderWidth: "1px"
    };
}
function baseStyleItem(props) {
    return {
        py: "0.4rem",
        px: "0.8rem",
        transition: "background 50ms ease-in 0s",
        _focus: {
            bg: _themeTools.mode("gray.100", "whiteAlpha.100")(props)
        },
        _active: {
            bg: _themeTools.mode("gray.200", "whiteAlpha.200")(props)
        },
        _expanded: {
            bg: _themeTools.mode("gray.100", "whiteAlpha.100")(props)
        },
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed"
        }
    };
}
var baseStyleGroupTitle = {
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
};
var baseStyleCommand = {
    opacity: 0.6
};
var baseStyleDivider = {
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "0.5rem",
    opacity: 0.6
};
var baseStyle = function baseStyle1(props) {
    return {
        list: baseStyleList(props),
        item: baseStyleItem(props),
        groupTitle: baseStyleGroupTitle,
        command: baseStyleCommand,
        divider: baseStyleDivider
    };
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"3nGkS":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var _input = _interopRequireDefault(require("./input"));
var _typography = _interopRequireDefault(require("../foundations/typography"));
var _Input$baseStyle;
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "root",
    "field",
    "stepper",
    "stepperGroup"
];
var variants = _input["default"].variants, defaultProps = _input["default"].defaultProps;
var baseStyleRoot = {
    "--number-input-stepper-width": "24px",
    "--number-input-field-padding": "calc(var(--number-input-stepper-width) + 0.5rem)"
};
var baseStyleField = (_Input$baseStyle = _input["default"].baseStyle) == null ? void 0 : _Input$baseStyle.field;
var baseStyleStepperGroup = {
    width: "var(--number-input-stepper-width)"
};
function baseStyleStepper(props) {
    return {
        borderStart: "1px solid",
        borderStartColor: _themeTools.mode("inherit", "whiteAlpha.300")(props),
        color: _themeTools.mode("inherit", "whiteAlpha.800")(props),
        _active: {
            bg: _themeTools.mode("gray.200", "whiteAlpha.300")(props)
        },
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed"
        }
    };
}
var baseStyle = function baseStyle1(props) {
    return {
        root: baseStyleRoot,
        field: baseStyleField,
        stepperGroup: baseStyleStepperGroup,
        stepper: baseStyleStepper(props)
    };
};
function getSize(size) {
    var sizeStyle = _input["default"].sizes[size];
    var radius = {
        lg: "md",
        md: "md",
        sm: "sm",
        xs: "sm"
    };
    var resolvedFontSize = _typography["default"].fontSizes[sizeStyle.field.fontSize];
    return {
        field: _extends({
        }, sizeStyle.field, {
            paddingInlineEnd: "var(--number-input-field-padding)",
            verticalAlign: "top"
        }),
        stepper: {
            fontSize: "calc(" + resolvedFontSize + " * 0.75)",
            _first: {
                borderTopEndRadius: radius[size]
            },
            _last: {
                borderBottomEndRadius: radius[size],
                mt: "-1px",
                borderTopWidth: 1
            }
        }
    };
}
var sizes = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg")
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR","./input":"4XBF6","../foundations/typography":"1Blg7"}],"1Blg7":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var typography = {
    letterSpacings: {
        tighter: "-0.05em",
        tight: "-0.025em",
        normal: "0",
        wide: "0.025em",
        wider: "0.05em",
        widest: "0.1em"
    },
    lineHeights: {
        normal: "normal",
        none: 1,
        shorter: 1.25,
        "short": 1.375,
        base: 1.5,
        tall: 1.625,
        taller: "2",
        "3": ".75rem",
        "4": "1rem",
        "5": "1.25rem",
        "6": "1.5rem",
        "7": "1.75rem",
        "8": "2rem",
        "9": "2.25rem",
        "10": "2.5rem"
    },
    fontWeights: {
        hairline: 100,
        thin: 200,
        light: 300,
        normal: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
        extrabold: 800,
        black: 900
    },
    fonts: {
        heading: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
        body: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
        mono: "SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace"
    },
    fontSizes: {
        xs: "0.75rem",
        sm: "0.875rem",
        md: "1rem",
        lg: "1.125rem",
        xl: "1.25rem",
        "2xl": "1.5rem",
        "3xl": "1.875rem",
        "4xl": "2.25rem",
        "5xl": "3rem",
        "6xl": "3.75rem",
        "7xl": "4.5rem",
        "8xl": "6rem",
        "9xl": "8rem"
    }
};
/**
 * @deprecated
 * You can derive the Typography type from the DefaultChakraTheme
 *
 * type Typography = Pick<
 *   DefaultChakraTheme,
 *   | "letterSpacings"
 *   | "lineHeights"
 *   | "fontWeights"
 *   | "fonts"
 *   | "fontSizes"
 *  >
 */ var _default = typography;
exports["default"] = _default;

},{}],"7HOTb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _input = _interopRequireDefault(require("./input"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var baseStyle = _extends({
}, _input["default"].baseStyle.field, {
    textAlign: "center"
});
var sizes = {
    lg: {
        fontSize: "lg",
        w: 12,
        h: 12,
        borderRadius: "md"
    },
    md: {
        fontSize: "md",
        w: 10,
        h: 10,
        borderRadius: "md"
    },
    sm: {
        fontSize: "sm",
        w: 8,
        h: 8,
        borderRadius: "sm"
    },
    xs: {
        fontSize: "xs",
        w: 6,
        h: 6,
        borderRadius: "sm"
    }
};
var variants = {
    outline: function outline(props) {
        return _input["default"].variants.outline(props).field;
    },
    flushed: function flushed(props) {
        return _input["default"].variants.flushed(props).field;
    },
    filled: function filled(props) {
        return _input["default"].variants.filled(props).field;
    },
    unstyled: _input["default"].variants.unstyled.field
};
var defaultProps = _input["default"].defaultProps;
var _default = {
    baseStyle: baseStyle,
    sizes: sizes,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"./input":"4XBF6"}],"2zXLH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "popper",
    "content",
    "header",
    "body",
    "footer",
    "arrow"
];
var baseStylePopper = {
    zIndex: 10
};
function baseStyleContent(props) {
    var bg = _themeTools.mode("white", "gray.700")(props);
    var shadowColor = _themeTools.mode("gray.200", "whiteAlpha.300")(props);
    return {
        "--popover-bg": "colors." + bg,
        bg: "var(--popover-bg)",
        "--popper-arrow-bg": "var(--popover-bg)",
        "--popper-arrow-shadow-color": "colors." + shadowColor,
        width: "xs",
        border: "1px solid",
        borderColor: "inherit",
        borderRadius: "md",
        boxShadow: "sm",
        zIndex: "inherit",
        _focus: {
            outline: 0,
            boxShadow: "outline"
        }
    };
}
var baseStyleHeader = {
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
};
var baseStyleBody = {
    px: 3,
    py: 2
};
var baseStyleFooter = {
    px: 3,
    py: 2,
    borderTopWidth: "1px"
};
var baseStyle = function baseStyle1(props) {
    return {
        popper: baseStylePopper,
        content: baseStyleContent(props),
        header: baseStyleHeader,
        body: baseStyleBody,
        footer: baseStyleFooter,
        arrow: {
        }
    };
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"14TvO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "track",
    "filledTrack",
    "label"
];
function filledStyle(props) {
    var c = props.colorScheme, t = props.theme, isIndeterminate = props.isIndeterminate, hasStripe = props.hasStripe;
    var stripeStyle = _themeTools.mode(_themeTools.generateStripe(), _themeTools.generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
    var bgColor = _themeTools.mode(c + ".500", c + ".200")(props);
    var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + _themeTools.getColor(t, bgColor) + " 50%,\n    transparent 100%\n  )";
    var addStripe = !isIndeterminate && hasStripe;
    return _extends({
    }, addStripe && stripeStyle, isIndeterminate ? {
        bgImage: gradient
    } : {
        bgColor: bgColor
    });
}
var baseStyleLabel = {
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
};
function baseStyleTrack(props) {
    return {
        bg: _themeTools.mode("gray.100", "whiteAlpha.300")(props)
    };
}
function baseStyleFilledTrack(props) {
    return _extends({
        transition: "all 0.3s"
    }, filledStyle(props));
}
var baseStyle = function baseStyle1(props) {
    return {
        label: baseStyleLabel,
        filledTrack: baseStyleFilledTrack(props),
        track: baseStyleTrack(props)
    };
};
var sizes = {
    xs: {
        track: {
            h: "0.25rem"
        }
    },
    sm: {
        track: {
            h: "0.5rem"
        }
    },
    md: {
        track: {
            h: "0.75rem"
        }
    },
    lg: {
        track: {
            h: "1rem"
        }
    }
};
var defaultProps = {
    size: "md",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    sizes: sizes,
    baseStyle: baseStyle,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"5KQJT":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _checkbox = _interopRequireDefault(require("./checkbox"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "container",
    "control",
    "label"
];
function baseStyleControl(props) {
    var _Checkbox$baseStyle = _checkbox["default"].baseStyle(props), control = _Checkbox$baseStyle.control;
    return _extends({
    }, control, {
        borderRadius: "full",
        _checked: _extends({
        }, control["_checked"], {
            _before: {
                content: "\"\"",
                display: "inline-block",
                pos: "relative",
                w: "50%",
                h: "50%",
                borderRadius: "50%",
                bg: "currentColor"
            }
        })
    });
}
var baseStyle = function baseStyle1(props) {
    return {
        label: _checkbox["default"].baseStyle(props).label,
        control: baseStyleControl(props)
    };
};
var sizes = {
    md: {
        control: {
            w: 4,
            h: 4
        },
        label: {
            fontSize: "md"
        }
    },
    lg: {
        control: {
            w: 5,
            h: 5
        },
        label: {
            fontSize: "lg"
        }
    },
    sm: {
        control: {
            width: 3,
            height: 3
        },
        label: {
            fontSize: "sm"
        }
    }
};
var defaultProps = {
    size: "md",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"./checkbox":"6uTqT"}],"oh0y4":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var _utils = require("@chakra-ui/utils");
var _input = _interopRequireDefault(require("./input"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "field",
    "icon"
];
function baseStyleField(props) {
    return _extends({
    }, _input["default"].baseStyle.field, {
        appearance: "none",
        paddingBottom: "1px",
        lineHeight: "normal",
        "> option, > optgroup": {
            bg: _themeTools.mode("white", "gray.700")(props)
        }
    });
}
var baseStyleIcon = {
    width: "1.5rem",
    height: "100%",
    insetEnd: "0.5rem",
    position: "relative",
    color: "currentColor",
    fontSize: "1.25rem",
    _disabled: {
        opacity: 0.5
    }
};
var baseStyle = function baseStyle1(props) {
    return {
        field: baseStyleField(props),
        icon: baseStyleIcon
    };
};
var sizes = _utils.mergeWith({
}, _input["default"].sizes, {
    xs: {
        icon: {
            insetEnd: "0.25rem"
        }
    }
});
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    variants: _input["default"].variants,
    defaultProps: _input["default"].defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR","@chakra-ui/utils":"3364O","./input":"4XBF6"}],"DcTWC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _system = require("@chakra-ui/system");
var _themeTools = require("@chakra-ui/theme-tools");
var fade = function fade1(startColor, endColor) {
    return _system.keyframes({
        from: {
            borderColor: startColor,
            background: startColor
        },
        to: {
            borderColor: endColor,
            background: endColor
        }
    });
};
var baseStyle = function baseStyle1(props) {
    var defaultStartColor = _themeTools.mode("gray.100", "gray.800")(props);
    var defaultEndColor = _themeTools.mode("gray.400", "gray.600")(props);
    var _props$startColor = props.startColor, startColor = _props$startColor === void 0 ? defaultStartColor : _props$startColor, _props$endColor = props.endColor, endColor = _props$endColor === void 0 ? defaultEndColor : _props$endColor, speed = props.speed, theme = props.theme;
    var start = _themeTools.getColor(theme, startColor);
    var end = _themeTools.getColor(theme, endColor);
    return {
        opacity: 0.7,
        borderRadius: "2px",
        borderColor: start,
        background: end,
        animation: speed + "s linear infinite alternate " + fade(start, end)
    };
};
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/theme-tools":"3amSR"}],"OMbHJ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var baseStyle = function baseStyle1(props) {
    return {
        borderRadius: "md",
        fontWeight: "semibold",
        _focus: {
            boxShadow: "outline",
            padding: "1rem",
            position: "fixed",
            top: "1.5rem",
            insetStart: "1.5rem",
            bg: _themeTools.mode("white", "gray.700")(props)
        }
    };
};
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"borTg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "container",
    "thumb",
    "track",
    "filledTrack"
];
function thumbOrientation(props) {
    return _themeTools.orient({
        orientation: props.orientation,
        vertical: {
            left: "50%",
            transform: "translateX(-50%)",
            _active: {
                transform: "translateX(-50%) scale(1.15)"
            }
        },
        horizontal: {
            top: "50%",
            transform: "translateY(-50%)",
            _active: {
                transform: "translateY(-50%) scale(1.15)"
            }
        }
    });
}
var baseStyleContainer = function baseStyleContainer1(props) {
    var orientation = props.orientation;
    return _extends({
        _disabled: {
            opacity: 0.6,
            cursor: "default",
            pointerEvents: "none"
        }
    }, _themeTools.orient({
        orientation: orientation,
        vertical: {
            h: "100%"
        },
        horizontal: {
            w: "100%"
        }
    }));
};
function baseStyleTrack(props) {
    return {
        borderRadius: "sm",
        bg: _themeTools.mode("gray.200", "whiteAlpha.200")(props),
        _disabled: {
            bg: _themeTools.mode("gray.300", "whiteAlpha.300")(props)
        }
    };
}
function baseStyleThumb(props) {
    return _extends({
        zIndex: 1,
        borderRadius: "full",
        bg: "white",
        boxShadow: "base",
        border: "1px solid",
        borderColor: "transparent",
        transition: "transform 0.2s",
        _focus: {
            boxShadow: "outline"
        },
        _disabled: {
            bg: "gray.300"
        }
    }, thumbOrientation(props));
}
function baseStyleFilledTrack(props) {
    var c = props.colorScheme;
    return {
        bg: _themeTools.mode(c + ".500", c + ".200")(props)
    };
}
var baseStyle = function baseStyle1(props) {
    return {
        container: baseStyleContainer(props),
        track: baseStyleTrack(props),
        thumb: baseStyleThumb(props),
        filledTrack: baseStyleFilledTrack(props)
    };
};
function sizeLg(props) {
    return {
        thumb: {
            w: "16px",
            h: "16px"
        },
        track: _themeTools.orient({
            orientation: props.orientation,
            horizontal: {
                h: "4px"
            },
            vertical: {
                w: "4px"
            }
        })
    };
}
function sizeMd(props) {
    return {
        thumb: {
            w: "14px",
            h: "14px"
        },
        track: _themeTools.orient({
            orientation: props.orientation,
            horizontal: {
                h: "4px"
            },
            vertical: {
                w: "4px"
            }
        })
    };
}
function sizeSm(props) {
    return {
        thumb: {
            w: "10px",
            h: "10px"
        },
        track: _themeTools.orient({
            orientation: props.orientation,
            horizontal: {
                h: "2px"
            },
            vertical: {
                w: "2px"
            }
        })
    };
}
var sizes = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
};
var defaultProps = {
    size: "md",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    sizes: sizes,
    baseStyle: baseStyle,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"57SIx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var baseStyle = {
    width: "var(--spinner-size)",
    height: "var(--spinner-size)"
};
var sizes = {
    xs: {
        "--spinner-size": "0.75rem"
    },
    sm: {
        "--spinner-size": "1rem"
    },
    md: {
        "--spinner-size": "1.5rem"
    },
    lg: {
        "--spinner-size": "2rem"
    },
    xl: {
        "--spinner-size": "3rem"
    }
};
var defaultProps = {
    size: "md"
};
var _default = {
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{}],"1gPJq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var parts = [
    "label",
    "number",
    "icon",
    "helpText"
];
var baseStyleLabel = {
    fontWeight: "medium"
};
var baseStyleHelpText = {
    opacity: 0.8,
    marginBottom: 2
};
var baseStyleNumber = {
    verticalAlign: "baseline",
    fontWeight: "semibold"
};
var baseStyleIcon = {
    marginEnd: 1,
    w: "14px",
    h: "14px",
    verticalAlign: "middle"
};
var baseStyle = {
    label: baseStyleLabel,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon
};
var sizes = {
    md: {
        label: {
            fontSize: "sm"
        },
        helpText: {
            fontSize: "sm"
        },
        number: {
            fontSize: "2xl"
        }
    }
};
var defaultProps = {
    size: "md"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{}],"2U2XS":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "container",
    "track",
    "thumb"
];
function baseStyleTrack(props) {
    var c = props.colorScheme;
    return {
        borderRadius: "full",
        p: "2px",
        width: "var(--slider-track-width)",
        height: "var(--slider-track-height)",
        transition: "all 120ms",
        bg: _themeTools.mode("gray.300", "whiteAlpha.400")(props),
        _focus: {
            boxShadow: "outline"
        },
        _disabled: {
            opacity: 0.4,
            cursor: "not-allowed"
        },
        _checked: {
            bg: _themeTools.mode(c + ".500", c + ".200")(props)
        }
    };
}
var baseStyleThumb = {
    bg: "white",
    transition: "transform 250ms",
    borderRadius: "inherit",
    width: "var(--slider-track-height)",
    height: "var(--slider-track-height)",
    _checked: {
        transform: "translateX(var(--slider-thumb-x))"
    }
};
var baseStyle = function baseStyle1(props) {
    return {
        container: {
            "--slider-track-diff": "calc(var(--slider-track-width) - var(--slider-track-height))",
            "--slider-thumb-x": "var(--slider-track-diff)",
            _rtl: {
                "--slider-thumb-x": "calc(-1 * var(--slider-track-diff))"
            }
        },
        track: baseStyleTrack(props),
        thumb: baseStyleThumb
    };
};
var sizes = {
    sm: {
        container: {
            "--slider-track-width": "1.375rem",
            "--slider-track-height": "0.75rem"
        }
    },
    md: {
        container: {
            "--slider-track-width": "1.875rem",
            "--slider-track-height": "1rem"
        }
    },
    lg: {
        container: {
            "--slider-track-width": "2.875rem",
            "--slider-track-height": "1.5rem"
        }
    }
};
var defaultProps = {
    size: "md",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"4tZ86":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var parts = [
    "table",
    "thead",
    "tbody",
    "tr",
    "th",
    "td",
    "caption"
];
var baseStyle = {
    table: {
        fontVariantNumeric: "lining-nums tabular-nums",
        borderCollapse: "collapse",
        width: "full"
    },
    th: {
        fontFamily: "heading",
        fontWeight: "bold",
        textTransform: "uppercase",
        letterSpacing: "wider",
        textAlign: "start"
    },
    td: {
        textAlign: "start"
    },
    caption: {
        mt: 4,
        fontFamily: "heading",
        textAlign: "center",
        fontWeight: "medium"
    }
};
var numericStyles = {
    "&[data-is-numeric=true]": {
        textAlign: "end"
    }
};
var simpleVariant = function simpleVariant1(props) {
    var c = props.colorScheme;
    return {
        th: _extends({
            color: _themeTools.mode("gray.600", "gray.400")(props),
            borderBottom: "1px",
            borderColor: _themeTools.mode(c + ".100", c + ".700")(props)
        }, numericStyles),
        td: _extends({
            borderBottom: "1px",
            borderColor: _themeTools.mode(c + ".100", c + ".700")(props)
        }, numericStyles),
        caption: {
            color: _themeTools.mode("gray.600", "gray.100")(props)
        },
        tfoot: {
            tr: {
                "&:last-of-type": {
                    th: {
                        borderBottomWidth: 0
                    }
                }
            }
        }
    };
};
var stripedVariant = function stripedVariant1(props) {
    var c = props.colorScheme;
    return {
        th: _extends({
            color: _themeTools.mode("gray.600", "gray.400")(props),
            borderBottom: "1px",
            borderColor: _themeTools.mode(c + ".100", c + ".700")(props)
        }, numericStyles),
        td: _extends({
            borderBottom: "1px",
            borderColor: _themeTools.mode(c + ".100", c + ".700")(props)
        }, numericStyles),
        caption: {
            color: _themeTools.mode("gray.600", "gray.100")(props)
        },
        tbody: {
            tr: {
                "&:nth-of-type(odd)": {
                    "th, td": {
                        borderBottomWidth: "1px",
                        borderColor: _themeTools.mode(c + ".100", c + ".700")(props)
                    },
                    td: {
                        background: _themeTools.mode(c + ".100", c + ".700")(props)
                    }
                }
            }
        },
        tfoot: {
            tr: {
                "&:last-of-type": {
                    th: {
                        borderBottomWidth: 0
                    }
                }
            }
        }
    };
};
var variants = {
    simple: simpleVariant,
    striped: stripedVariant,
    unstyled: {
    }
};
var sizes = {
    sm: {
        th: {
            px: "4",
            py: "1",
            lineHeight: "4",
            fontSize: "xs"
        },
        td: {
            px: "4",
            py: "2",
            fontSize: "sm",
            lineHeight: "4"
        },
        caption: {
            px: "4",
            py: "2",
            fontSize: "xs"
        }
    },
    md: {
        th: {
            px: "6",
            py: "3",
            lineHeight: "4",
            fontSize: "xs"
        },
        td: {
            px: "6",
            py: "4",
            lineHeight: "5"
        },
        caption: {
            px: "6",
            py: "2",
            fontSize: "sm"
        }
    },
    lg: {
        th: {
            px: "8",
            py: "4",
            lineHeight: "5",
            fontSize: "sm"
        },
        td: {
            px: "8",
            py: "5",
            lineHeight: "6"
        },
        caption: {
            px: "6",
            py: "2",
            fontSize: "md"
        }
    }
};
var defaultProps = {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    variants: variants,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"1kFDl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "root",
    "tablist",
    "tab",
    "tabpanels",
    "tabpanel",
    "indicator"
];
function baseStyleRoot(props) {
    var orientation = props.orientation;
    return {
        display: orientation === "vertical" ? "flex" : "block"
    };
}
function baseStyleTab(props) {
    var isFitted = props.isFitted;
    return {
        flex: isFitted ? 1 : undefined,
        transition: "all 0.2s",
        _focus: {
            zIndex: 1,
            boxShadow: "outline"
        }
    };
}
function baseStyleTablist(props) {
    var _props$align = props.align, align = _props$align === void 0 ? "start" : _props$align, orientation = props.orientation;
    var alignments = {
        end: "flex-end",
        center: "center",
        start: "flex-start"
    };
    return {
        justifyContent: alignments[align],
        flexDirection: orientation === "vertical" ? "column" : "row"
    };
}
var baseStyleTabpanel = {
    p: 4
};
var baseStyle = function baseStyle1(props) {
    return {
        root: baseStyleRoot(props),
        tab: baseStyleTab(props),
        tablist: baseStyleTablist(props),
        tabpanel: baseStyleTabpanel
    };
};
var sizes = {
    sm: {
        tab: {
            py: "0.25rem",
            px: "1rem",
            fontSize: "0.85rem"
        }
    },
    md: {
        tab: {
            fontSize: "1rem",
            py: "0.5rem",
            px: "1rem"
        }
    },
    lg: {
        tab: {
            fontSize: "1.15rem",
            py: "0.75rem",
            px: "1rem"
        }
    }
};
function variantLine(props) {
    var _tablist, _tab;
    var c = props.colorScheme, orientation = props.orientation;
    var isVertical = orientation === "vertical";
    var borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
    var marginProp = isVertical ? "marginStart" : "marginBottom";
    return {
        tablist: (_tablist = {
        }, _tablist[borderProp] = "2px solid", _tablist.borderColor = "inherit", _tablist),
        tab: (_tab = {
        }, _tab[borderProp] = "2px solid", _tab.borderColor = "transparent", _tab[marginProp] = "-2px", _tab._selected = {
            color: _themeTools.mode(c + ".600", c + ".300")(props),
            borderColor: "currentColor"
        }, _tab._active = {
            bg: _themeTools.mode("gray.200", "whiteAlpha.300")(props)
        }, _tab._disabled = {
            opacity: 0.4,
            cursor: "not-allowed"
        }, _tab)
    };
}
function variantEnclosed(props) {
    var c = props.colorScheme;
    return {
        tab: {
            borderTopRadius: "md",
            border: "1px solid",
            borderColor: "transparent",
            mb: "-1px",
            _selected: {
                color: _themeTools.mode(c + ".600", c + ".300")(props),
                borderColor: "inherit",
                borderBottomColor: _themeTools.mode("white", "gray.800")(props)
            }
        },
        tablist: {
            mb: "-1px",
            borderBottom: "1px solid",
            borderColor: "inherit"
        }
    };
}
function variantEnclosedColored(props) {
    var c = props.colorScheme;
    return {
        tab: {
            border: "1px solid",
            borderColor: "inherit",
            bg: _themeTools.mode("gray.50", "whiteAlpha.50")(props),
            mb: "-1px",
            _notLast: {
                marginEnd: "-1px"
            },
            _selected: {
                bg: _themeTools.mode("#fff", "gray.800")(props),
                color: _themeTools.mode(c + ".600", c + ".300")(props),
                borderColor: "inherit",
                borderTopColor: "currentColor",
                borderBottomColor: "transparent"
            }
        },
        tablist: {
            mb: "-1px",
            borderBottom: "1px solid",
            borderColor: "inherit"
        }
    };
}
function variantSoftRounded(props) {
    var c = props.colorScheme, theme = props.theme;
    return {
        tab: {
            borderRadius: "full",
            fontWeight: "semibold",
            color: "gray.600",
            _selected: {
                color: _themeTools.getColor(theme, c + ".700"),
                bg: _themeTools.getColor(theme, c + ".100")
            }
        }
    };
}
function variantSolidRounded(props) {
    var c = props.colorScheme;
    return {
        tab: {
            borderRadius: "full",
            fontWeight: "semibold",
            color: _themeTools.mode("gray.600", "inherit")(props),
            _selected: {
                color: _themeTools.mode("#fff", "gray.800")(props),
                bg: _themeTools.mode(c + ".600", c + ".300")(props)
            }
        }
    };
}
var variantUnstyled = {
};
var variants = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled
};
var defaultProps = {
    size: "md",
    variant: "line",
    colorScheme: "blue"
};
var _default = {
    parts: parts,
    baseStyle: baseStyle,
    sizes: sizes,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"33gm3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _badge = _interopRequireDefault(require("./badge"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
var parts = [
    "container",
    "label",
    "closeButton"
];
var baseStyleContainer = {
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    _focus: {
        boxShadow: "outline"
    }
};
var baseStyleLabel = {
    lineHeight: 1.2
};
var baseStyleCloseButton = {
    fontSize: "18px",
    w: "1.25rem",
    h: "1.25rem",
    borderRadius: "full",
    marginStart: "0.375rem",
    marginEnd: "-1",
    opacity: 0.5,
    _disabled: {
        opacity: 0.4
    },
    _focus: {
        boxShadow: "outline",
        bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
        opacity: 0.8
    },
    _active: {
        opacity: 1
    }
};
var baseStyle = {
    container: baseStyleContainer,
    label: baseStyleLabel,
    closeButton: baseStyleCloseButton
};
var sizes = {
    sm: {
        container: {
            minH: "1.25rem",
            minW: "1.25rem",
            fontSize: "xs",
            px: 2,
            borderRadius: "md"
        },
        closeButton: {
            marginEnd: "-2px",
            marginStart: "0.35rem"
        }
    },
    md: {
        container: {
            minH: "1.5rem",
            minW: "1.5rem",
            fontSize: "sm",
            borderRadius: "md",
            px: 2
        }
    },
    lg: {
        container: {
            minH: 8,
            minW: 8,
            fontSize: "md",
            borderRadius: "md",
            px: 3
        }
    }
};
var variants = {
    subtle: function subtle(props) {
        return {
            container: _badge["default"].variants.subtle(props)
        };
    },
    solid: function solid(props) {
        return {
            container: _badge["default"].variants.solid(props)
        };
    },
    outline: function outline(props) {
        return {
            container: _badge["default"].variants.outline(props)
        };
    }
};
var defaultProps = {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
};
var _default = {
    parts: parts,
    variants: variants,
    baseStyle: baseStyle,
    sizes: sizes,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"./badge":"52XAW"}],"h48EX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _input = _interopRequireDefault(require("./input"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var baseStyle = _extends({
}, _input["default"].baseStyle.field, {
    paddingY: "8px",
    minHeight: "80px",
    lineHeight: "short"
});
var variants = {
    outline: function outline(props) {
        return _input["default"].variants.outline(props).field;
    },
    flushed: function flushed(props) {
        return _input["default"].variants.flushed(props).field;
    },
    filled: function filled(props) {
        return _input["default"].variants.filled(props).field;
    },
    unstyled: _input["default"].variants.unstyled.field
};
var sizes = {
    xs: _input["default"].sizes.xs.field,
    sm: _input["default"].sizes.sm.field,
    md: _input["default"].sizes.md.field,
    lg: _input["default"].sizes.lg.field
};
var defaultProps = {
    size: "md",
    variant: "outline"
};
var _default = {
    baseStyle: baseStyle,
    sizes: sizes,
    variants: variants,
    defaultProps: defaultProps
};
exports["default"] = _default;

},{"./input":"4XBF6"}],"7gkP7":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
function baseStyle(props) {
    var bg = _themeTools.mode("gray.700", "gray.300")(props);
    return {
        "--tooltip-bg": "colors." + bg,
        px: "8px",
        py: "2px",
        bg: "var(--tooltip-bg)",
        "--popper-arrow-bg": "var(--tooltip-bg)",
        color: _themeTools.mode("whiteAlpha.900", "gray.900")(props),
        borderRadius: "sm",
        fontWeight: "medium",
        fontSize: "sm",
        boxShadow: "md",
        maxW: "320px",
        zIndex: "tooltip"
    };
}
var _default = {
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"2sPd2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var parts = [
    "text",
    "icon"
];
function baseStyleText(props) {
    return {
        color: _themeTools.mode("red.500", "red.300")(props),
        mt: 2,
        fontSize: "sm"
    };
}
function baseStyleIcon(props) {
    return {
        marginEnd: "0.5em",
        color: _themeTools.mode("red.500", "red.300")(props)
    };
}
var baseStyle = function baseStyle1(props) {
    return {
        text: baseStyleText(props),
        icon: baseStyleIcon(props)
    };
};
var _default = {
    parts: parts,
    baseStyle: baseStyle
};
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"KZEUh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _borders = _interopRequireDefault(require("./borders"));
var _breakpoints = _interopRequireDefault(require("./breakpoints"));
var _colors = _interopRequireDefault(require("./colors"));
var _radius = _interopRequireDefault(require("./radius"));
var _shadows = _interopRequireDefault(require("./shadows"));
var _sizes = _interopRequireDefault(require("./sizes"));
var _spacing = require("./spacing");
var _transition = _interopRequireDefault(require("./transition"));
var _typography = _interopRequireDefault(require("./typography"));
var _zIndex = _interopRequireDefault(require("./z-index"));
var _blur = _interopRequireDefault(require("./blur"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var foundations = _extends({
    breakpoints: _breakpoints["default"],
    zIndices: _zIndex["default"],
    radii: _radius["default"],
    blur: _blur["default"],
    colors: _colors["default"]
}, _typography["default"], {
    sizes: _sizes["default"],
    shadows: _shadows["default"],
    space: _spacing.spacing,
    borders: _borders["default"],
    transition: _transition["default"]
});
var _default = foundations;
exports["default"] = _default;

},{"./borders":"6fjB5","./breakpoints":"4wTHk","./colors":"1Lppu","./radius":"1yvct","./shadows":"l1DCh","./sizes":"4le4A","./spacing":"2dzff","./transition":"4GOUd","./typography":"1Blg7","./z-index":"397Qg","./blur":"42y9G"}],"6fjB5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
};
var _default = borders;
exports["default"] = _default;

},{}],"4wTHk":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
/**
 * Breakpoints for responsive design
 */ var breakpoints = _themeTools.createBreakpoints({
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em",
    "2xl": "96em"
});
var _default = breakpoints;
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"1Lppu":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
/**
 * @deprecated
 * You can derive the Colors type from the DefaultChakraTheme:
 *
 * type Colors = DefaultChakraTheme["colors"]
 */ var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
        50: "rgba(255, 255, 255, 0.04)",
        100: "rgba(255, 255, 255, 0.06)",
        200: "rgba(255, 255, 255, 0.08)",
        300: "rgba(255, 255, 255, 0.16)",
        400: "rgba(255, 255, 255, 0.24)",
        500: "rgba(255, 255, 255, 0.36)",
        600: "rgba(255, 255, 255, 0.48)",
        700: "rgba(255, 255, 255, 0.64)",
        800: "rgba(255, 255, 255, 0.80)",
        900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
        50: "rgba(0, 0, 0, 0.04)",
        100: "rgba(0, 0, 0, 0.06)",
        200: "rgba(0, 0, 0, 0.08)",
        300: "rgba(0, 0, 0, 0.16)",
        400: "rgba(0, 0, 0, 0.24)",
        500: "rgba(0, 0, 0, 0.36)",
        600: "rgba(0, 0, 0, 0.48)",
        700: "rgba(0, 0, 0, 0.64)",
        800: "rgba(0, 0, 0, 0.80)",
        900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
        50: "#F7FAFC",
        100: "#EDF2F7",
        200: "#E2E8F0",
        300: "#CBD5E0",
        400: "#A0AEC0",
        500: "#718096",
        600: "#4A5568",
        700: "#2D3748",
        800: "#1A202C",
        900: "#171923"
    },
    red: {
        50: "#FFF5F5",
        100: "#FED7D7",
        200: "#FEB2B2",
        300: "#FC8181",
        400: "#F56565",
        500: "#E53E3E",
        600: "#C53030",
        700: "#9B2C2C",
        800: "#822727",
        900: "#63171B"
    },
    orange: {
        50: "#FFFAF0",
        100: "#FEEBC8",
        200: "#FBD38D",
        300: "#F6AD55",
        400: "#ED8936",
        500: "#DD6B20",
        600: "#C05621",
        700: "#9C4221",
        800: "#7B341E",
        900: "#652B19"
    },
    yellow: {
        50: "#FFFFF0",
        100: "#FEFCBF",
        200: "#FAF089",
        300: "#F6E05E",
        400: "#ECC94B",
        500: "#D69E2E",
        600: "#B7791F",
        700: "#975A16",
        800: "#744210",
        900: "#5F370E"
    },
    green: {
        50: "#F0FFF4",
        100: "#C6F6D5",
        200: "#9AE6B4",
        300: "#68D391",
        400: "#48BB78",
        500: "#38A169",
        600: "#2F855A",
        700: "#276749",
        800: "#22543D",
        900: "#1C4532"
    },
    teal: {
        50: "#E6FFFA",
        100: "#B2F5EA",
        200: "#81E6D9",
        300: "#4FD1C5",
        400: "#38B2AC",
        500: "#319795",
        600: "#2C7A7B",
        700: "#285E61",
        800: "#234E52",
        900: "#1D4044"
    },
    blue: {
        50: "#ebf8ff",
        100: "#bee3f8",
        200: "#90cdf4",
        300: "#63b3ed",
        400: "#4299e1",
        500: "#3182ce",
        600: "#2b6cb0",
        700: "#2c5282",
        800: "#2a4365",
        900: "#1A365D"
    },
    cyan: {
        50: "#EDFDFD",
        100: "#C4F1F9",
        200: "#9DECF9",
        300: "#76E4F7",
        400: "#0BC5EA",
        500: "#00B5D8",
        600: "#00A3C4",
        700: "#0987A0",
        800: "#086F83",
        900: "#065666"
    },
    purple: {
        50: "#FAF5FF",
        100: "#E9D8FD",
        200: "#D6BCFA",
        300: "#B794F4",
        400: "#9F7AEA",
        500: "#805AD5",
        600: "#6B46C1",
        700: "#553C9A",
        800: "#44337A",
        900: "#322659"
    },
    pink: {
        50: "#FFF5F7",
        100: "#FED7E2",
        200: "#FBB6CE",
        300: "#F687B3",
        400: "#ED64A6",
        500: "#D53F8C",
        600: "#B83280",
        700: "#97266D",
        800: "#702459",
        900: "#521B41"
    },
    linkedin: {
        50: "#E8F4F9",
        100: "#CFEDFB",
        200: "#9BDAF3",
        300: "#68C7EC",
        400: "#34B3E4",
        500: "#00A0DC",
        600: "#008CC9",
        700: "#0077B5",
        800: "#005E93",
        900: "#004471"
    },
    facebook: {
        50: "#E8F4F9",
        100: "#D9DEE9",
        200: "#B7C2DA",
        300: "#6482C0",
        400: "#4267B2",
        500: "#385898",
        600: "#314E89",
        700: "#29487D",
        800: "#223B67",
        900: "#1E355B"
    },
    messenger: {
        50: "#D0E6FF",
        100: "#B9DAFF",
        200: "#A2CDFF",
        300: "#7AB8FF",
        400: "#2E90FF",
        500: "#0078FF",
        600: "#0063D1",
        700: "#0052AC",
        800: "#003C7E",
        900: "#002C5C"
    },
    whatsapp: {
        50: "#dffeec",
        100: "#b9f5d0",
        200: "#90edb3",
        300: "#65e495",
        400: "#3cdd78",
        500: "#22c35e",
        600: "#179848",
        700: "#0c6c33",
        800: "#01421c",
        900: "#001803"
    },
    twitter: {
        50: "#E5F4FD",
        100: "#C8E9FB",
        200: "#A8DCFA",
        300: "#83CDF7",
        400: "#57BBF5",
        500: "#1DA1F2",
        600: "#1A94DA",
        700: "#1681BF",
        800: "#136B9E",
        900: "#0D4D71"
    },
    telegram: {
        50: "#E3F2F9",
        100: "#C5E4F3",
        200: "#A2D4EC",
        300: "#7AC1E4",
        400: "#47A9DA",
        500: "#0088CC",
        600: "#007AB8",
        700: "#006BA1",
        800: "#005885",
        900: "#003F5E"
    }
};
var _default = colors;
exports["default"] = _default;

},{}],"1yvct":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
};
/**
 * @deprecated
 * You can derive the Radii type from the DefaultChakraTheme
 *
 * type Radii = DefaultChakraTheme['radii']
 */ var _default = radii;
exports["default"] = _default;

},{}],"l1DCh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
/**
 * @deprecated
 * You can derive the Shadows type from the DefaultChakraTheme
 *
 * type Shadows = DefaultChakraTheme['shadows']
 */ var _default = shadows;
exports["default"] = _default;

},{}],"4GOUd":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
};
var transition = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
};
var _default = transition;
exports["default"] = _default;

},{}],"397Qg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1000,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
};
/**
 * @deprecated
 * You can derive the ZIndices type from the DefaultChakraTheme
 *
 * type ZIndices = DefaultChakraTheme['zIndices']
 */ var _default = zIndices;
exports["default"] = _default;

},{}],"42y9G":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var blur = {
    none: 0,
    sm: "4px",
    base: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
};
var _default = blur;
exports["default"] = _default;

},{}],"7CgB3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = void 0;
var _themeTools = require("@chakra-ui/theme-tools");
var styles = {
    global: function global(props) {
        return {
            body: {
                fontFamily: "body",
                color: _themeTools.mode("gray.800", "whiteAlpha.900")(props),
                bg: _themeTools.mode("white", "gray.800")(props),
                transition: "background-color 0.2s",
                lineHeight: "base"
            },
            "*::placeholder": {
                color: _themeTools.mode("gray.400", "whiteAlpha.400")(props)
            },
            "*, *::before, &::after": {
                borderColor: _themeTools.mode("gray.200", "whiteAlpha.300")(props),
                wordWrap: "break-word"
            }
        };
    }
};
var _default = styles;
exports["default"] = _default;

},{"@chakra-ui/theme-tools":"3amSR"}],"4ACjD":[function(require,module,exports) {
"use strict";

},{}],"2Kon2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isChakraTheme = isChakraTheme;
exports.requiredChakraThemeKeys = void 0;
var _utils = require("@chakra-ui/utils");
var requiredChakraThemeKeys = [
    "borders",
    "breakpoints",
    "colors",
    "components",
    "config",
    "direction",
    "fonts",
    "fontSizes",
    "fontWeights",
    "letterSpacings",
    "lineHeights",
    "radii",
    "shadows",
    "sizes",
    "space",
    "styles",
    "transition",
    "zIndices"
];
exports.requiredChakraThemeKeys = requiredChakraThemeKeys;
function isChakraTheme(unit) {
    if (!_utils.isObject(unit)) return false;
    return requiredChakraThemeKeys.every(function(propertyName) {
        return Object.prototype.hasOwnProperty.call(unit, propertyName);
    });
}

},{"@chakra-ui/utils":"3364O"}],"327HV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _env = require("./env");
Object.keys(_env).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _env[key]) return;
    exports[key] = _env[key];
});

},{"./env":"5GfwR"}],"5GfwR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEnvironment = useEnvironment;
exports.EnvironmentProvider = EnvironmentProvider;
var _utils = require("@chakra-ui/utils");
var _react = _interopRequireWildcard(require("react"));
var _mockDocument = require("./mock-document");
var _mockWindow = require("./mock-window");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var mockEnv = {
    window: _mockWindow.ssrWindow,
    document: _mockDocument.ssrDocument
};
var defaultEnv = _utils.isBrowser ? {
    window: window,
    document: document
} : mockEnv;
var EnvironmentContext = /*#__PURE__*/ _react.createContext(defaultEnv);
if (_utils.__DEV__) EnvironmentContext.displayName = "EnvironmentContext";
function useEnvironment() {
    return _react.useContext(EnvironmentContext);
}
function EnvironmentProvider(props) {
    var children = props.children, environmentProp = props.environment;
    var _useState = _react.useState(null), node = _useState[0], setNode = _useState[1];
    var context = _react.useMemo(function() {
        var _ref;
        var doc = node == null ? void 0 : node.ownerDocument;
        var win = node == null ? void 0 : node.ownerDocument.defaultView;
        var nodeEnv = doc ? {
            document: doc,
            window: win
        } : undefined;
        var env = (_ref = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref : defaultEnv;
        return env;
    }, [
        node,
        environmentProp
    ]);
    var showEnvGetter = !node && !environmentProp;
    return(/*#__PURE__*/ _react["default"].createElement(EnvironmentContext.Provider, {
        value: context
    }, children, showEnvGetter && /*#__PURE__*/ _react["default"].createElement("span", {
        ref: function ref(el) {
            if (el) setNode(el);
        }
    })));
}
if (_utils.__DEV__) EnvironmentProvider.displayName = "EnvironmentProvider";

},{"@chakra-ui/utils":"3364O","react":"3f97z","./mock-document":"1ikZa","./mock-window":"tOzz5"}],"1ikZa":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ssrDocument = void 0;
var doc = {
    body: {
        classList: {
            add: function add() {
            },
            remove: function remove() {
            }
        }
    },
    addEventListener: function addEventListener() {
    },
    removeEventListener: function removeEventListener() {
    },
    activeElement: {
        blur: function blur() {
        },
        nodeName: ""
    },
    querySelector: function querySelector() {
        return null;
    },
    querySelectorAll: function querySelectorAll() {
        return [];
    },
    getElementById: function getElementById() {
        return null;
    },
    createEvent: function createEvent() {
        return {
            initEvent: function initEvent() {
            }
        };
    },
    createElement: function createElement() {
        return {
            children: [],
            childNodes: [],
            style: {
            },
            setAttribute: function setAttribute() {
            },
            getElementsByTagName: function getElementsByTagName() {
                return [];
            }
        };
    }
};
var ssrDocument = doc;
exports.ssrDocument = ssrDocument;

},{}],"tOzz5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ssrWindow = void 0;
var _mockDocument = require("./mock-document");
var noop = function noop1() {
};
var win = {
    document: _mockDocument.ssrDocument,
    navigator: {
        userAgent: ""
    },
    CustomEvent: function CustomEvent1() {
        return this;
    },
    addEventListener: noop,
    removeEventListener: noop,
    getComputedStyle: function getComputedStyle() {
        return {
            getPropertyValue: function getPropertyValue() {
                return "";
            }
        };
    },
    matchMedia: function matchMedia() {
        return {
            matches: false,
            addListener: noop,
            removeListener: noop
        };
    },
    requestAnimationFrame: function requestAnimationFrame(callback) {
        if (typeof setTimeout === "undefined") {
            callback();
            return null;
        }
        return setTimeout(callback, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame(id) {
        if (typeof setTimeout === "undefined") return;
        clearTimeout(id);
    },
    setTimeout: function setTimeout() {
        return 0;
    },
    clearTimeout: noop,
    setInterval: function setInterval() {
        return 0;
    },
    clearInterval: noop
};
var ssrWindow = win;
exports.ssrWindow = ssrWindow;

},{"./mock-document":"1ikZa"}],"h7952":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.extendTheme = extendTheme;
exports.mergeThemeOverride = mergeThemeOverride;
var _theme = _interopRequireWildcard(require("@chakra-ui/theme"));
var _utils = require("@chakra-ui/utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Function to override or customize the Chakra UI theme conveniently.
 * First extension overrides the baseTheme and following extensions override the preceding extensions.
 *
 * @example:
 * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'
 *
 * const customTheme = extendTheme(
 *   {
 *     colors: {
 *       brand: {
 *         500: "#b4d455",
 *       },
 *     },
 *   },
 *   withDefaultColorScheme({ colorScheme: "red" }),
 *   baseTheme // optional
 * )
 */ function extendTheme() {
    for(var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++)extensions[_key] = arguments[_key];
    var overrides = [].concat(extensions);
    var baseTheme = extensions[extensions.length - 1];
    if (_theme.isChakraTheme(baseTheme) && // previously only `extendTheme(override, baseTheme?)` was allowed
    overrides.length > 1) overrides = overrides.slice(0, overrides.length - 1);
    else baseTheme = _theme["default"];
    return _utils.pipe.apply(void 0, overrides.map(function(extension) {
        return function(prevTheme) {
            return _utils.isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);
        };
    }))(baseTheme);
}
function mergeThemeOverride() {
    for(var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)overrides[_key2] = arguments[_key2];
    return _utils.mergeWith.apply(void 0, [
        {
        }
    ].concat(overrides, [
        mergeThemeCustomizer
    ]));
}
function mergeThemeCustomizer(source, override, key, object) {
    if ((_utils.isFunction(source) || _utils.isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) return function() {
        var sourceValue = _utils.isFunction(source) ? source.apply(void 0, arguments) : source;
        var overrideValue = _utils.isFunction(override) ? override.apply(void 0, arguments) : override;
        return _utils.mergeWith({
        }, sourceValue, overrideValue, mergeThemeCustomizer);
    };
     // fallback to default behaviour
    return undefined;
}

},{"@chakra-ui/theme":"4ht9o","@chakra-ui/utils":"3364O"}],"2Ythp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _withDefaultColorScheme = require("./with-default-color-scheme");
Object.keys(_withDefaultColorScheme).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _withDefaultColorScheme[key]) return;
    exports[key] = _withDefaultColorScheme[key];
});
var _withDefaultSize = require("./with-default-size");
Object.keys(_withDefaultSize).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _withDefaultSize[key]) return;
    exports[key] = _withDefaultSize[key];
});
var _withDefaultVariant = require("./with-default-variant");
Object.keys(_withDefaultVariant).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _withDefaultVariant[key]) return;
    exports[key] = _withDefaultVariant[key];
});
var _withDefaultProps = require("./with-default-props");
Object.keys(_withDefaultProps).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _withDefaultProps[key]) return;
    exports[key] = _withDefaultProps[key];
});

},{"./with-default-color-scheme":"2t8rw","./with-default-size":"4liDR","./with-default-variant":"2oHAe","./with-default-props":"5fsS9"}],"2t8rw":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.withDefaultColorScheme = withDefaultColorScheme;
var _utils = require("@chakra-ui/utils");
var _extendTheme = require("../extend-theme");
function withDefaultColorScheme(_ref) {
    var colorScheme = _ref.colorScheme, components = _ref.components;
    return function(theme) {
        var names = Object.keys(theme.components || {
        });
        if (Array.isArray(components)) names = components;
        else if (_utils.isObject(components)) names = Object.keys(components);
        return _extendTheme.mergeThemeOverride(theme, {
            components: Object.fromEntries(names.map(function(componentName) {
                var withColorScheme = {
                    defaultProps: {
                        colorScheme: colorScheme
                    }
                };
                return [
                    componentName,
                    withColorScheme
                ];
            }))
        });
    };
}

},{"@chakra-ui/utils":"3364O","../extend-theme":"h7952"}],"4liDR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.withDefaultSize = withDefaultSize;
var _utils = require("@chakra-ui/utils");
var _extendTheme = require("../extend-theme");
function withDefaultSize(_ref) {
    var size = _ref.size, components = _ref.components;
    return function(theme) {
        var names = Object.keys(theme.components || {
        });
        if (Array.isArray(components)) names = components;
        else if (_utils.isObject(components)) names = Object.keys(components);
        return _extendTheme.mergeThemeOverride(theme, {
            components: Object.fromEntries(names.map(function(componentName) {
                var withSize = {
                    defaultProps: {
                        size: size
                    }
                };
                return [
                    componentName,
                    withSize
                ];
            }))
        });
    };
}

},{"@chakra-ui/utils":"3364O","../extend-theme":"h7952"}],"2oHAe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.withDefaultVariant = withDefaultVariant;
var _utils = require("@chakra-ui/utils");
var _extendTheme = require("../extend-theme");
function withDefaultVariant(_ref) {
    var variant = _ref.variant, components = _ref.components;
    return function(theme) {
        var names = Object.keys(theme.components || {
        });
        if (Array.isArray(components)) names = components;
        else if (_utils.isObject(components)) names = Object.keys(components);
        return _extendTheme.mergeThemeOverride(theme, {
            components: Object.fromEntries(names.map(function(componentName) {
                var withVariant = {
                    defaultProps: {
                        variant: variant
                    }
                };
                return [
                    componentName,
                    withVariant
                ];
            }))
        });
    };
}

},{"@chakra-ui/utils":"3364O","../extend-theme":"h7952"}],"5fsS9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.withDefaultProps = withDefaultProps;
var _utils = require("@chakra-ui/utils");
var _extendTheme = require("../extend-theme");
var _withDefaultColorScheme = require("./with-default-color-scheme");
var _withDefaultVariant = require("./with-default-variant");
var _withDefaultSize = require("./with-default-size");
function withDefaultProps(_ref) {
    var _ref$defaultProps = _ref.defaultProps, colorScheme = _ref$defaultProps.colorScheme, variant = _ref$defaultProps.variant, size = _ref$defaultProps.size, components = _ref.components;
    var identity = function identity1(t) {
        return t;
    };
    var fns = [
        colorScheme ? _withDefaultColorScheme.withDefaultColorScheme({
            colorScheme: colorScheme,
            components: components
        }) : identity,
        size ? _withDefaultSize.withDefaultSize({
            size: size,
            components: components
        }) : identity,
        variant ? _withDefaultVariant.withDefaultVariant({
            variant: variant,
            components: components
        }) : identity
    ];
    return function(theme) {
        return _extendTheme.mergeThemeOverride(_utils.pipe.apply(void 0, fns)(theme));
    };
}

},{"@chakra-ui/utils":"3364O","../extend-theme":"h7952","./with-default-color-scheme":"2t8rw","./with-default-variant":"2oHAe","./with-default-size":"4liDR"}],"2ThAm":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _accordion = require("./accordion");
Object.keys(_accordion).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _accordion[key]) return;
    exports[key] = _accordion[key];
});
var _useAccordion = require("./use-accordion");
Object.keys(_useAccordion).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useAccordion[key]) return;
    exports[key] = _useAccordion[key];
});

},{"./accordion":"48bre","./use-accordion":"1OMpw"}],"48bre":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useAccordionItemState = useAccordionItemState;
exports.AccordionIcon = exports.AccordionPanel = exports.AccordionButton = exports.AccordionItem = exports.Accordion = void 0;
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useAccordion2 = require("./use-accordion");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * The wrapper that provides context and focus management
 * for all accordion items.
 *
 * It wraps all accordion items in a `div` for better grouping.
 * @see Docs https://chakra-ui.com/docs/components/accordion
 */ var Accordion = /*#__PURE__*/ _system.forwardRef(function(_ref, ref) {
    var children = _ref.children, reduceMotion = _ref.reduceMotion, props = _objectWithoutPropertiesLoose(_ref, [
        "children",
        "reduceMotion"
    ]);
    var styles = _system.useMultiStyleConfig("Accordion", props);
    var ownProps = _system.omitThemingProps(props);
    var _useAccordion = _useAccordion2.useAccordion(ownProps), htmlProps = _useAccordion.htmlProps, descendants = _useAccordion.descendants, context = _objectWithoutPropertiesLoose(_useAccordion, [
        "htmlProps",
        "descendants"
    ]);
    var ctx = React.useMemo(function() {
        return _extends({
        }, context, {
            reduceMotion: !!reduceMotion
        });
    }, [
        context,
        reduceMotion
    ]);
    return(/*#__PURE__*/ React.createElement(_useAccordion2.AccordionDescendantsProvider, {
        value: descendants
    }, /*#__PURE__*/ React.createElement(_useAccordion2.AccordionProvider, {
        value: ctx
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, htmlProps, {
        className: _utils.cx("chakra-accordion", props.className)
    }), children)))));
});
exports.Accordion = Accordion;
if (_utils.__DEV__) Accordion.displayName = "Accordion";
/* -------------------------------------------------------------------------------------------------
 * Accordion Item
 * -----------------------------------------------------------------------------------------------*/ var _createContext = _reactUtils.createContext({
    name: "AccordionItemContext",
    errorMessage: "useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "
}), AccordionItemProvider = _createContext[0], useAccordionItemContext = _createContext[1];
/**
 * AccordionItem is a single accordion that provides the open-close
 * behavior when the accordion button is clicked.
 *
 * It also provides context for the accordion button and panel.
 */ var AccordionItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var children = props.children, className = props.className;
    var _useAccordionItem = _useAccordion2.useAccordionItem(props), htmlProps = _useAccordionItem.htmlProps, context = _objectWithoutPropertiesLoose(_useAccordionItem, [
        "htmlProps"
    ]);
    var styles = _system.useStyles();
    var containerStyles = _extends({
    }, styles.container, {
        overflowAnchor: "none"
    });
    var ctx = React.useMemo(function() {
        return context;
    }, [
        context
    ]);
    return(/*#__PURE__*/ React.createElement(AccordionItemProvider, {
        value: ctx
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, htmlProps, {
        className: _utils.cx("chakra-accordion__item", className),
        __css: containerStyles
    }), _utils.runIfFn(children, {
        isExpanded: !!context.isOpen,
        isDisabled: !!context.isDisabled
    }))));
});
exports.AccordionItem = AccordionItem;
if (_utils.__DEV__) AccordionItem.displayName = "AccordionItem";
/**
 * React hook to get the state and actions of an accordion item
 */ function useAccordionItemState() {
    var _useAccordionItemCont = useAccordionItemContext(), isOpen = _useAccordionItemCont.isOpen, isDisabled = _useAccordionItemCont.isDisabled, onClose = _useAccordionItemCont.onClose, onOpen = _useAccordionItemCont.onOpen;
    return {
        isOpen: isOpen,
        onClose: onClose,
        isDisabled: isDisabled,
        onOpen: onOpen
    };
}
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Button
 * -----------------------------------------------------------------------------------------------*/ /**
 * AccordionButton is used expands and collapses an accordion item.
 * It must be a child of `AccordionItem`.
 *
 * Note 🚨: Each accordion button must be wrapped in an heading tag,
 * that is appropriate for the information architecture of the page.
 */ var AccordionButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useAccordionItemCont2 = useAccordionItemContext(), getButtonProps = _useAccordionItemCont2.getButtonProps;
    var buttonProps = getButtonProps(props, ref);
    var styles = _system.useStyles();
    var buttonStyles = _extends({
        display: "flex",
        alignItems: "center",
        width: "100%",
        transition: "all 0.2s",
        outline: 0
    }, styles.button);
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
    }, buttonProps, {
        className: _utils.cx("chakra-accordion__button", props.className),
        __css: buttonStyles
    })));
});
exports.AccordionButton = AccordionButton;
if (_utils.__DEV__) AccordionButton.displayName = "AccordionButton";
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Panel
 * -----------------------------------------------------------------------------------------------*/ /**
 * Accordion panel that holds the content for each accordion.
 * It shows and hides based on the state login from the `AccordionItem`.
 *
 * It uses the `Collapse` component to animate its height.
 */ var AccordionPanel = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useAccordionContext = _useAccordion2.useAccordionContext(), reduceMotion = _useAccordionContext.reduceMotion;
    var _useAccordionItemCont3 = useAccordionItemContext(), getPanelProps = _useAccordionItemCont3.getPanelProps, isOpen = _useAccordionItemCont3.isOpen; // remove `hidden` prop, 'coz we're using height animation
    var panelProps = getPanelProps(props, ref);
    var _className = _utils.cx("chakra-accordion__panel", props.className);
    var styles = _system.useStyles();
    if (!reduceMotion) delete panelProps.hidden;
    var child = /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, panelProps, {
        __css: styles.panel,
        className: _className
    }));
    if (!reduceMotion) return(/*#__PURE__*/ React.createElement(_transition.Collapse, {
        "in": isOpen
    }, child));
    return child;
});
exports.AccordionPanel = AccordionPanel;
if (_utils.__DEV__) AccordionPanel.displayName = "AccordionPanel";
/* -------------------------------------------------------------------------------------------------
 * Accordion Item => Icon
 * -----------------------------------------------------------------------------------------------*/ /**
 * AccordionIcon that gives a visual cue of the open/close state of the accordion item.
 * It rotates `180deg` based on the open/close state.
 */ var AccordionIcon = function AccordionIcon1(props) {
    var _useAccordionItemCont4 = useAccordionItemContext(), isOpen = _useAccordionItemCont4.isOpen, isDisabled = _useAccordionItemCont4.isDisabled;
    var _useAccordionContext2 = _useAccordion2.useAccordionContext(), reduceMotion = _useAccordionContext2.reduceMotion;
    var _className = _utils.cx("chakra-accordion__icon", props.className);
    var styles = _system.useStyles();
    var iconStyles = _extends({
        opacity: isDisabled ? 0.4 : 1,
        transform: isOpen ? "rotate(-180deg)" : undefined,
        transition: reduceMotion ? undefined : "transform 0.2s",
        transformOrigin: "center"
    }, styles.icon);
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24",
        "aria-hidden": true,
        className: _className,
        __css: iconStyles
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
    })));
};
exports.AccordionIcon = AccordionIcon;
if (_utils.__DEV__) AccordionIcon.displayName = "AccordionIcon";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/transition":"63bwb","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-accordion":"1OMpw"}],"2mBZX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
};
exports["default"] = void 0;
var _icon = _interopRequireWildcard(require("./icon"));
exports["default"] = _icon["default"];
Object.keys(_icon).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _icon[key]) return;
    exports[key] = _icon[key];
});
var _createIcon = require("./create-icon");
Object.keys(_createIcon).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _createIcon[key]) return;
    exports[key] = _createIcon[key];
});
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}

},{"./icon":"46gE3","./create-icon":"6x27J"}],"46gE3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.Icon = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var fallbackIcon = {
    path: /*#__PURE__*/ React.createElement("g", {
        stroke: "currentColor",
        strokeWidth: "1.5"
    }, /*#__PURE__*/ React.createElement("path", {
        strokeLinecap: "round",
        fill: "none",
        d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
    }), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        strokeLinecap: "round",
        d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
    }), /*#__PURE__*/ React.createElement("circle", {
        fill: "none",
        strokeMiterlimit: "10",
        cx: "12",
        cy: "12",
        r: "11.25"
    })),
    viewBox: "0 0 24 24"
};
var Icon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var element = props.as, viewBox = props.viewBox, _props$color = props.color, color = _props$color === void 0 ? "currentColor" : _props$color, _props$focusable = props.focusable, focusable = _props$focusable === void 0 ? false : _props$focusable, children = props.children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose(props, [
        "as",
        "viewBox",
        "color",
        "focusable",
        "children",
        "className",
        "__css"
    ]);
    var _className = _utils.cx("chakra-icon", className);
    var styles = _extends({
        w: "1em",
        h: "1em",
        display: "inline-block",
        lineHeight: "1em",
        flexShrink: 0,
        color: color
    }, __css);
    var shared = {
        ref: ref,
        focusable: focusable,
        className: _className,
        __css: styles
    };
    var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
    /**
   * If you're using an icon library like `react-icons`.
   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component
   */ if (element && typeof element !== "string") return(/*#__PURE__*/ React.createElement(_system.chakra.svg, _extends({
        as: element
    }, shared, rest)));
    var _path = children != null ? children : fallbackIcon.path;
    return(/*#__PURE__*/ React.createElement(_system.chakra.svg, _extends({
        verticalAlign: "middle",
        viewBox: _viewBox
    }, shared, rest), _path));
});
exports.Icon = Icon;
if (_utils.__DEV__) Icon.displayName = "Icon";
var _default = Icon;
exports["default"] = _default;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"6x27J":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createIcon = createIcon;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _icon = require("./icon");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function createIcon(options) {
    var _options$viewBox = options.viewBox, viewBox = _options$viewBox === void 0 ? "0 0 24 24" : _options$viewBox, pathDefinition = options.d, path = options.path, displayName = options.displayName, _options$defaultProps = options.defaultProps, defaultProps = _options$defaultProps === void 0 ? {
    } : _options$defaultProps;
    var Comp = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
        return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
            ref: ref,
            viewBox: viewBox
        }, defaultProps, props), path != null ? path : /*#__PURE__*/ React.createElement("path", {
            fill: "currentColor",
            d: pathDefinition
        })));
    });
    if (_utils.__DEV__) Comp.displayName = displayName;
    return Comp;
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./icon":"46gE3"}],"63bwb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    EASINGS: true
};
exports.EASINGS = void 0;
var _collapse = require("./collapse");
Object.keys(_collapse).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _collapse[key]) return;
    exports[key] = _collapse[key];
});
var _fade = require("./fade");
Object.keys(_fade).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _fade[key]) return;
    exports[key] = _fade[key];
});
var _scaleFade = require("./scale-fade");
Object.keys(_scaleFade).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _scaleFade[key]) return;
    exports[key] = _scaleFade[key];
});
var _slide = require("./slide");
Object.keys(_slide).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _slide[key]) return;
    exports[key] = _slide[key];
});
var _slideFade = require("./slide-fade");
Object.keys(_slideFade).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _slideFade[key]) return;
    exports[key] = _slideFade[key];
});
var _transitionUtils = require("./transition-utils");
exports.EASINGS = _transitionUtils.TransitionEasings;

},{"./collapse":"64nRg","./fade":"kjVI9","./scale-fade":"6vcFx","./slide":"2V9lp","./slide-fade":"231ch","./transition-utils":"29X8r"}],"64nRg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Collapse = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _transitionUtils = require("./transition-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var isNumeric = function isNumeric1(value) {
    return value != null && parseInt(value.toString(), 10) > 0;
};
var defaultTransitions = {
    exit: {
        height: {
            duration: 0.2,
            ease: _transitionUtils.TransitionEasings.ease
        },
        opacity: {
            duration: 0.3,
            ease: _transitionUtils.TransitionEasings.ease
        }
    },
    enter: {
        height: {
            duration: 0.3,
            ease: _transitionUtils.TransitionEasings.ease
        },
        opacity: {
            duration: 0.4,
            ease: _transitionUtils.TransitionEasings.ease
        }
    }
};
var variants = {
    exit: function exit(_ref) {
        var _transition$exit;
        var animateOpacity = _ref.animateOpacity, startingHeight = _ref.startingHeight, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
        return _extends({
        }, animateOpacity && {
            opacity: isNumeric(startingHeight) ? 1 : 0
        }, {
            overflow: "hidden",
            height: startingHeight,
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
            transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : _transitionUtils.withDelay.exit(defaultTransitions.exit, delay)
        });
    },
    enter: function enter(_ref2) {
        var _transition$enter;
        var animateOpacity = _ref2.animateOpacity, endingHeight = _ref2.endingHeight, transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
        return _extends({
        }, animateOpacity && {
            opacity: 1
        }, {
            height: endingHeight,
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
            transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : _transitionUtils.withDelay.enter(defaultTransitions.enter, delay)
        });
    }
};
var Collapse = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var isOpen = props["in"], unmountOnExit = props.unmountOnExit, _props$animateOpacity = props.animateOpacity, animateOpacity = _props$animateOpacity === void 0 ? true : _props$animateOpacity, _props$startingHeight = props.startingHeight, startingHeight = _props$startingHeight === void 0 ? 0 : _props$startingHeight, _props$endingHeight = props.endingHeight, endingHeight = _props$endingHeight === void 0 ? "auto" : _props$endingHeight, style = props.style, className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, rest = _objectWithoutPropertiesLoose(props, [
        "in",
        "unmountOnExit",
        "animateOpacity",
        "startingHeight",
        "endingHeight",
        "style",
        "className",
        "transition",
        "transitionEnd"
    ]);
    var _React$useState = React.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
    React.useEffect(function() {
        var timeout = setTimeout(function() {
            setMounted(true);
        });
        return function() {
            return clearTimeout(timeout);
        };
    }, []);
    var hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    /**
   * Warn 🚨: `startingHeight` and `unmountOnExit` are mutually exclusive
   *
   * If you specify a starting height, the collapsed needs to be mounted
   * for the height to take effect.
   */ _utils.warn({
        condition: Boolean(startingHeight > 0 && unmountOnExit),
        message: "startingHeight and unmountOnExit are mutually exclusive. You can't use them together"
    });
    var custom = {
        startingHeight: startingHeight,
        endingHeight: endingHeight,
        animateOpacity: animateOpacity,
        transition: !mounted ? {
            enter: {
                duration: 0
            }
        } : transition,
        transitionEnd: _utils.mergeWith(transitionEnd, {
            enter: {
                overflow: "initial"
            },
            exit: {
                display: hasStartingHeight ? "block" : "none"
            }
        })
    };
    var show = unmountOnExit ? isOpen : true;
    var animate = isOpen || unmountOnExit ? "enter" : "exit";
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        initial: false,
        custom: custom
    }, show && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, _extends({
        ref: ref
    }, rest, {
        className: _utils.cx("chakra-collapse", className),
        style: _extends({
            overflow: "hidden",
            display: "block"
        }, style),
        custom: custom,
        variants: variants,
        initial: unmountOnExit ? "exit" : false,
        animate: animate,
        exit: "exit"
    }))));
});
exports.Collapse = Collapse;
if (_utils.__DEV__) Collapse.displayName = "Collapse";

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./transition-utils":"29X8r"}],"5ufJB":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var React = require('react');
var heyListen = require('hey-listen');
var styleValueTypes = require('style-value-types');
var popmotion = require('popmotion');
var sync = require('framesync');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        if (k !== 'default') {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                    return e[k];
                }
            });
        }
    });
    n['default'] = e;
    return Object.freeze(n);
}
var React__namespace = /*#__PURE__*/ _interopNamespace(React);
var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
var sync__default = /*#__PURE__*/ _interopDefaultLegacy(sync);
var createDefinition = function(propNames) {
    return {
        isEnabled: function(props) {
            return propNames.some(function(name) {
                return !!props[name];
            });
        }
    };
};
var featureDefinitions = {
    measureLayout: createDefinition([
        "layout",
        "layoutId",
        "drag",
        "_layoutResetTransform", 
    ]),
    animation: createDefinition([
        "animate",
        "exit",
        "variants",
        "whileHover",
        "whileTap",
        "whileFocus",
        "whileDrag", 
    ]),
    exit: createDefinition([
        "exit"
    ]),
    drag: createDefinition([
        "drag",
        "dragControls"
    ]),
    focus: createDefinition([
        "whileFocus"
    ]),
    hover: createDefinition([
        "whileHover",
        "onHoverStart",
        "onHoverEnd"
    ]),
    tap: createDefinition([
        "whileTap",
        "onTap",
        "onTapStart",
        "onTapCancel"
    ]),
    pan: createDefinition([
        "onPan",
        "onPanStart",
        "onPanSessionStart",
        "onPanEnd", 
    ]),
    layoutAnimation: createDefinition([
        "layout",
        "layoutId"
    ])
};
function loadFeatures(features) {
    for(var key in features){
        var Component = features[key];
        if (Component !== null) featureDefinitions[key].Component = Component;
    }
}
var LazyContext = React.createContext({
    strict: false
});
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
/**
 * Load features via renderless components based on the provided MotionProps.
 */ function useFeatures(props, visualElement, preloadedFeatures) {
    var features = [];
    var lazyContext = React.useContext(LazyContext);
    if (!visualElement) return null;
    /**
     * If we're in development mode, check to make sure we're not rendering a motion component
     * as a child of LazyMotion, as this will break the file-size benefits of using it.
     */ if (preloadedFeatures && lazyContext.strict) heyListen.invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
    for(var i = 0; i < numFeatures; i++){
        var name_1 = featureNames[i];
        var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;
        /**
         * It might be possible in the future to use this moment to
         * dynamically request functionality. In initial tests this
         * was producing a lot of duplication amongst bundles.
         */ if (isEnabled(props) && Component) features.push(React__namespace.createElement(Component, tslib.__assign({
            key: name_1
        }, props, {
            visualElement: visualElement
        })));
    }
    return features;
}
/**
 * @public
 */ var MotionConfigContext = React.createContext({
    transformPagePoint: function(p) {
        return p;
    },
    isStatic: false
});
var MotionContext = React.createContext({
});
function useVisualElementContext() {
    return React.useContext(MotionContext).visualElement;
}
/**
 * @public
 */ var PresenceContext = React.createContext(null);
/**
 * Creates a constant value over the lifecycle of a component.
 *
 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
 * you can ensure that initialisers don't execute twice or more.
 */ function useConstant(init) {
    var ref = React.useRef(null);
    if (ref.current === null) ref.current = init();
    return ref.current;
}
/**
 * When a component is the child of `AnimatePresence`, it can use `usePresence`
 * to access information about whether it's still present in the React tree.
 *
 * ```jsx
 * import { usePresence } from "framer-motion"
 *
 * export const Component = () => {
 *   const [isPresent, safeToRemove] = usePresence()
 *
 *   useEffect(() => {
 *     !isPresent && setTimeout(safeToRemove, 1000)
 *   }, [isPresent])
 *
 *   return <div />
 * }
 * ```
 *
 * If `isPresent` is `false`, it means that a component has been removed the tree, but
 * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
 *
 * @public
 */ function usePresence() {
    var context = React.useContext(PresenceContext);
    if (context === null) return [
        true,
        null
    ];
    var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
    // It's safe to call the following hooks conditionally (after an early return) because the context will always
    // either be null or non-null for the lifespan of the component.
    // Replace with useOpaqueId when released in React
    var id = useUniqueId();
    React.useEffect(function() {
        return register(id);
    }, []);
    var safeToRemove = function() {
        return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);
    };
    return !isPresent && onExitComplete ? [
        false,
        safeToRemove
    ] : [
        true
    ];
}
/**
 * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.
 * There is no `safeToRemove` function.
 *
 * ```jsx
 * import { useIsPresent } from "framer-motion"
 *
 * export const Component = () => {
 *   const isPresent = useIsPresent()
 *
 *   useEffect(() => {
 *     !isPresent && console.log("I've been removed!")
 *   }, [isPresent])
 *
 *   return <div />
 * }
 * ```
 *
 * @public
 */ function useIsPresent() {
    return isPresent(React.useContext(PresenceContext));
}
function isPresent(context) {
    return context === null ? true : context.isPresent;
}
var counter = 0;
var incrementId = function() {
    return counter++;
};
var useUniqueId = function() {
    return useConstant(incrementId);
};
/**
 * @internal
 */ var LayoutGroupContext = React.createContext(null);
var isBrowser = typeof window !== "undefined";
var useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;
function useLayoutId(_a) {
    var layoutId = _a.layoutId;
    var layoutGroupId = React.useContext(LayoutGroupContext);
    return layoutGroupId && layoutId !== undefined ? layoutGroupId + "-" + layoutId : layoutId;
}
function useVisualElement(Component, visualState, props, createVisualElement) {
    var config = React.useContext(MotionConfigContext);
    var lazyContext = React.useContext(LazyContext);
    var parent = useVisualElementContext();
    var presenceContext = React.useContext(PresenceContext);
    var layoutId = useLayoutId(props);
    var visualElementRef = React.useRef(undefined);
    /**
     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
     */ if (!createVisualElement) createVisualElement = lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) visualElementRef.current = createVisualElement(Component, {
        visualState: visualState,
        parent: parent,
        props: tslib.__assign(tslib.__assign({
        }, props), {
            layoutId: layoutId
        }),
        presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
        blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
    });
    var visualElement = visualElementRef.current;
    useIsomorphicLayoutEffect(function() {
        if (!visualElement) return;
        visualElement.setProps(tslib.__assign(tslib.__assign(tslib.__assign({
        }, config), props), {
            layoutId: layoutId
        }));
        visualElement.isPresent = isPresent(presenceContext);
        visualElement.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);
        /**
         * Fire a render to ensure the latest state is reflected on-screen.
         */ visualElement.syncRender();
    });
    React.useEffect(function() {
        var _a;
        if (!visualElement) return;
        /**
         * In a future refactor we can replace the features-as-components and
         * have this loop through them all firing "effect" listeners
         */ (_a = visualElement.animationState) === null || _a === void 0 || _a.animateChanges();
    });
    useIsomorphicLayoutEffect(function() {
        return function() {
            return visualElement === null || visualElement === void 0 ? void 0 : visualElement.notifyUnmount();
        };
    }, []);
    return visualElement;
}
function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}
/**
 * Creates a ref function that, when called, hydrates the provided
 * external ref and VisualElement.
 */ function useMotionRef(visualState, visualElement, externalRef) {
    return React.useCallback(function(instance) {
        var _a;
        instance && ((_a = visualState.mount) === null || _a === void 0 || _a.call(visualState, instance));
        if (visualElement) instance ? visualElement.mount(instance) : visualElement.unmount();
        if (externalRef) {
            if (typeof externalRef === "function") externalRef(instance);
            else if (isRefObject(externalRef)) externalRef.current = instance;
        }
    }, /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */ [
        visualElement
    ]);
}
/**
 * Decides if the supplied variable is an array of variant labels
 */ function isVariantLabels(v) {
    return Array.isArray(v);
}
/**
 * Decides if the supplied variable is variant label
 */ function isVariantLabel(v) {
    return typeof v === "string" || isVariantLabels(v);
}
/**
 * Creates an object containing the latest state of every MotionValue on a VisualElement
 */ function getCurrent(visualElement) {
    var current = {
    };
    visualElement.forEachValue(function(value, key) {
        return current[key] = value.get();
    });
    return current;
}
/**
 * Creates an object containing the latest velocity of every MotionValue on a VisualElement
 */ function getVelocity$1(visualElement) {
    var velocity = {
    };
    visualElement.forEachValue(function(value, key) {
        return velocity[key] = value.getVelocity();
    });
    return velocity;
}
function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
    var _a;
    if (currentValues === void 0) currentValues = {
    };
    if (currentVelocity === void 0) currentVelocity = {
    };
    if (typeof definition === "string") definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
    return typeof definition === "function" ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity) : definition;
}
function resolveVariant(visualElement, definition, custom) {
    var props = visualElement.getProps();
    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity$1(visualElement));
}
function checkIfControllingVariants(props) {
    var _a;
    return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
}
function checkIfVariantNode(props) {
    return Boolean(checkIfControllingVariants(props) || props.variants);
}
function getCurrentTreeVariants(props, context) {
    if (checkIfControllingVariants(props)) {
        var initial = props.initial, animate = props.animate;
        return {
            initial: initial === false || isVariantLabel(initial) ? initial : undefined,
            animate: isVariantLabel(animate) ? animate : undefined
        };
    }
    return props.inherit !== false ? context : {
    };
}
function useCreateMotionContext(props, isStatic) {
    var _a = getCurrentTreeVariants(props, React.useContext(MotionContext)), initial = _a.initial, animate = _a.animate;
    return React.useMemo(function() {
        return {
            initial: initial,
            animate: animate
        };
    }, /**
     * Only break memoisation in static mode
     */ isStatic ? [
        variantLabelsAsDependency(initial),
        variantLabelsAsDependency(animate), 
    ] : []);
}
function variantLabelsAsDependency(prop) {
    return Array.isArray(prop) ? prop.join(" ") : prop;
}
/**
 * Create a `motion` component.
 *
 * This function accepts a Component argument, which can be either a string (ie "div"
 * for `motion.div`), or an actual React component.
 *
 * Alongside this is a config option which provides a way of rendering the provided
 * component "offline", or outside the React render cycle.
 *
 * @internal
 */ function createMotionComponent(_a) {
    var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, useRender = _a.useRender, useVisualState = _a.useVisualState, Component = _a.Component;
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
        /**
         * If we're rendering in a static environment, we only visually update the component
         * as a result of a React-rerender rather than interactions or animations. This
         * means we don't need to load additional memory structures like VisualElement,
         * or any gesture/animation features.
         */ var isStatic = React.useContext(MotionConfigContext).isStatic;
        var features = null;
        /**
         * Create the tree context. This is memoized and will only trigger renders
         * when the current tree variant changes in static mode.
         */ var context = useCreateMotionContext(props, isStatic);
        /**
         *
         */ var visualState = useVisualState(props, isStatic);
        if (!isStatic && isBrowser) {
            /**
             * Create a VisualElement for this component. A VisualElement provides a common
             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as
             * providing a way of rendering to these APIs outside of the React render loop
             * for more performant animations and interactions
             */ context.visualElement = useVisualElement(Component, visualState, props, createVisualElement);
            /**
             * Load Motion gesture and animation features. These are rendered as renderless
             * components so each feature can optionally make use of React lifecycle methods.
             *
             * TODO: The intention is to move these away from a React-centric to a
             * VisualElement-centric lifecycle scheme.
             */ features = useFeatures(props, context.visualElement, preloadedFeatures);
        }
        /**
         * The mount order and hierarchy is specific to ensure our element ref
         * is hydrated by the time features fire their effects.
         */ return React__namespace.createElement(React__namespace.Fragment, null, React__namespace.createElement(MotionContext.Provider, {
            value: context
        }, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic)), features);
    }
    return React.forwardRef(MotionComponent);
}
/**
 * Convert any React component into a `motion` component. The provided component
 * **must** use `React.forwardRef` to the underlying DOM component you want to animate.
 *
 * ```jsx
 * const Component = React.forwardRef((props, ref) => {
 *   return <div ref={ref} />
 * })
 *
 * const MotionComponent = motion(Component)
 * ```
 *
 * @public
 */ function createMotionProxy(createConfig) {
    function custom(Component, customMotionComponentConfig) {
        if (customMotionComponentConfig === void 0) customMotionComponentConfig = {
        };
        return createMotionComponent(createConfig(Component, customMotionComponentConfig));
    }
    /**
     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.
     * Rather than generating them anew every render.
     */ var componentCache = new Map();
    return new Proxy(custom, {
        /**
         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
         * The prop name is passed through as `key` and we can use that to generate a `motion`
         * DOM component with that name.
         */ get: function(_target, key) {
            /**
             * If this element doesn't exist in the component cache, create it and cache.
             */ if (!componentCache.has(key)) componentCache.set(key, custom(key));
            return componentCache.get(key);
        }
    });
}
/**
 * We keep these listed seperately as we use the lowercase tag names as part
 * of the runtime bundle to detect SVG components
 */ var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "tspan",
    "use",
    "view", 
];
function isSVGComponent(Component) {
    if (/**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */ typeof Component !== "string" || /**
         * If it contains a dash, the element is a custom HTML webcomponent.
         */ Component.includes("-")) return false;
    else if (/**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */ lowercaseSVGElements.indexOf(Component) > -1 || /**
         * If it contains a capital letter, it's an SVG component
         */ /[A-Z]/.test(Component)) return true;
    return false;
}
var valueScaleCorrection = {
};
/**
 * @internal
 */ function addScaleCorrection(correctors) {
    for(var key in correctors)valueScaleCorrection[key] = correctors[key];
}
/**
 * A list of all transformable axes. We'll use this list to generated a version
 * of each axes for each transform.
 */ var transformAxes = [
    "",
    "X",
    "Y",
    "Z"
];
/**
 * An ordered array of each transformable value. By default, transform values
 * will be sorted to this order.
 */ var order = [
    "translate",
    "scale",
    "rotate",
    "skew"
];
/**
 * Generate a list of every possible transform key.
 */ var transformProps = [
    "transformPerspective",
    "x",
    "y",
    "z"
];
order.forEach(function(operationKey) {
    return transformAxes.forEach(function(axesKey) {
        return transformProps.push(operationKey + axesKey);
    });
});
/**
 * A function to use with Array.sort to sort transform keys by their default order.
 */ function sortTransformProps(a, b) {
    return transformProps.indexOf(a) - transformProps.indexOf(b);
}
/**
 * A quick lookup for transform props.
 */ var transformPropSet = new Set(transformProps);
function isTransformProp(key) {
    return transformPropSet.has(key);
}
/**
 * A quick lookup for transform origin props
 */ var transformOriginProps = new Set([
    "originX",
    "originY",
    "originZ"
]);
function isTransformOriginProp(key) {
    return transformOriginProps.has(key);
}
function isForcedMotionValue(key, _a) {
    var layout = _a.layout, layoutId = _a.layoutId;
    return isTransformProp(key) || isTransformOriginProp(key) || (layout || layoutId !== undefined) && (!!valueScaleCorrection[key] || key === "opacity");
}
var isMotionValue = function(value) {
    return value !== null && typeof value === "object" && value.getVelocity;
};
var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
};
/**
 * Build a CSS transform style from individual x/y/scale etc properties.
 *
 * This outputs with a default order of transforms/scales/rotations, this can be customised by
 * providing a transformTemplate function.
 */ function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
    var transform = _a.transform, transformKeys = _a.transformKeys;
    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
    // The transform string we're going to build into.
    var transformString = "";
    // Transform keys into their default order - this will determine the output order.
    transformKeys.sort(sortTransformProps);
    // Track whether the defined transform has a defined z so we don't add a
    // second to enable hardware acceleration
    var transformHasZ = false;
    // Loop over each transform and build them into transformString
    var numTransformKeys = transformKeys.length;
    for(var i = 0; i < numTransformKeys; i++){
        var key = transformKeys[i];
        transformString += (translateAlias[key] || key) + "(" + transform[key] + ") ";
        if (key === "z") transformHasZ = true;
    }
    if (!transformHasZ && enableHardwareAcceleration) transformString += "translateZ(0)";
    else transformString = transformString.trim();
    // If we have a custom `transform` template, pass our transform values and
    // generated transformString to that before returning
    if (transformTemplate) transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
    else if (allowTransformNone && transformIsDefault) transformString = "none";
    return transformString;
}
/**
 * Build a transformOrigin style. Uses the same defaults as the browser for
 * undefined origins.
 */ function buildTransformOrigin(_a) {
    var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
    return originX + " " + originY + " " + originZ;
}
/**
 * Returns true if the provided key is a CSS variable
 */ function isCSSVariable$1(key) {
    return key.startsWith("--");
}
/**
 * Provided a value and a ValueType, returns the value as that value type.
 */ var getValueAsType = function(value, type) {
    return type && typeof value === "number" ? type.transform(value) : value;
};
var int = tslib.__assign(tslib.__assign({
}, styleValueTypes.number), {
    transform: Math.round
});
var numberValueTypes = {
    // Border props
    borderWidth: styleValueTypes.px,
    borderTopWidth: styleValueTypes.px,
    borderRightWidth: styleValueTypes.px,
    borderBottomWidth: styleValueTypes.px,
    borderLeftWidth: styleValueTypes.px,
    borderRadius: styleValueTypes.px,
    radius: styleValueTypes.px,
    borderTopLeftRadius: styleValueTypes.px,
    borderTopRightRadius: styleValueTypes.px,
    borderBottomRightRadius: styleValueTypes.px,
    borderBottomLeftRadius: styleValueTypes.px,
    // Positioning props
    width: styleValueTypes.px,
    maxWidth: styleValueTypes.px,
    height: styleValueTypes.px,
    maxHeight: styleValueTypes.px,
    size: styleValueTypes.px,
    top: styleValueTypes.px,
    right: styleValueTypes.px,
    bottom: styleValueTypes.px,
    left: styleValueTypes.px,
    // Spacing props
    padding: styleValueTypes.px,
    paddingTop: styleValueTypes.px,
    paddingRight: styleValueTypes.px,
    paddingBottom: styleValueTypes.px,
    paddingLeft: styleValueTypes.px,
    margin: styleValueTypes.px,
    marginTop: styleValueTypes.px,
    marginRight: styleValueTypes.px,
    marginBottom: styleValueTypes.px,
    marginLeft: styleValueTypes.px,
    // Transform props
    rotate: styleValueTypes.degrees,
    rotateX: styleValueTypes.degrees,
    rotateY: styleValueTypes.degrees,
    rotateZ: styleValueTypes.degrees,
    scale: styleValueTypes.scale,
    scaleX: styleValueTypes.scale,
    scaleY: styleValueTypes.scale,
    scaleZ: styleValueTypes.scale,
    skew: styleValueTypes.degrees,
    skewX: styleValueTypes.degrees,
    skewY: styleValueTypes.degrees,
    distance: styleValueTypes.px,
    translateX: styleValueTypes.px,
    translateY: styleValueTypes.px,
    translateZ: styleValueTypes.px,
    x: styleValueTypes.px,
    y: styleValueTypes.px,
    z: styleValueTypes.px,
    perspective: styleValueTypes.px,
    transformPerspective: styleValueTypes.px,
    opacity: styleValueTypes.alpha,
    originX: styleValueTypes.progressPercentage,
    originY: styleValueTypes.progressPercentage,
    originZ: styleValueTypes.px,
    // Misc
    zIndex: int,
    // SVG
    fillOpacity: styleValueTypes.alpha,
    strokeOpacity: styleValueTypes.alpha,
    numOctaves: int
};
function buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
    var _a;
    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;
    // Empty the transformKeys array. As we're throwing out refs to its items
    // this might not be as cheap as suspected. Maybe using the array as a buffer
    // with a manual incrementation would be better.
    transformKeys.length = 0;
    // Track whether we encounter any transform or transformOrigin values.
    var hasTransform = false;
    var hasTransformOrigin = false;
    // Does the calculated transform essentially equal "none"?
    var transformIsNone = true;
    /**
     * Loop over all our latest animated values and decide whether to handle them
     * as a style or CSS variable.
     *
     * Transforms and transform origins are kept seperately for further processing.
     */ for(var key in latestValues){
        var value = latestValues[key];
        /**
         * If this is a CSS variable we don't do any further processing.
         */ if (isCSSVariable$1(key)) {
            vars[key] = value;
            continue;
        }
        // Convert the value to its default value type, ie 0 -> "0px"
        var valueType = numberValueTypes[key];
        var valueAsType = getValueAsType(value, valueType);
        if (isTransformProp(key)) {
            // If this is a transform, flag to enable further transform processing
            hasTransform = true;
            transform[key] = valueAsType;
            transformKeys.push(key);
            // If we already know we have a non-default transform, early return
            if (!transformIsNone) continue;
            // Otherwise check to see if this is a default transform
            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;
        } else if (isTransformOriginProp(key)) {
            transformOrigin[key] = valueAsType;
            // If this is a transform origin, flag and enable further transform-origin processing
            hasTransformOrigin = true;
        } else /**
             * If layout projection is on, and we need to perform scale correction for this
             * value type, perform it.
             */ if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState === null || layoutState === void 0 ? void 0 : layoutState.isHydrated) && valueScaleCorrection[key]) {
            var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);
            /**
                 * Scale-correctable values can define a number of other values to break
                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc
                 */ var applyTo = valueScaleCorrection[key].applyTo;
            if (applyTo) {
                var num = applyTo.length;
                for(var i = 0; i < num; i++)style[applyTo[i]] = correctedValue;
            } else style[key] = correctedValue;
        } else style[key] = valueAsType;
    }
    if (layoutState && projection && buildProjectionTransform && buildProjectionTransformOrigin) {
        style.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);
        if (transformTemplate) style.transform = transformTemplate(transform, style.transform);
        style.transformOrigin = buildProjectionTransformOrigin(layoutState);
    } else {
        if (hasTransform) style.transform = buildTransform(state, options, transformIsNone, transformTemplate);
        if (hasTransformOrigin) style.transformOrigin = buildTransformOrigin(transformOrigin);
    }
}
var createHtmlRenderState = function() {
    return {
        style: {
        },
        transform: {
        },
        transformKeys: [],
        transformOrigin: {
        },
        vars: {
        }
    };
};
function copyRawValuesOnly(target, source, props) {
    for(var key in source)if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) target[key] = source[key];
}
function useInitialMotionValues(_a, visualState, isStatic) {
    var transformTemplate = _a.transformTemplate;
    return React.useMemo(function() {
        var state = createHtmlRenderState();
        buildHTMLStyles(state, visualState, undefined, undefined, {
            enableHardwareAcceleration: !isStatic
        }, transformTemplate);
        var vars = state.vars, style = state.style;
        return tslib.__assign(tslib.__assign({
        }, vars), style);
    }, [
        visualState
    ]);
}
function useStyle(props, visualState, isStatic) {
    var styleProp = props.style || {
    };
    var style = {
    };
    /**
     * Copy non-Motion Values straight into style
     */ copyRawValuesOnly(style, styleProp, props);
    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
    if (props.transformValues) style = props.transformValues(style);
    return style;
}
function useHTMLProps(props, visualState, isStatic) {
    // The `any` isn't ideal but it is the type of createElement props argument
    var htmlProps = {
    };
    var style = useStyle(props, visualState, isStatic);
    if (Boolean(props.drag)) {
        // Disable the ghost element when a user drags
        htmlProps.draggable = false;
        // Disable text selection
        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
        // Disable scrolling on the draggable direction
        style.touchAction = props.drag === true ? "none" : "pan-" + (props.drag === "x" ? "y" : "x");
    }
    htmlProps.style = style;
    return htmlProps;
}
/**
 * A list of all valid MotionProps.
 *
 * @internalremarks
 * This doesn't throw if a `MotionProp` name is missing - it should.
 */ var validMotionProps = new Set([
    "initial",
    "animate",
    "exit",
    "style",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "layout",
    "layoutId",
    "_layoutResetTransform",
    "onLayoutAnimationComplete",
    "onViewportBoxUpdate",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "drag",
    "dragControls",
    "dragListener",
    "dragConstraints",
    "dragDirectionLock",
    "_dragX",
    "_dragY",
    "dragElastic",
    "dragMomentum",
    "dragPropagation",
    "dragTransition",
    "whileDrag",
    "onPan",
    "onPanStart",
    "onPanEnd",
    "onPanSessionStart",
    "onTap",
    "onTapStart",
    "onTapCancel",
    "onHoverStart",
    "onHoverEnd",
    "whileFocus",
    "whileTap",
    "whileHover", 
]);
/**
 * Check whether a prop name is a valid `MotionProp` key.
 *
 * @param key - Name of the property to check
 * @returns `true` is key is a valid `MotionProp`.
 *
 * @public
 */ function isValidMotionProp(key) {
    return validMotionProps.has(key);
}
var shouldForward = function(key) {
    return !isValidMotionProp(key);
};
/**
 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
 * of these should be passed to the underlying DOM node.
 *
 * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
 *
 * By making it an optionalDependency we can offer this functionality only in the situations where it's
 * actually required.
 */ try {
    var emotionIsPropValid_1 = require("@emotion/is-prop-valid").default;
    shouldForward = function(key) {
        // Handle events explicitly as Emotion validates them all as true
        if (key.startsWith("on")) return !isValidMotionProp(key);
        else return emotionIsPropValid_1(key);
    };
} catch (_a) {
// We don't need to actually do anything here - the fallback is the existing `isPropValid`.
}
function filterProps(props, isDom, forwardMotionProps) {
    var filteredProps = {
    };
    for(var key in props)if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key)) filteredProps[key] = props[key];
    return filteredProps;
}
function calcOrigin$1(origin, offset, size) {
    return typeof origin === "string" ? origin : styleValueTypes.px.transform(offset + size * origin);
}
/**
 * The SVG transform origin defaults are different to CSS and is less intuitive,
 * so we use the measured dimensions of the SVG to reconcile these.
 */ function calcSVGTransformOrigin(dimensions, originX, originY) {
    var pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);
    var pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);
    return pxOriginX + " " + pxOriginY;
}
// Convert a progress 0-1 to a pixels value based on the provided length
var progressToPixels = function(progress, length) {
    return styleValueTypes.px.transform(progress * length);
};
var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
};
var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
};
/**
 * Build SVG path properties. Uses the path's measured length to convert
 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
 * and stroke-dasharray attributes.
 *
 * This function is mutative to reduce per-frame GC.
 */ function buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {
    if (spacing === void 0) spacing = 1;
    if (offset === void 0) offset = 0;
    if (useDashCase === void 0) useDashCase = true;
    // We use dash case when setting attributes directly to the DOM node and camel case
    // when defining props on a React component.
    var keys = useDashCase ? dashKeys : camelKeys;
    // Build the dash offset
    attrs[keys.offset] = progressToPixels(-offset, totalLength);
    // Build the dash array
    var pathLength = progressToPixels(length, totalLength);
    var pathSpacing = progressToPixels(spacing, totalLength);
    attrs[keys.array] = pathLength + " " + pathSpacing;
}
/**
 * Build SVG visual attrbutes, like cx and style.transform
 */ function buildSVGAttrs(state, _a, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, // This is object creation, which we try to avoid per-frame.
    latest = tslib.__rest(_a, [
        "attrX",
        "attrY",
        "originX",
        "originY",
        "pathLength",
        "pathSpacing",
        "pathOffset"
    ]);
    buildHTMLStyles(state, latest, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin);
    state.attrs = state.style;
    state.style = {
    };
    var attrs = state.attrs, style = state.style, dimensions = state.dimensions, totalPathLength = state.totalPathLength;
    /**
     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs
     * and copy it into style.
     */ if (attrs.transform) {
        if (dimensions) style.transform = attrs.transform;
        delete attrs.transform;
    }
    // Parse transformOrigin
    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);
    // Treat x/y not as shortcuts but as actual attributes
    if (attrX !== undefined) attrs.x = attrX;
    if (attrY !== undefined) attrs.y = attrY;
    // Build SVG path if one has been measured
    if (totalPathLength !== undefined && pathLength !== undefined) buildSVGPath(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
}
var createSvgRenderState = function() {
    return tslib.__assign(tslib.__assign({
    }, createHtmlRenderState()), {
        attrs: {
        }
    });
};
function useSVGProps(props, visualState) {
    var visualProps = React.useMemo(function() {
        var state = createSvgRenderState();
        buildSVGAttrs(state, visualState, undefined, undefined, {
            enableHardwareAcceleration: false
        }, props.transformTemplate);
        return tslib.__assign(tslib.__assign({
        }, state.attrs), {
            style: tslib.__assign({
            }, state.style)
        });
    }, [
        visualState
    ]);
    if (props.style) {
        var rawStyles = {
        };
        copyRawValuesOnly(rawStyles, props.style, props);
        visualProps.style = tslib.__assign(tslib.__assign({
        }, rawStyles), visualProps.style);
    }
    return visualProps;
}
function createUseRender(forwardMotionProps) {
    if (forwardMotionProps === void 0) forwardMotionProps = false;
    var useRender = function(Component, props, ref, _a, isStatic) {
        var latestValues = _a.latestValues;
        var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
        var visualProps = useVisualProps(props, latestValues, isStatic);
        var filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
        var elementProps = tslib.__assign(tslib.__assign(tslib.__assign({
        }, filteredProps), visualProps), {
            ref: ref
        });
        return React.createElement(Component, elementProps);
    };
    return useRender;
}
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
/**
 * Convert camelCase to dash-case properties.
 */ var camelToDash = function(str) {
    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};
function renderHTML(element, _a) {
    var style = _a.style, vars = _a.vars;
    // Directly assign style into the Element's style prop. In tests Object.assign is the
    // fastest way to assign styles.
    Object.assign(element.style, style);
    // Loop over any CSS variables and assign those.
    for(var key in vars)element.style.setProperty(key, vars[key]);
}
/**
 * A set of attribute names that are always read/written as camel case.
 */ var camelCaseAttributes = new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform", 
]);
function renderSVG(element, renderState) {
    renderHTML(element, renderState);
    for(var key in renderState.attrs)element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
}
function scrapeMotionValuesFromProps$1(props) {
    var style = props.style;
    var newValues = {
    };
    for(var key in style)if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) newValues[key] = style[key];
    return newValues;
}
function scrapeMotionValuesFromProps(props) {
    var newValues = scrapeMotionValuesFromProps$1(props);
    for(var key in props)if (isMotionValue(props[key])) {
        var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
        newValues[targetKey] = props[key];
    }
    return newValues;
}
function isAnimationControls(v) {
    return typeof v === "object" && typeof v.start === "function";
}
var isKeyframesTarget = function(v) {
    return Array.isArray(v);
};
var isCustomValue = function(v) {
    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = function(v) {
    // TODO maybe throw if v.length - 1 is placeholder token?
    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};
/**
 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
 *
 * TODO: Remove and move to library
 *
 * @internal
 */ function resolveMotionValue(value) {
    var unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}
function makeState(_a, props, context, presenceContext) {
    var scrapeMotionValuesFromProps1 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
    var state = {
        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps1),
        renderState: createRenderState()
    };
    if (onMount) state.mount = function(instance) {
        return onMount(props, instance, state);
    };
    return state;
}
var makeUseVisualState = function(config) {
    return function(props, isStatic) {
        var context = React.useContext(MotionContext);
        var presenceContext = React.useContext(PresenceContext);
        return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function() {
            return makeState(config, props, context, presenceContext);
        });
    };
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    var values = {
    };
    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
    var motionValues = scrapeMotionValues(props);
    for(var key in motionValues)values[key] = resolveMotionValue(motionValues[key]);
    var initial = props.initial, animate = props.animate;
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
        initial !== null && initial !== void 0 || (initial = context.initial);
        animate !== null && animate !== void 0 || (animate = context.animate);
    }
    var variantToSet = blockInitialAnimation || initial === false ? animate : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
        var list = Array.isArray(variantToSet) ? variantToSet : [
            variantToSet
        ];
        list.forEach(function(definition) {
            var resolved = resolveVariantFromProps(props, definition);
            if (!resolved) return;
            var transitionEnd = resolved.transitionEnd;
            resolved.transition;
            var target = tslib.__rest(resolved, [
                "transitionEnd",
                "transition"
            ]);
            for(var key1 in target)values[key1] = target[key1];
            for(var key1 in transitionEnd)values[key1] = transitionEnd[key1];
        });
    }
    return values;
}
var svgMotionConfig = {
    useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
        createRenderState: createSvgRenderState,
        onMount: function(props, instance, _a) {
            var renderState = _a.renderState, latestValues = _a.latestValues;
            try {
                renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
            } catch (e) {
                // Most likely trying to measure an unrendered element under Firefox
                renderState.dimensions = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
            }
            if (isPath(instance)) renderState.totalPathLength = instance.getTotalLength();
            buildSVGAttrs(renderState, latestValues, undefined, undefined, {
                enableHardwareAcceleration: false
            }, props.transformTemplate);
            // TODO: Replace with direct assignment
            renderSVG(instance, renderState);
        }
    })
};
function isPath(element) {
    return element.tagName === "path";
}
var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
        createRenderState: createHtmlRenderState
    })
};
function createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement) {
    var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
    var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
    return tslib.__assign(tslib.__assign({
    }, baseConfig), {
        preloadedFeatures: preloadedFeatures,
        useRender: createUseRender(forwardMotionProps),
        createVisualElement: createVisualElement,
        Component: Component
    });
}
var AnimationType;
(function(AnimationType1) {
    AnimationType1["Animate"] = "animate";
    AnimationType1["Hover"] = "whileHover";
    AnimationType1["Tap"] = "whileTap";
    AnimationType1["Drag"] = "whileDrag";
    AnimationType1["Focus"] = "whileFocus";
    AnimationType1["Exit"] = "exit";
})(AnimationType || (AnimationType = {
}));
function addDomEvent(target, eventName, handler, options) {
    target.addEventListener(eventName, handler, options);
    return function() {
        return target.removeEventListener(eventName, handler, options);
    };
}
/**
 * Attaches an event listener directly to the provided DOM element.
 *
 * Bypassing React's event system can be desirable, for instance when attaching non-passive
 * event handlers.
 *
 * ```jsx
 * const ref = useRef(null)
 *
 * useDomEvent(ref, 'wheel', onWheel, { passive: false })
 *
 * return <div ref={ref} />
 * ```
 *
 * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.
 * @param eventName - Name of the event you want listen for.
 * @param handler - Function to fire when receiving the event.
 * @param options - Options to pass to `Event.addEventListener`.
 *
 * @public
 */ function useDomEvent(ref, eventName, handler, options) {
    React.useEffect(function() {
        var element = ref.current;
        if (handler && element) return addDomEvent(element, eventName, handler, options);
    }, [
        ref,
        eventName,
        handler,
        options
    ]);
}
/**
 *
 * @param props
 * @param ref
 * @internal
 */ function useFocusGesture(_a) {
    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;
    var onFocus = function() {
        var _a1;
        (_a1 = visualElement.animationState) === null || _a1 === void 0 || _a1.setActive(AnimationType.Focus, true);
    };
    var onBlur = function() {
        var _a1;
        (_a1 = visualElement.animationState) === null || _a1 === void 0 || _a1.setActive(AnimationType.Focus, false);
    };
    useDomEvent(visualElement, "focus", whileFocus ? onFocus : undefined);
    useDomEvent(visualElement, "blur", whileFocus ? onBlur : undefined);
}
function isMouseEvent(event) {
    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.
    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) return !!(event.pointerType === "mouse");
    return event instanceof MouseEvent;
}
function isTouchEvent(event) {
    var hasTouches = !!event.touches;
    return hasTouches;
}
/**
 * Filters out events not attached to the primary pointer (currently left mouse button)
 * @param eventHandler
 */ function filterPrimaryPointer(eventHandler) {
    return function(event) {
        var isMouseEvent1 = event instanceof MouseEvent;
        var isPrimaryPointer = !isMouseEvent1 || isMouseEvent1 && event.button === 0;
        if (isPrimaryPointer) eventHandler(event);
    };
}
var defaultPagePoint = {
    pageX: 0,
    pageY: 0
};
function pointFromTouch(e, pointType) {
    if (pointType === void 0) pointType = "page";
    var primaryTouch = e.touches[0] || e.changedTouches[0];
    var point = primaryTouch || defaultPagePoint;
    return {
        x: point[pointType + "X"],
        y: point[pointType + "Y"]
    };
}
function pointFromMouse(point, pointType) {
    if (pointType === void 0) pointType = "page";
    return {
        x: point[pointType + "X"],
        y: point[pointType + "Y"]
    };
}
function extractEventInfo(event, pointType) {
    if (pointType === void 0) pointType = "page";
    return {
        point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
}
function getViewportPointFromEvent(event) {
    return extractEventInfo(event, "client");
}
var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
    if (shouldFilterPrimaryPointer === void 0) shouldFilterPrimaryPointer = false;
    var listener = function(event) {
        return handler(event, extractEventInfo(event));
    };
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};
// We check for event support via functions in case they've been mocked by a testing suite.
var supportsPointerEvents = function() {
    return isBrowser && window.onpointerdown === null;
};
var supportsTouchEvents = function() {
    return isBrowser && window.ontouchstart === null;
};
var supportsMouseEvents = function() {
    return isBrowser && window.onmousedown === null;
};
var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
};
var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
};
function getPointerEventName(name) {
    if (supportsPointerEvents()) return name;
    else if (supportsTouchEvents()) return touchEventNames[name];
    else if (supportsMouseEvents()) return mouseEventNames[name];
    return name;
}
function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
}
function usePointerEvent(ref, eventName, handler, options) {
    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
}
function createLock(name) {
    var lock = null;
    return function() {
        var openLock = function() {
            lock = null;
        };
        if (lock === null) {
            lock = name;
            return openLock;
        }
        return false;
    };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag) {
    var lock = false;
    if (drag === "y") lock = globalVerticalLock();
    else if (drag === "x") lock = globalHorizontalLock();
    else {
        var openHorizontal_1 = globalHorizontalLock();
        var openVertical_1 = globalVerticalLock();
        if (openHorizontal_1 && openVertical_1) lock = function() {
            openHorizontal_1();
            openVertical_1();
        };
        else {
            // Release the locks because we don't use them
            if (openHorizontal_1) openHorizontal_1();
            if (openVertical_1) openVertical_1();
        }
    }
    return lock;
}
function isDragActive() {
    // Check the gesture lock - if we get it, it means no drag gesture is active
    // and we can safely fire the tap gesture.
    var openGestureLock = getGlobalLock(true);
    if (!openGestureLock) return true;
    openGestureLock();
    return false;
}
function createHoverEvent(visualElement, isActive, callback) {
    return function(event, info) {
        var _a;
        if (!isMouseEvent(event) || isDragActive()) return;
        callback === null || callback === void 0 || callback(event, info);
        (_a = visualElement.animationState) === null || _a === void 0 || _a.setActive(AnimationType.Hover, isActive);
    };
}
function useHoverGesture(_a) {
    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;
    usePointerEvent(visualElement, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement, true, onHoverStart) : undefined);
    usePointerEvent(visualElement, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement, false, onHoverEnd) : undefined);
}
/**
 * Recursively traverse up the tree to check whether the provided child node
 * is the parent or a descendant of it.
 *
 * @param parent - Element to find
 * @param child - Element to test against parent
 */ var isNodeOrChild = function(parent, child) {
    if (!child) return false;
    else if (parent === child) return true;
    else return isNodeOrChild(parent, child.parentElement);
};
function useUnmountEffect(callback) {
    return React.useEffect(function() {
        return function() {
            return callback();
        };
    }, []);
}
/**
 * @param handlers -
 * @internal
 */ function useTapGesture(_a) {
    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;
    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
    var isPressing = React.useRef(false);
    var cancelPointerEndListeners = React.useRef(null);
    function removePointerEndListener() {
        var _a1;
        (_a1 = cancelPointerEndListeners.current) === null || _a1 === void 0 || _a1.call(cancelPointerEndListeners);
        cancelPointerEndListeners.current = null;
    }
    function checkPointerEnd() {
        var _a1;
        removePointerEndListener();
        isPressing.current = false;
        (_a1 = visualElement.animationState) === null || _a1 === void 0 || _a1.setActive(AnimationType.Tap, false);
        return !isDragActive();
    }
    function onPointerUp(event, info) {
        if (!checkPointerEnd()) return;
        /**
         * We only count this as a tap gesture if the event.target is the same
         * as, or a child of, this component's element
         */ !isNodeOrChild(visualElement.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 || onTapCancel(event, info) : onTap === null || onTap === void 0 || onTap(event, info);
    }
    function onPointerCancel(event, info) {
        if (!checkPointerEnd()) return;
        onTapCancel === null || onTapCancel === void 0 || onTapCancel(event, info);
    }
    function onPointerDown(event, info) {
        var _a1;
        removePointerEndListener();
        if (isPressing.current) return;
        isPressing.current = true;
        cancelPointerEndListeners.current = popmotion.pipe(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
        onTapStart === null || onTapStart === void 0 || onTapStart(event, info);
        (_a1 = visualElement.animationState) === null || _a1 === void 0 || _a1.setActive(AnimationType.Tap, true);
    }
    usePointerEvent(visualElement, "pointerdown", hasPressListeners ? onPointerDown : undefined);
    useUnmountEffect(removePointerEndListener);
}
var makeRenderlessComponent = function(hook) {
    return function(props) {
        hook(props);
        return null;
    };
};
var gestureAnimations = {
    tap: makeRenderlessComponent(useTapGesture),
    focus: makeRenderlessComponent(useFocusGesture),
    hover: makeRenderlessComponent(useHoverGesture)
};
function shallowCompare(next, prev) {
    if (!Array.isArray(prev)) return false;
    var prevLength = prev.length;
    if (prevLength !== next.length) return false;
    for(var i = 0; i < prevLength; i++){
        if (prev[i] !== next[i]) return false;
    }
    return true;
}
/**
 * Converts seconds to milliseconds
 *
 * @param seconds - Time in seconds.
 * @return milliseconds - Converted time in milliseconds.
 */ var secondsToMilliseconds = function(seconds) {
    return seconds * 1000;
};
var easingLookup = {
    linear: popmotion.linear,
    easeIn: popmotion.easeIn,
    easeInOut: popmotion.easeInOut,
    easeOut: popmotion.easeOut,
    circIn: popmotion.circIn,
    circInOut: popmotion.circInOut,
    circOut: popmotion.circOut,
    backIn: popmotion.backIn,
    backInOut: popmotion.backInOut,
    backOut: popmotion.backOut,
    anticipate: popmotion.anticipate,
    bounceIn: popmotion.bounceIn,
    bounceInOut: popmotion.bounceInOut,
    bounceOut: popmotion.bounceOut
};
var easingDefinitionToFunction = function(definition) {
    if (Array.isArray(definition)) {
        // If cubic bezier definition, create bezier curve
        heyListen.invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
        var _a = tslib.__read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
        return popmotion.cubicBezier(x1, y1, x2, y2);
    } else if (typeof definition === "string") {
        // Else lookup from table
        heyListen.invariant(easingLookup[definition] !== undefined, "Invalid easing type '" + definition + "'");
        return easingLookup[definition];
    }
    return definition;
};
var isEasingArray = function(ease) {
    return Array.isArray(ease) && typeof ease[0] !== "number";
};
/**
 * Check if a value is animatable. Examples:
 *
 * ✅: 100, "100px", "#fff"
 * ❌: "block", "url(2.jpg)"
 * @param value
 *
 * @internal
 */ var isAnimatable = function(key, value) {
    // If the list of keys tat might be non-animatable grows, replace with Set
    if (key === "zIndex") return false;
    // If it's a number or a keyframes array, we can animate it. We might at some point
    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
    // but for now lets leave it like this for performance reasons
    if (typeof value === "number" || Array.isArray(value)) return true;
    if (typeof value === "string" && styleValueTypes.complex.test(value) && !value.startsWith("url(")) return true;
    return false;
};
var underDampedSpring = function() {
    return {
        type: "spring",
        stiffness: 500,
        damping: 25,
        restDelta: 0.5,
        restSpeed: 10
    };
};
var criticallyDampedSpring = function(to) {
    return {
        type: "spring",
        stiffness: 550,
        damping: to === 0 ? 2 * Math.sqrt(550) : 30,
        restDelta: 0.01,
        restSpeed: 10
    };
};
var linearTween = function() {
    return {
        type: "keyframes",
        ease: "linear",
        duration: 0.3
    };
};
var keyframes = function(values) {
    return {
        type: "keyframes",
        duration: 0.8,
        values: values
    };
};
var defaultTransitions = {
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: criticallyDampedSpring,
    scaleY: criticallyDampedSpring,
    scale: criticallyDampedSpring,
    opacity: linearTween,
    backgroundColor: linearTween,
    color: linearTween,
    default: criticallyDampedSpring
};
var getDefaultTransition = function(valueKey, to) {
    var transitionFactory;
    if (isKeyframesTarget(to)) transitionFactory = keyframes;
    else transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
    return tslib.__assign({
        to: to
    }, transitionFactory(to));
};
/**
 * A map of default value types for common values
 */ var defaultValueTypes = tslib.__assign(tslib.__assign({
}, numberValueTypes), {
    // Color props
    color: styleValueTypes.color,
    backgroundColor: styleValueTypes.color,
    outlineColor: styleValueTypes.color,
    fill: styleValueTypes.color,
    stroke: styleValueTypes.color,
    // Border props
    borderColor: styleValueTypes.color,
    borderTopColor: styleValueTypes.color,
    borderRightColor: styleValueTypes.color,
    borderBottomColor: styleValueTypes.color,
    borderLeftColor: styleValueTypes.color,
    filter: styleValueTypes.filter,
    WebkitFilter: styleValueTypes.filter
});
/**
 * Gets the default ValueType for the provided value key
 */ var getDefaultValueType = function(key) {
    return defaultValueTypes[key];
};
function getAnimatableNone(key, value) {
    var _a;
    var defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== styleValueTypes.filter) defaultValueType = styleValueTypes.complex;
    // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
}
/**
 * Decide whether a transition is defined on a given Transition.
 * This filters out orchestration options and returns true
 * if any options are left.
 */ function isTransitionDefined(_a) {
    _a.when;
    _a.delay;
    _a.delayChildren;
    _a.staggerChildren;
    _a.staggerDirection;
    _a.repeat;
    _a.repeatType;
    _a.repeatDelay;
    _a.from;
    var transition = tslib.__rest(_a, [
        "when",
        "delay",
        "delayChildren",
        "staggerChildren",
        "staggerDirection",
        "repeat",
        "repeatType",
        "repeatDelay",
        "from"
    ]);
    return !!Object.keys(transition).length;
}
var legacyRepeatWarning = false;
/**
 * Convert Framer Motion's Transition type into Popmotion-compatible options.
 */ function convertTransitionToAnimationOptions(_a) {
    var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition = tslib.__rest(_a, [
        "ease",
        "times",
        "yoyo",
        "flip",
        "loop"
    ]);
    var options = tslib.__assign({
    }, transition);
    if (times) options["offset"] = times;
    /**
     * Convert any existing durations from seconds to milliseconds
     */ if (transition.duration) options["duration"] = secondsToMilliseconds(transition.duration);
    if (transition.repeatDelay) options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);
    /**
     * Map easing names to Popmotion's easing functions
     */ if (ease) options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
    /**
     * Support legacy transition API
     */ if (transition.type === "tween") options.type = "keyframes";
    /**
     * TODO: These options are officially removed from the API.
     */ if (yoyo || loop || flip) {
        heyListen.warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
        legacyRepeatWarning = true;
        if (yoyo) options.repeatType = "reverse";
        else if (loop) options.repeatType = "loop";
        else if (flip) options.repeatType = "mirror";
        options.repeat = loop || yoyo || flip || transition.repeat;
    }
    /**
     * TODO: Popmotion 9 has the ability to automatically detect whether to use
     * a keyframes or spring animation, but does so by detecting velocity and other spring options.
     * It'd be good to introduce a similar thing here.
     */ if (transition.type !== "spring") options.type = "keyframes";
    return options;
}
/**
 * Get the delay for a value by checking Transition with decreasing specificity.
 */ function getDelayFromTransition(transition, key) {
    var _a;
    var valueTransition = getValueTransition(transition, key) || {
    };
    return (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : 0;
}
function hydrateKeyframes(options) {
    if (Array.isArray(options.to) && options.to[0] === null) {
        options.to = tslib.__spreadArray([], tslib.__read(options.to));
        options.to[0] = options.from;
    }
    return options;
}
function getPopmotionAnimationOptions(transition, options, key) {
    var _a;
    if (Array.isArray(options.to)) (_a = transition.duration) !== null && _a !== void 0 || (transition.duration = 0.8);
    hydrateKeyframes(options);
    /**
     * Get a default transition if none is determined to be defined.
     */ if (!isTransitionDefined(transition)) transition = tslib.__assign(tslib.__assign({
    }, transition), getDefaultTransition(key, options.to));
    return tslib.__assign(tslib.__assign({
    }, options), convertTransitionToAnimationOptions(transition));
}
/**
 *
 */ function getAnimation(key, value, target, transition, onComplete) {
    var _a;
    var valueTransition = getValueTransition(transition, key);
    var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
    var isTargetAnimatable = isAnimatable(key, target);
    if (origin === "none" && isTargetAnimatable && typeof target === "string") /**
         * If we're trying to animate from "none", try and get an animatable version
         * of the target. This could be improved to work both ways.
         */ origin = getAnimatableNone(key, target);
    else if (isZero(origin) && typeof target === "string") origin = getZeroUnit(target);
    else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") target = getZeroUnit(origin);
    var isOriginAnimatable = isAnimatable(key, origin);
    heyListen.warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate " + key + " from \"" + origin + "\" to \"" + target + "\". " + origin + " is not an animatable value - to enable this animation set " + origin + " to a value animatable to " + target + " via the `style` property.");
    function start() {
        var options = {
            from: origin,
            to: target,
            velocity: value.getVelocity(),
            onComplete: onComplete,
            onUpdate: function(v) {
                return value.set(v);
            }
        };
        return valueTransition.type === "inertia" || valueTransition.type === "decay" ? popmotion.inertia(tslib.__assign(tslib.__assign({
        }, options), valueTransition)) : popmotion.animate(tslib.__assign(tslib.__assign({
        }, getPopmotionAnimationOptions(valueTransition, options, key)), {
            onUpdate: function(v) {
                var _a1;
                options.onUpdate(v);
                (_a1 = valueTransition.onUpdate) === null || _a1 === void 0 || _a1.call(valueTransition, v);
            },
            onComplete: function() {
                var _a1;
                options.onComplete();
                (_a1 = valueTransition.onComplete) === null || _a1 === void 0 || _a1.call(valueTransition);
            }
        }));
    }
    function set() {
        var _a1;
        value.set(target);
        onComplete();
        (_a1 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a1 === void 0 || _a1.call(valueTransition);
        return {
            stop: function() {
            }
        };
    }
    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;
}
function isZero(value) {
    return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone("", potentialUnitType);
}
function getValueTransition(transition, key) {
    return transition[key] || transition["default"] || transition;
}
/**
 * Start animation on a MotionValue. This function is an interface between
 * Framer Motion and Popmotion
 *
 * @internal
 */ function startAnimation(key, value, target, transition) {
    if (transition === void 0) transition = {
    };
    return value.start(function(onComplete) {
        var delayTimer;
        var controls;
        var animation = getAnimation(key, value, target, transition, onComplete);
        var delay = getDelayFromTransition(transition, key);
        var start = function() {
            return controls = animation();
        };
        if (delay) delayTimer = setTimeout(start, secondsToMilliseconds(delay));
        else start();
        return function() {
            clearTimeout(delayTimer);
            controls === null || controls === void 0 || controls.stop();
        };
    });
}
/**
 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
 */ var isNumericalString = function(v) {
    return /^\-?\d*\.?\d+$/.test(v);
};
function addUniqueItem(arr, item) {
    arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem(arr, item) {
    var index = arr.indexOf(item);
    index > -1 && arr.splice(index, 1);
}
var SubscriptionManager = function() {
    function SubscriptionManager1() {
        this.subscriptions = [];
    }
    SubscriptionManager1.prototype.add = function(handler) {
        var _this = this;
        addUniqueItem(this.subscriptions, handler);
        return function() {
            return removeItem(_this.subscriptions, handler);
        };
    };
    SubscriptionManager1.prototype.notify = function(a, b, c) {
        var numSubscriptions = this.subscriptions.length;
        if (!numSubscriptions) return;
        if (numSubscriptions === 1) /**
             * If there's only a single handler we can just call it without invoking a loop.
             */ this.subscriptions[0](a, b, c);
        else for(var i = 0; i < numSubscriptions; i++){
            /**
                 * Check whether the handler exists before firing as it's possible
                 * the subscriptions were modified during this loop running.
                 */ var handler = this.subscriptions[i];
            handler && handler(a, b, c);
        }
    };
    SubscriptionManager1.prototype.getSize = function() {
        return this.subscriptions.length;
    };
    SubscriptionManager1.prototype.clear = function() {
        this.subscriptions.length = 0;
    };
    return SubscriptionManager1;
}();
var isFloat = function(value) {
    return !isNaN(parseFloat(value));
};
/**
 * `MotionValue` is used to track the state and velocity of motion values.
 *
 * @public
 */ var MotionValue = function() {
    /**
     * @param init - The initiating value
     * @param config - Optional configuration options
     *
     * -  `transformer`: A function to transform incoming values with.
     *
     * @internal
     */ function MotionValue1(init) {
        var _this = this;
        /**
         * Duration, in milliseconds, since last updating frame.
         *
         * @internal
         */ this.timeDelta = 0;
        /**
         * Timestamp of the last time this `MotionValue` was updated.
         *
         * @internal
         */ this.lastUpdated = 0;
        /**
         * Functions to notify when the `MotionValue` updates.
         *
         * @internal
         */ this.updateSubscribers = new SubscriptionManager();
        /**
         * Functions to notify when the velocity updates.
         *
         * @internal
         */ this.velocityUpdateSubscribers = new SubscriptionManager();
        /**
         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.
         *
         * @internal
         */ this.renderSubscribers = new SubscriptionManager();
        /**
         * Tracks whether this value can output a velocity. Currently this is only true
         * if the value is numerical, but we might be able to widen the scope here and support
         * other value types.
         *
         * @internal
         */ this.canTrackVelocity = false;
        this.updateAndNotify = function(v, render) {
            if (render === void 0) render = true;
            _this.prev = _this.current;
            _this.current = v;
            // Update timestamp
            var _a = sync.getFrameData(), delta = _a.delta, timestamp = _a.timestamp;
            if (_this.lastUpdated !== timestamp) {
                _this.timeDelta = delta;
                _this.lastUpdated = timestamp;
                sync__default['default'].postRender(_this.scheduleVelocityCheck);
            }
            // Update update subscribers
            if (_this.prev !== _this.current) _this.updateSubscribers.notify(_this.current);
            // Update velocity subscribers
            if (_this.velocityUpdateSubscribers.getSize()) _this.velocityUpdateSubscribers.notify(_this.getVelocity());
            // Update render subscribers
            if (render) _this.renderSubscribers.notify(_this.current);
        };
        /**
         * Schedule a velocity check for the next frame.
         *
         * This is an instanced and bound function to prevent generating a new
         * function once per frame.
         *
         * @internal
         */ this.scheduleVelocityCheck = function() {
            return sync__default['default'].postRender(_this.velocityCheck);
        };
        /**
         * Updates `prev` with `current` if the value hasn't been updated this frame.
         * This ensures velocity calculations return `0`.
         *
         * This is an instanced and bound function to prevent generating a new
         * function once per frame.
         *
         * @internal
         */ this.velocityCheck = function(_a) {
            var timestamp = _a.timestamp;
            if (timestamp !== _this.lastUpdated) {
                _this.prev = _this.current;
                _this.velocityUpdateSubscribers.notify(_this.getVelocity());
            }
        };
        this.hasAnimated = false;
        this.prev = this.current = init;
        this.canTrackVelocity = isFloat(this.current);
    }
    /**
     * Adds a function that will be notified when the `MotionValue` is updated.
     *
     * It returns a function that, when called, will cancel the subscription.
     *
     * When calling `onChange` inside a React component, it should be wrapped with the
     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
     * from the `useEffect` function to ensure you don't add duplicate subscribers..
     *
     * @library
     *
     * ```jsx
     * function MyComponent() {
     *   const x = useMotionValue(0)
     *   const y = useMotionValue(0)
     *   const opacity = useMotionValue(1)
     *
     *   useEffect(() => {
     *     function updateOpacity() {
     *       const maxXY = Math.max(x.get(), y.get())
     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
     *       opacity.set(newOpacity)
     *     }
     *
     *     const unsubscribeX = x.onChange(updateOpacity)
     *     const unsubscribeY = y.onChange(updateOpacity)
     *
     *     return () => {
     *       unsubscribeX()
     *       unsubscribeY()
     *     }
     *   }, [])
     *
     *   return <Frame x={x} />
     * }
     * ```
     *
     * @motion
     *
     * ```jsx
     * export const MyComponent = () => {
     *   const x = useMotionValue(0)
     *   const y = useMotionValue(0)
     *   const opacity = useMotionValue(1)
     *
     *   useEffect(() => {
     *     function updateOpacity() {
     *       const maxXY = Math.max(x.get(), y.get())
     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
     *       opacity.set(newOpacity)
     *     }
     *
     *     const unsubscribeX = x.onChange(updateOpacity)
     *     const unsubscribeY = y.onChange(updateOpacity)
     *
     *     return () => {
     *       unsubscribeX()
     *       unsubscribeY()
     *     }
     *   }, [])
     *
     *   return <motion.div style={{ x }} />
     * }
     * ```
     *
     * @internalremarks
     *
     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.
     *
     * ```jsx
     * useOnChange(x, () => {})
     * ```
     *
     * @param subscriber - A function that receives the latest value.
     * @returns A function that, when called, will cancel this subscription.
     *
     * @public
     */ MotionValue1.prototype.onChange = function(subscription) {
        return this.updateSubscribers.add(subscription);
    };
    MotionValue1.prototype.clearListeners = function() {
        this.updateSubscribers.clear();
    };
    /**
     * Adds a function that will be notified when the `MotionValue` requests a render.
     *
     * @param subscriber - A function that's provided the latest value.
     * @returns A function that, when called, will cancel this subscription.
     *
     * @internal
     */ MotionValue1.prototype.onRenderRequest = function(subscription) {
        // Render immediately
        subscription(this.get());
        return this.renderSubscribers.add(subscription);
    };
    /**
     * Attaches a passive effect to the `MotionValue`.
     *
     * @internal
     */ MotionValue1.prototype.attach = function(passiveEffect) {
        this.passiveEffect = passiveEffect;
    };
    /**
     * Sets the state of the `MotionValue`.
     *
     * @remarks
     *
     * ```jsx
     * const x = useMotionValue(0)
     * x.set(10)
     * ```
     *
     * @param latest - Latest value to set.
     * @param render - Whether to notify render subscribers. Defaults to `true`
     *
     * @public
     */ MotionValue1.prototype.set = function(v, render) {
        if (render === void 0) render = true;
        if (!render || !this.passiveEffect) this.updateAndNotify(v, render);
        else this.passiveEffect(v, this.updateAndNotify);
    };
    /**
     * Returns the latest state of `MotionValue`
     *
     * @returns - The latest state of `MotionValue`
     *
     * @public
     */ MotionValue1.prototype.get = function() {
        return this.current;
    };
    /**
     * @public
     */ MotionValue1.prototype.getPrevious = function() {
        return this.prev;
    };
    /**
     * Returns the latest velocity of `MotionValue`
     *
     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
     *
     * @public
     */ MotionValue1.prototype.getVelocity = function() {
        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful
        return this.canTrackVelocity ? popmotion.velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    };
    /**
     * Registers a new animation to control this `MotionValue`. Only one
     * animation can drive a `MotionValue` at one time.
     *
     * ```jsx
     * value.start()
     * ```
     *
     * @param animation - A function that starts the provided animation
     *
     * @internal
     */ MotionValue1.prototype.start = function(animation) {
        var _this = this;
        this.stop();
        return new Promise(function(resolve) {
            _this.hasAnimated = true;
            _this.stopAnimation = animation(resolve);
        }).then(function() {
            return _this.clearAnimation();
        });
    };
    /**
     * Stop the currently active animation.
     *
     * @public
     */ MotionValue1.prototype.stop = function() {
        if (this.stopAnimation) this.stopAnimation();
        this.clearAnimation();
    };
    /**
     * Returns `true` if this value is currently animating.
     *
     * @public
     */ MotionValue1.prototype.isAnimating = function() {
        return !!this.stopAnimation;
    };
    MotionValue1.prototype.clearAnimation = function() {
        this.stopAnimation = null;
    };
    /**
     * Destroy and clean up subscribers to this `MotionValue`.
     *
     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
     * created a `MotionValue` via the `motionValue` function.
     *
     * @public
     */ MotionValue1.prototype.destroy = function() {
        this.updateSubscribers.clear();
        this.renderSubscribers.clear();
        this.stop();
    };
    return MotionValue1;
}();
/**
 * @internal
 */ function motionValue(init) {
    return new MotionValue(init);
}
/**
 * Tests a provided value against a ValueType
 */ var testValueType = function(v) {
    return function(type) {
        return type.test(v);
    };
};
/**
 * ValueType for "auto"
 */ var auto = {
    test: function(v) {
        return v === "auto";
    },
    parse: function(v) {
        return v;
    }
};
/**
 * A list of value types commonly used for dimensions
 */ var dimensionValueTypes = [
    styleValueTypes.number,
    styleValueTypes.px,
    styleValueTypes.percent,
    styleValueTypes.degrees,
    styleValueTypes.vw,
    styleValueTypes.vh,
    auto
];
/**
 * Tests a dimensional value against the list of dimension ValueTypes
 */ var findDimensionValueType = function(v) {
    return dimensionValueTypes.find(testValueType(v));
};
/**
 * A list of all ValueTypes
 */ var valueTypes = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(dimensionValueTypes)), [
    styleValueTypes.color,
    styleValueTypes.complex
]);
/**
 * Tests a value against the list of ValueTypes
 */ var findValueType = function(v) {
    return valueTypes.find(testValueType(v));
};
/**
 * Set VisualElement's MotionValue, creating a new MotionValue for it if
 * it doesn't exist.
 */ function setMotionValue(visualElement, key, value) {
    if (visualElement.hasValue(key)) visualElement.getValue(key).set(value);
    else visualElement.addValue(key, motionValue(value));
}
function setTarget(visualElement, definition) {
    var resolved = resolveVariant(visualElement, definition);
    var _a = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {
    }, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {
    } : _b;
    _a.transition;
    var target = tslib.__rest(_a, [
        "transitionEnd",
        "transition"
    ]);
    target = tslib.__assign(tslib.__assign({
    }, target), transitionEnd);
    for(var key in target){
        var value = resolveFinalValueInKeyframes(target[key]);
        setMotionValue(visualElement, key, value);
    }
}
function setVariants(visualElement, variantLabels) {
    var reversedLabels = tslib.__spreadArray([], tslib.__read(variantLabels)).reverse();
    reversedLabels.forEach(function(key) {
        var _a;
        var variant = visualElement.getVariant(key);
        variant && setTarget(visualElement, variant);
        (_a = visualElement.variantChildren) === null || _a === void 0 || _a.forEach(function(child) {
            setVariants(child, variantLabels);
        });
    });
}
function setValues(visualElement, definition) {
    if (Array.isArray(definition)) return setVariants(visualElement, definition);
    else if (typeof definition === "string") return setVariants(visualElement, [
        definition
    ]);
    else setTarget(visualElement, definition);
}
function checkTargetForNewValues(visualElement, target, origin) {
    var _a, _b, _c;
    var _d;
    var newValueKeys = Object.keys(target).filter(function(key) {
        return !visualElement.hasValue(key);
    });
    var numNewValues = newValueKeys.length;
    if (!numNewValues) return;
    for(var i = 0; i < numNewValues; i++){
        var key = newValueKeys[i];
        var targetValue = target[key];
        var value = null;
        /**
         * If the target is a series of keyframes, we can use the first value
         * in the array. If this first value is null, we'll still need to read from the DOM.
         */ if (Array.isArray(targetValue)) value = targetValue[0];
        /**
         * If the target isn't keyframes, or the first keyframe was null, we need to
         * first check if an origin value was explicitly defined in the transition as "from",
         * if not read the value from the DOM. As an absolute fallback, take the defined target value.
         */ if (value === null) value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
        /**
         * If value is still undefined or null, ignore it. Preferably this would throw,
         * but this was causing issues in Framer.
         */ if (value === undefined || value === null) continue;
        if (typeof value === "string" && isNumericalString(value)) // If this is a number read as a string, ie "0" or "200", convert it to a number
        value = parseFloat(value);
        else if (!findValueType(value) && styleValueTypes.complex.test(targetValue)) value = getAnimatableNone(key, targetValue);
        visualElement.addValue(key, motionValue(value));
        (_c = (_d = origin)[key]) !== null && _c !== void 0 || (_d[key] = value);
        visualElement.setBaseTarget(key, value);
    }
}
function getOriginFromTransition(key, transition) {
    if (!transition) return;
    var valueTransition = transition[key] || transition["default"] || transition;
    return valueTransition.from;
}
function getOrigin(target, transition, visualElement) {
    var _a, _b;
    var origin = {
    };
    for(var key in target)origin[key] = (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
    return origin;
}
/**
 * @internal
 */ function animateVisualElement(visualElement, definition, options) {
    if (options === void 0) options = {
    };
    visualElement.notifyAnimationStart();
    var animation;
    if (Array.isArray(definition)) {
        var animations = definition.map(function(variant) {
            return animateVariant(visualElement, variant, options);
        });
        animation = Promise.all(animations);
    } else if (typeof definition === "string") animation = animateVariant(visualElement, definition, options);
    else {
        var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
        animation = animateTarget(visualElement, resolvedDefinition, options);
    }
    return animation.then(function() {
        return visualElement.notifyAnimationComplete(definition);
    });
}
function animateVariant(visualElement, variant, options) {
    var _a;
    if (options === void 0) options = {
    };
    var resolved = resolveVariant(visualElement, variant, options.custom);
    var _b = (resolved || {
    }).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {
    } : _b;
    if (options.transitionOverride) transition = options.transitionOverride;
    /**
     * If we have a variant, create a callback that runs it as an animation.
     * Otherwise, we resolve a Promise immediately for a composable no-op.
     */ var getAnimation1 = resolved ? function() {
        return animateTarget(visualElement, resolved, options);
    } : function() {
        return Promise.resolve();
    };
    /**
     * If we have children, create a callback that runs all their animations.
     * Otherwise, we resolve a Promise immediately for a composable no-op.
     */ var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
        if (forwardDelay === void 0) forwardDelay = 0;
        var _a1 = transition.delayChildren, delayChildren = _a1 === void 0 ? 0 : _a1, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;
        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : function() {
        return Promise.resolve();
    };
    /**
     * If the transition explicitly defines a "when" option, we need to resolve either
     * this animation or all children animations before playing the other.
     */ var when = transition.when;
    if (when) {
        var _c = tslib.__read(when === "beforeChildren" ? [
            getAnimation1,
            getChildAnimations
        ] : [
            getChildAnimations,
            getAnimation1
        ], 2), first = _c[0], last = _c[1];
        return first().then(last);
    } else return Promise.all([
        getAnimation1(),
        getChildAnimations(options.delay)
    ]);
}
/**
 * @internal
 */ function animateTarget(visualElement, definition, _a) {
    var _b;
    var _c = _a === void 0 ? {
    } : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = tslib.__rest(_e, [
        "transition",
        "transitionEnd"
    ]);
    if (transitionOverride) transition = transitionOverride;
    var animations = [];
    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
    for(var key in target){
        var value = visualElement.getValue(key);
        var valueTarget = target[key];
        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) continue;
        var animation = startAnimation(key, value, valueTarget, tslib.__assign({
            delay: delay
        }, transition));
        animations.push(animation);
    }
    return Promise.all(animations).then(function() {
        transitionEnd && setTarget(visualElement, transitionEnd);
    });
}
function animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {
    if (delayChildren === void 0) delayChildren = 0;
    if (staggerChildren === void 0) staggerChildren = 0;
    if (staggerDirection === void 0) staggerDirection = 1;
    var animations = [];
    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
    var generateStaggerDuration = staggerDirection === 1 ? function(i) {
        if (i === void 0) i = 0;
        return i * staggerChildren;
    } : function(i) {
        if (i === void 0) i = 0;
        return maxStaggerDuration - i * staggerChildren;
    };
    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
        animations.push(animateVariant(child, variant, tslib.__assign(tslib.__assign({
        }, options), {
            delay: delayChildren + generateStaggerDuration(i)
        })).then(function() {
            return child.notifyAnimationComplete(variant);
        }));
    });
    return Promise.all(animations);
}
function stopAnimation(visualElement) {
    visualElement.forEachValue(function(value) {
        return value.stop();
    });
}
function sortByTreeOrder(a, b) {
    return a.sortNodePosition(b);
}
/**
 * Decide whether we should block this animation. Previously, we achieved this
 * just by checking whether the key was listed in protectedKeys, but this
 * posed problems if an animation was triggered by afterChildren and protectedKeys
 * had been set to true in the meantime.
 */ function shouldBlockAnimation(_a, key) {
    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
}
var variantPriorityOrder = [
    AnimationType.Animate,
    AnimationType.Hover,
    AnimationType.Tap,
    AnimationType.Drag,
    AnimationType.Focus,
    AnimationType.Exit, 
];
var reversePriorityOrder = tslib.__spreadArray([], tslib.__read(variantPriorityOrder)).reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
    return function(animations) {
        return Promise.all(animations.map(function(_a) {
            var animation = _a.animation, options = _a.options;
            return animateVisualElement(visualElement, animation, options);
        }));
    };
}
function createAnimationState(visualElement) {
    var animate = animateList(visualElement);
    var state = createState();
    var allAnimatedKeys = {
    };
    var isInitialRender = true;
    /**
     * This function will be used to reduce the animation definitions for
     * each active animation type into an object of resolved values for it.
     */ var buildResolvedTypeValues = function(acc, definition) {
        var resolved = resolveVariant(visualElement, definition);
        if (resolved) {
            resolved.transition;
            var transitionEnd = resolved.transitionEnd, target = tslib.__rest(resolved, [
                "transition",
                "transitionEnd"
            ]);
            acc = tslib.__assign(tslib.__assign(tslib.__assign({
            }, acc), target), transitionEnd);
        }
        return acc;
    };
    function isAnimated(key) {
        return allAnimatedKeys[key] !== undefined;
    }
    /**
     * This just allows us to inject mocked animation functions
     * @internal
     */ function setAnimateFunction(makeAnimator) {
        animate = makeAnimator(visualElement);
    }
    /**
     * When we receive new props, we need to:
     * 1. Create a list of protected keys for each type. This is a directory of
     *    value keys that are currently being "handled" by types of a higher priority
     *    so that whenever an animation is played of a given type, these values are
     *    protected from being animated.
     * 2. Determine if an animation type needs animating.
     * 3. Determine if any values have been removed from a type and figure out
     *    what to animate those to.
     */ function animateChanges(options, changedActiveType) {
        var _a;
        var props = visualElement.getProps();
        var context = visualElement.getVariantContext(true) || {
        };
        /**
         * A list of animations that we'll build into as we iterate through the animation
         * types. This will get executed at the end of the function.
         */ var animations = [];
        /**
         * Keep track of which values have been removed. Then, as we hit lower priority
         * animation types, we can check if they contain removed values and animate to that.
         */ var removedKeys = new Set();
        /**
         * A dictionary of all encountered keys. This is an object to let us build into and
         * copy it without iteration. Each time we hit an animation type we set its protected
         * keys - the keys its not allowed to animate - to the latest version of this object.
         */ var encounteredKeys = {
        };
        /**
         * If a variant has been removed at a given index, and this component is controlling
         * variant animations, we want to ensure lower-priority variants are forced to animate.
         */ var removedVariantIndex = Infinity;
        var _loop_1 = function(i) {
            var type = reversePriorityOrder[i];
            var typeState = state[type];
            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
            var propIsVariant = isVariantLabel(prop);
            /**
             * If this type has *just* changed isActive status, set activeDelta
             * to that status. Otherwise set to null.
             */ var activeDelta = type === changedActiveType ? typeState.isActive : null;
            if (activeDelta === false) removedVariantIndex = i;
            /**
             * If this prop is an inherited variant, rather than been set directly on the
             * component itself, we want to make sure we allow the parent to trigger animations.
             *
             * TODO: Can probably change this to a !isControllingVariants check
             */ var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
            /**
             *
             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) isInherited = false;
            /**
             * Set all encountered keys so far as the protected keys for this type. This will
             * be any key that has been animated or otherwise handled by active, higher-priortiy types.
             */ typeState.protectedKeys = tslib.__assign({
            }, encounteredKeys);
            // Check if we can skip analysing this prop early
            if (// If it isn't active and hasn't *just* been set as inactive
            !typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
            isAnimationControls(prop) || typeof prop === "boolean") return "continue";
            /**
             * As we go look through the values defined on this type, if we detect
             * a changed value or a value that was removed in a higher priority, we set
             * this to true and add this prop to the animation list.
             */ var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i > removedVariantIndex && propIsVariant;
            /**
             * As animations can be set as variant lists, variants or target objects, we
             * coerce everything to an array if it isn't one already
             */ var definitionList = Array.isArray(prop) ? prop : [
                prop
            ];
            /**
             * Build an object of all the resolved values. We'll use this in the subsequent
             * animateChanges calls to determine whether a value has changed.
             */ var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {
            });
            if (activeDelta === false) resolvedValues = {
            };
            /**
             * Now we need to loop through all the keys in the prev prop and this prop,
             * and decide:
             * 1. If the value has changed, and needs animating
             * 2. If it has been removed, and needs adding to the removedKeys set
             * 3. If it has been removed in a higher priority type and needs animating
             * 4. If it hasn't been removed in a higher priority but hasn't changed, and
             *    needs adding to the type's protectedKeys list.
             */ var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {
            } : _b;
            var allKeys = tslib.__assign(tslib.__assign({
            }, prevResolvedValues), resolvedValues);
            var markToAnimate = function(key) {
                shouldAnimateType = true;
                removedKeys.delete(key);
                typeState.needsAnimating[key] = true;
            };
            for(var key in allKeys){
                var next = resolvedValues[key];
                var prev = prevResolvedValues[key];
                // If we've already handled this we can just skip ahead
                if (encounteredKeys.hasOwnProperty(key)) continue;
                /**
                 * If the value has changed, we probably want to animate it.
                 */ if (next !== prev) {
                    /**
                     * If both values are keyframes, we need to shallow compare them to
                     * detect whether any value has changed. If it has, we animate it.
                     */ if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
                        if (!shallowCompare(next, prev)) markToAnimate(key);
                        else /**
                             * If it hasn't changed, we want to ensure it doesn't animate by
                             * adding it to the list of protected keys.
                             */ typeState.protectedKeys[key] = true;
                    } else if (next !== undefined) // If next is defined and doesn't equal prev, it needs animating
                    markToAnimate(key);
                    else // If it's undefined, it's been removed.
                    removedKeys.add(key);
                } else if (next !== undefined && removedKeys.has(key)) /**
                     * If next hasn't changed and it isn't undefined, we want to check if it's
                     * been removed by a higher priority
                     */ markToAnimate(key);
                else /**
                     * If it hasn't changed, we add it to the list of protected values
                     * to ensure it doesn't get animated.
                     */ typeState.protectedKeys[key] = true;
            }
            /**
             * Update the typeState so next time animateChanges is called we can compare the
             * latest prop and resolvedValues to these.
             */ typeState.prevProp = prop;
            typeState.prevResolvedValues = resolvedValues;
            /**
             *
             */ if (typeState.isActive) encounteredKeys = tslib.__assign(tslib.__assign({
            }, encounteredKeys), resolvedValues);
            if (isInitialRender && visualElement.blockInitialAnimation) shouldAnimateType = false;
            /**
             * If this is an inherited prop we want to hard-block animations
             * TODO: Test as this should probably still handle animations triggered
             * by removed values?
             */ if (shouldAnimateType && !isInherited) animations.push.apply(animations, tslib.__spreadArray([], tslib.__read(definitionList.map(function(animation) {
                return {
                    animation: animation,
                    options: tslib.__assign({
                        type: type
                    }, options)
                };
            }))));
        };
        /**
         * Iterate through all animation types in reverse priority order. For each, we want to
         * detect which values it's handling and whether or not they've changed (and therefore
         * need to be animated). If any values have been removed, we want to detect those in
         * lower priority props and flag for animation.
         */ for(var i = 0; i < numAnimationTypes; i++)_loop_1(i);
        allAnimatedKeys = tslib.__assign({
        }, encounteredKeys);
        /**
         * If there are some removed value that haven't been dealt with,
         * we need to create a new animation that falls back either to the value
         * defined in the style prop, or the last read value.
         */ if (removedKeys.size) {
            var fallbackAnimation_1 = {
            };
            removedKeys.forEach(function(key) {
                var fallbackTarget = visualElement.getBaseTarget(key);
                if (fallbackTarget !== undefined) fallbackAnimation_1[key] = fallbackTarget;
            });
            animations.push({
                animation: fallbackAnimation_1
            });
        }
        var shouldAnimate = Boolean(animations.length);
        if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) shouldAnimate = false;
        isInitialRender = false;
        return shouldAnimate ? animate(animations) : Promise.resolve();
    }
    /**
     * Change whether a certain animation type is active.
     */ function setActive(type, isActive, options) {
        var _a;
        // If the active state hasn't changed, we can safely do nothing here
        if (state[type].isActive === isActive) return Promise.resolve();
        // Propagate active change to children
        (_a = visualElement.variantChildren) === null || _a === void 0 || _a.forEach(function(child) {
            var _a1;
            return (_a1 = child.animationState) === null || _a1 === void 0 ? void 0 : _a1.setActive(type, isActive);
        });
        state[type].isActive = isActive;
        return animateChanges(options, type);
    }
    return {
        isAnimated: isAnimated,
        animateChanges: animateChanges,
        setActive: setActive,
        setAnimateFunction: setAnimateFunction,
        getState: function() {
            return state;
        }
    };
}
function variantsHaveChanged(prev, next) {
    if (typeof next === "string") return next !== prev;
    else if (isVariantLabels(next)) return !shallowCompare(next, prev);
    return false;
}
function createTypeState(isActive) {
    if (isActive === void 0) isActive = false;
    return {
        isActive: isActive,
        protectedKeys: {
        },
        needsAnimating: {
        },
        prevResolvedValues: {
        }
    };
}
function createState() {
    var _a;
    return _a = {
    }, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
}
var animations = {
    animation: makeRenderlessComponent(function(_a) {
        var visualElement = _a.visualElement, animate = _a.animate;
        /**
         * We dynamically generate the AnimationState manager as it contains a reference
         * to the underlying animation library. We only want to load that if we load this,
         * so people can optionally code split it out using the `m` component.
         */ visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));
        /**
         * Subscribe any provided AnimationControls to the component's VisualElement
         */ if (isAnimationControls(animate)) React.useEffect(function() {
            return animate.subscribe(visualElement);
        }, [
            animate
        ]);
    }),
    exit: makeRenderlessComponent(function(props) {
        var custom = props.custom, visualElement = props.visualElement;
        var _a = tslib.__read(usePresence(), 2), isPresent1 = _a[0], onExitComplete = _a[1];
        var presenceContext = React.useContext(PresenceContext);
        React.useEffect(function() {
            var _a1, _b;
            var animation = (_a1 = visualElement.animationState) === null || _a1 === void 0 ? void 0 : _a1.setActive(AnimationType.Exit, !isPresent1, {
                custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom
            });
            !isPresent1 && (animation === null || animation === void 0 || animation.then(onExitComplete));
        }, [
            isPresent1
        ]);
    })
};
/**
 * @internal
 */ var PanSession = function() {
    function PanSession1(event, handlers, _a) {
        var _this = this;
        var _b = _a === void 0 ? {
        } : _a, transformPagePoint = _b.transformPagePoint;
        /**
         * @internal
         */ this.startEvent = null;
        /**
         * @internal
         */ this.lastMoveEvent = null;
        /**
         * @internal
         */ this.lastMoveEventInfo = null;
        /**
         * @internal
         */ this.handlers = {
        };
        this.updatePoint = function() {
            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo)) return;
            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);
            var isPanStarted = _this.startEvent !== null;
            // Only start panning if the offset is larger than 3 pixels. If we make it
            // any larger than this we'll want to reset the pointer history
            // on the first update to avoid visual snapping to the cursoe.
            var isDistancePastThreshold = popmotion.distance(info.offset, {
                x: 0,
                y: 0
            }) >= 3;
            if (!isPanStarted && !isDistancePastThreshold) return;
            var point = info.point;
            var timestamp = sync.getFrameData().timestamp;
            _this.history.push(tslib.__assign(tslib.__assign({
            }, point), {
                timestamp: timestamp
            }));
            var _a1 = _this.handlers, onStart = _a1.onStart, onMove = _a1.onMove;
            if (!isPanStarted) {
                onStart && onStart(_this.lastMoveEvent, info);
                _this.startEvent = _this.lastMoveEvent;
            }
            onMove && onMove(_this.lastMoveEvent, info);
        };
        this.handlePointerMove = function(event1, info) {
            _this.lastMoveEvent = event1;
            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);
            // Because Safari doesn't trigger mouseup events when it's above a `<select>`
            if (isMouseEvent(event1) && event1.buttons === 0) {
                _this.handlePointerUp(event1, info);
                return;
            }
            // Throttle mouse move event to once per frame
            sync__default['default'].update(_this.updatePoint, true);
        };
        this.handlePointerUp = function(event1, info) {
            _this.end();
            var _a1 = _this.handlers, onEnd = _a1.onEnd, onSessionEnd = _a1.onSessionEnd;
            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);
            if (_this.startEvent && onEnd) onEnd(event1, panInfo);
            onSessionEnd && onSessionEnd(event1, panInfo);
        };
        // If we have more than one touch, don't start detecting this gesture
        if (isTouchEvent(event) && event.touches.length > 1) return;
        this.handlers = handlers;
        this.transformPagePoint = transformPagePoint;
        var info = extractEventInfo(event);
        var initialInfo = transformPoint(info, this.transformPagePoint);
        var point = initialInfo.point;
        var timestamp = sync.getFrameData().timestamp;
        this.history = [
            tslib.__assign(tslib.__assign({
            }, point), {
                timestamp: timestamp
            })
        ];
        var onSessionStart = handlers.onSessionStart;
        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
        this.removeListeners = popmotion.pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
    }
    PanSession1.prototype.updateHandlers = function(handlers) {
        this.handlers = handlers;
    };
    PanSession1.prototype.end = function() {
        this.removeListeners && this.removeListeners();
        sync.cancelSync.update(this.updatePoint);
    };
    return PanSession1;
}();
function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? {
        point: transformPagePoint(info.point)
    } : info;
}
function subtractPoint(a, b) {
    return {
        x: a.x - b.x,
        y: a.y - b.y
    };
}
function getPanInfo(_a, history) {
    var point = _a.point;
    return {
        point: point,
        delta: subtractPoint(point, lastDevicePoint(history)),
        offset: subtractPoint(point, startDevicePoint(history)),
        velocity: getVelocity(history, 0.1)
    };
}
function startDevicePoint(history) {
    return history[0];
}
function lastDevicePoint(history) {
    return history[history.length - 1];
}
function getVelocity(history, timeDelta) {
    if (history.length < 2) return {
        x: 0,
        y: 0
    };
    var i = history.length - 1;
    var timestampedPoint = null;
    var lastPoint = lastDevicePoint(history);
    while(i >= 0){
        timestampedPoint = history[i];
        if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) break;
        i--;
    }
    if (!timestampedPoint) return {
        x: 0,
        y: 0
    };
    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;
    if (time === 0) return {
        x: 0,
        y: 0
    };
    var currentVelocity = {
        x: (lastPoint.x - timestampedPoint.x) / time,
        y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) currentVelocity.x = 0;
    if (currentVelocity.y === Infinity) currentVelocity.y = 0;
    return currentVelocity;
}
function noop(any) {
    return any;
}
/**
 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
 * it's easier to consider each axis individually. This function returns a bounding box
 * as a map of single-axis min/max values.
 */ function convertBoundingBoxToAxisBox(_a) {
    var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;
    return {
        x: {
            min: left,
            max: right
        },
        y: {
            min: top,
            max: bottom
        }
    };
}
function convertAxisBoxToBoundingBox(_a) {
    var x = _a.x, y = _a.y;
    return {
        top: y.min,
        bottom: y.max,
        left: x.min,
        right: x.max
    };
}
/**
 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
 * provided by Framer to allow measured points to be corrected for device scaling. This is used
 * when measuring DOM elements and DOM event points.
 */ function transformBoundingBox(_a, transformPoint1) {
    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
    if (transformPoint1 === void 0) transformPoint1 = noop;
    var topLeft = transformPoint1({
        x: left,
        y: top
    });
    var bottomRight = transformPoint1({
        x: right,
        y: bottom
    });
    return {
        top: topLeft.y,
        left: topLeft.x,
        bottom: bottomRight.y,
        right: bottomRight.x
    };
}
/**
 * Create an empty axis box of zero size
 */ function axisBox() {
    return {
        x: {
            min: 0,
            max: 1
        },
        y: {
            min: 0,
            max: 1
        }
    };
}
function copyAxisBox(box) {
    return {
        x: tslib.__assign({
        }, box.x),
        y: tslib.__assign({
        }, box.y)
    };
}
/**
 * Create an empty box delta
 */ var zeroDelta = {
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
};
function delta() {
    return {
        x: tslib.__assign({
        }, zeroDelta),
        y: tslib.__assign({
        }, zeroDelta)
    };
}
// Call a handler once for each axis
function eachAxis(handler) {
    return [
        handler("x"),
        handler("y")
    ];
}
var clampProgress = function(v) {
    return popmotion.clamp(0, 1, v);
};
/**
 * Returns true if the provided value is within maxDistance of the provided target
 */ function isNear(value, target, maxDistance) {
    if (target === void 0) target = 0;
    if (maxDistance === void 0) maxDistance = 0.01;
    return popmotion.distance(value, target) < maxDistance;
}
function calcLength(axis) {
    return axis.max - axis.min;
}
/**
 * Calculate a transform origin relative to the source axis, between 0-1, that results
 * in an asthetically pleasing scale/transform needed to project from source to target.
 */ function calcOrigin(source, target) {
    var origin = 0.5;
    var sourceLength = calcLength(source);
    var targetLength = calcLength(target);
    if (targetLength > sourceLength) origin = popmotion.progress(target.min, target.max - sourceLength, source.min);
    else if (sourceLength > targetLength) origin = popmotion.progress(source.min, source.max - targetLength, target.min);
    return clampProgress(origin);
}
/**
 * Update the AxisDelta with a transform that projects source into target.
 *
 * The transform `origin` is optional. If not provided, it'll be automatically
 * calculated based on the relative positions of the two bounding boxes.
 */ function updateAxisDelta(delta1, source, target, origin) {
    if (origin === void 0) origin = 0.5;
    delta1.origin = origin;
    delta1.originPoint = popmotion.mix(source.min, source.max, delta1.origin);
    delta1.scale = calcLength(target) / calcLength(source);
    if (isNear(delta1.scale, 1, 0.0001)) delta1.scale = 1;
    delta1.translate = popmotion.mix(target.min, target.max, delta1.origin) - delta1.originPoint;
    if (isNear(delta1.translate)) delta1.translate = 0;
}
/**
 * Update the BoxDelta with a transform that projects the source into the target.
 *
 * The transform `origin` is optional. If not provided, it'll be automatically
 * calculated based on the relative positions of the two bounding boxes.
 */ function updateBoxDelta(delta1, source, target, origin) {
    updateAxisDelta(delta1.x, source.x, target.x, defaultOrigin(origin.originX));
    updateAxisDelta(delta1.y, source.y, target.y, defaultOrigin(origin.originY));
}
/**
 * Currently this only accepts numerical origins, measured as 0-1, but could
 * accept pixel values by comparing to the target axis.
 */ function defaultOrigin(origin) {
    return typeof origin === "number" ? origin : 0.5;
}
function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
}
function calcRelativeBox(projection, parentProjection) {
    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
}
/**
 * Apply constraints to a point. These constraints are both physical along an
 * axis, and an elastic factor that determines how much to constrain the point
 * by if it does lie outside the defined parameters.
 */ function applyConstraints(point, _a, elastic) {
    var min = _a.min, max = _a.max;
    if (min !== undefined && point < min) // If we have a min point defined, and this is outside of that, constrain
    point = elastic ? popmotion.mix(min, point, elastic.min) : Math.max(point, min);
    else if (max !== undefined && point > max) // If we have a max point defined, and this is outside of that, constrain
    point = elastic ? popmotion.mix(max, point, elastic.max) : Math.min(point, max);
    return point;
}
/**
 * Calculates a min projection point based on a pointer, pointer progress
 * within the drag target, and constraints.
 *
 * For instance if an element was 100px width, we were dragging from 0.25
 * along this axis, the pointer is at 200px, and there were no constraints,
 * we would calculate a min projection point of 175px.
 */ function calcConstrainedMinPoint(point, length, progress, constraints, elastic) {
    // Calculate a min point for this axis and apply it to the current pointer
    var min = point - length * progress;
    return constraints ? applyConstraints(min, constraints, elastic) : min;
}
/**
 * Calculate constraints in terms of the viewport when defined relatively to the
 * measured axis. This is measured from the nearest edge, so a max constraint of 200
 * on an axis with a max value of 300 would return a constraint of 500 - axis length
 */ function calcRelativeAxisConstraints(axis, min, max) {
    return {
        min: min !== undefined ? axis.min + min : undefined,
        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined
    };
}
/**
 * Calculate constraints in terms of the viewport when
 * defined relatively to the measured bounding box.
 */ function calcRelativeConstraints(layoutBox, _a) {
    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
    return {
        x: calcRelativeAxisConstraints(layoutBox.x, left, right),
        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative axis
 */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    var _a;
    var min = constraintsAxis.min - layoutAxis.min;
    var max = constraintsAxis.max - layoutAxis.max;
    // If the constraints axis is actually smaller than the layout axis then we can
    // flip the constraints
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) _a = tslib.__read([
        max,
        min
    ], 2), min = _a[0], max = _a[1];
    return {
        min: layoutAxis.min + min,
        max: layoutAxis.min + max
    };
}
/**
 * Calculate viewport constraints when defined as another viewport-relative box
 */ function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
}
/**
 * Calculate the an axis position based on two axes and a progress value.
 */ function calcPositionFromProgress(axis, constraints, progress) {
    var axisLength = axis.max - axis.min;
    var min = popmotion.mix(constraints.min, constraints.max - axisLength, progress);
    return {
        min: min,
        max: min + axisLength
    };
}
/**
 * Rebase the calculated viewport constraints relative to the layout.min point.
 */ function rebaseAxisConstraints(layout, constraints) {
    var relativeConstraints = {
    };
    if (constraints.min !== undefined) relativeConstraints.min = constraints.min - layout.min;
    if (constraints.max !== undefined) relativeConstraints.max = constraints.max - layout.min;
    return relativeConstraints;
}
var defaultElastic = 0.35;
/**
 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
 */ function resolveDragElastic(dragElastic) {
    if (dragElastic === false) dragElastic = 0;
    else if (dragElastic === true) dragElastic = defaultElastic;
    return {
        x: resolveAxisElastic(dragElastic, "left", "right"),
        y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
        min: resolvePointElastic(dragElastic, minLabel),
        max: resolvePointElastic(dragElastic, maxLabel)
    };
}
function resolvePointElastic(dragElastic, label) {
    var _a;
    return typeof dragElastic === "number" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
}
/**
 * Measure and return the element bounding box.
 *
 * We convert the box into an AxisBox2D to make it easier to work with each axis
 * individually and programmatically.
 *
 * This function optionally accepts a transformPagePoint function which allows us to compensate
 * for, for instance, measuring the element within a scaled plane like a Framer devivce preview component.
 */ function getBoundingBox(element, transformPagePoint) {
    var box = element.getBoundingClientRect();
    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
}
var compareByDepth = function(a, b) {
    return a.depth - b.depth;
};
function isProjecting(visualElement) {
    var isEnabled = visualElement.projection.isEnabled;
    return isEnabled || visualElement.shouldResetTransform();
}
function collectProjectingAncestors(visualElement, ancestors) {
    if (ancestors === void 0) ancestors = [];
    var parent = visualElement.parent;
    if (parent) collectProjectingAncestors(parent, ancestors);
    if (isProjecting(visualElement)) ancestors.push(visualElement);
    return ancestors;
}
function collectProjectingChildren(visualElement) {
    var children = [];
    var addChild = function(child) {
        if (isProjecting(child)) children.push(child);
        child.children.forEach(addChild);
    };
    visualElement.children.forEach(addChild);
    return children.sort(compareByDepth);
}
/**
 * Update the layoutState by measuring the DOM layout. This
 * should be called after resetting any layout-affecting transforms.
 */ function updateLayoutMeasurement(visualElement) {
    if (visualElement.shouldResetTransform()) return;
    var layoutState = visualElement.getLayoutState();
    visualElement.notifyBeforeLayoutMeasure(layoutState.layout);
    layoutState.isHydrated = true;
    layoutState.layout = visualElement.measureViewportBox();
    layoutState.layoutCorrected = copyAxisBox(layoutState.layout);
    visualElement.notifyLayoutMeasure(layoutState.layout, visualElement.prevViewportBox || layoutState.layout);
    sync__default['default'].update(function() {
        return visualElement.rebaseProjectionTarget();
    });
}
/**
 * Record the viewport box as it was before an expected mutation/re-render
 */ function snapshotViewportBox(visualElement) {
    if (visualElement.shouldResetTransform()) return;
    visualElement.prevViewportBox = visualElement.measureViewportBox(false);
    /**
     * Update targetBox to match the prevViewportBox. This is just to ensure
     * that targetBox is affected by scroll in the same way as the measured box
     */ visualElement.rebaseProjectionTarget(false, visualElement.prevViewportBox);
}
function tweenAxis(target, prev, next, p) {
    target.min = popmotion.mix(prev.min, next.min, p);
    target.max = popmotion.mix(prev.max, next.max, p);
}
function calcRelativeOffsetAxis(parent, child) {
    return {
        min: child.min - parent.min,
        max: child.max - parent.min
    };
}
function calcRelativeOffset(parent, child) {
    return {
        x: calcRelativeOffsetAxis(parent.x, child.x),
        y: calcRelativeOffsetAxis(parent.y, child.y)
    };
}
function checkIfParentHasChanged(prev, next) {
    var prevId = prev.getLayoutId();
    var nextId = next.getLayoutId();
    return prevId !== nextId || nextId === undefined && prev !== next;
}
function isDraggable(visualElement) {
    var _a = visualElement.getProps(), drag = _a.drag, _dragX = _a._dragX;
    return drag && !_dragX;
}
/**
 * Reset an axis to the provided origin box.
 *
 * This is a mutative operation.
 */ function resetAxis(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
}
/**
 * Reset a box to the provided origin box.
 *
 * This is a mutative operation.
 */ function resetBox(box, originBox) {
    resetAxis(box.x, originBox.x);
    resetAxis(box.y, originBox.y);
}
/**
 * Scales a point based on a factor and an originPoint
 */ function scalePoint(point, scale, originPoint) {
    var distanceFromOrigin = point - originPoint;
    var scaled = scale * distanceFromOrigin;
    return originPoint + scaled;
}
/**
 * Applies a translate/scale delta to a point
 */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {
    if (boxScale !== undefined) point = scalePoint(point, boxScale, originPoint);
    return scalePoint(point, scale, originPoint) + translate;
}
/**
 * Applies a translate/scale delta to an axis
 */ function applyAxisDelta(axis, translate, scale, originPoint, boxScale) {
    if (translate === void 0) translate = 0;
    if (scale === void 0) scale = 1;
    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
}
/**
 * Applies a translate/scale delta to a box
 */ function applyBoxDelta(box, _a) {
    var x = _a.x, y = _a.y;
    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
/**
 * Apply a transform to an axis from the latest resolved motion values.
 * This function basically acts as a bridge between a flat motion value map
 * and applyAxisDelta
 */ function applyAxisTransforms(final, axis, transforms, _a) {
    var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    // Copy the current axis to the final axis before mutation
    final.min = axis.min;
    final.max = axis.max;
    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;
    var originPoint = popmotion.mix(axis.min, axis.max, axisOrigin);
    // Apply the axis delta to the final axis
    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
/**
 * The names of the motion values we want to apply as translation, scale and origin.
 */ var xKeys = [
    "x",
    "scaleX",
    "originX"
];
var yKeys = [
    "y",
    "scaleY",
    "originY"
];
/**
 * Apply a transform to a box from the latest resolved motion values.
 */ function applyBoxTransforms(finalBox, box, transforms) {
    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);
    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);
}
/**
 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
 */ function removePointDelta(point, translate, scale, originPoint, boxScale) {
    point -= translate;
    point = scalePoint(point, 1 / scale, originPoint);
    if (boxScale !== undefined) point = scalePoint(point, 1 / boxScale, originPoint);
    return point;
}
/**
 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
 */ function removeAxisDelta(axis, translate, scale, origin, boxScale) {
    if (translate === void 0) translate = 0;
    if (scale === void 0) scale = 1;
    if (origin === void 0) origin = 0.5;
    var originPoint = popmotion.mix(axis.min, axis.max, origin) - translate;
    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
}
/**
 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */ function removeAxisTransforms(axis, transforms, _a) {
    var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);
}
/**
 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
 * and acts as a bridge between motion values and removeAxisDelta
 */ function removeBoxTransforms(box, transforms) {
    removeAxisTransforms(box.x, transforms, xKeys);
    removeAxisTransforms(box.y, transforms, yKeys);
}
/**
 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
 *
 * This is the final nested loop within updateLayoutDelta for future refactoring
 */ function applyTreeDeltas(box, treeScale, treePath) {
    var treeLength = treePath.length;
    if (!treeLength) return;
    // Reset the treeScale
    treeScale.x = treeScale.y = 1;
    var node;
    var delta1;
    for(var i = 0; i < treeLength; i++){
        node = treePath[i];
        delta1 = node.getLayoutState().delta;
        // Incoporate each ancestor's scale into a culmulative treeScale for this component
        treeScale.x *= delta1.x.scale;
        treeScale.y *= delta1.y.scale;
        // Apply each ancestor's calculated delta into this component's recorded layout box
        applyBoxDelta(box, delta1);
        // If this is a draggable ancestor, also incorporate the node's transform to the layout box
        if (isDraggable(node)) applyBoxTransforms(box, box, node.getLatestValues());
    }
}
/**
 * Returns a boolean stating whether or not we converted the projection
 * to relative projection.
 */ function convertToRelativeProjection(visualElement, isLayoutDrag) {
    if (isLayoutDrag === void 0) isLayoutDrag = true;
    var projectionParent = visualElement.getProjectionParent();
    if (!projectionParent) return false;
    var offset;
    if (isLayoutDrag) {
        offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);
        removeBoxTransforms(offset, projectionParent.getLatestValues());
    } else offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);
    eachAxis(function(axis) {
        return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);
    });
    return true;
}
var unresolvedJobs = new Set();
function pushJob(stack, job, pointer) {
    if (!stack[pointer]) stack[pointer] = [];
    stack[pointer].push(job);
}
function batchLayout(callback) {
    unresolvedJobs.add(callback);
    return function() {
        return unresolvedJobs.delete(callback);
    };
}
function flushLayout() {
    if (!unresolvedJobs.size) return;
    var pointer = 0;
    var reads = [
        []
    ];
    var writes = [];
    var setRead = function(job) {
        return pushJob(reads, job, pointer);
    };
    var setWrite = function(job) {
        pushJob(writes, job, pointer);
        pointer++;
    };
    /**
     * Resolve jobs into their array stacks
     */ unresolvedJobs.forEach(function(callback) {
        callback(setRead, setWrite);
        pointer = 0;
    });
    unresolvedJobs.clear();
    /**
     * Execute jobs
     */ var numStacks = writes.length;
    for(var i = 0; i <= numStacks; i++){
        reads[i] && reads[i].forEach(executeJob);
        writes[i] && writes[i].forEach(executeJob);
    }
}
var executeJob = function(job) {
    return job();
};
var elementDragControls = new WeakMap();
/**
 *
 */ var lastPointerEvent;
var VisualElementDragControls = function() {
    function VisualElementDragControls1(_a) {
        var visualElement = _a.visualElement;
        /**
         * Track whether we're currently dragging.
         *
         * @internal
         */ this.isDragging = false;
        /**
         * The current direction of drag, or `null` if both.
         *
         * @internal
         */ this.currentDirection = null;
        /**
         * The permitted boundaries of travel, in pixels.
         *
         * @internal
         */ this.constraints = false;
        /**
         * The per-axis resolved elastic values.
         *
         * @internal
         */ this.elastic = axisBox();
        /**
         * A reference to the host component's latest props.
         *
         * @internal
         */ this.props = {
        };
        /**
         * @internal
         */ this.hasMutatedConstraints = false;
        /**
         * Track the initial position of the cursor relative to the dragging element
         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate
         * an ideal bounding box for the VisualElement renderer to project into every frame.
         *
         * @internal
         */ this.cursorProgress = {
            x: 0.5,
            y: 0.5
        };
        // When updating _dragX, or _dragY instead of the VisualElement,
        // persist their values between drag gestures.
        this.originPoint = {
        };
        // This is a reference to the global drag gesture lock, ensuring only one component
        // can "capture" the drag of one or both axes.
        // TODO: Look into moving this into pansession?
        this.openGlobalLock = null;
        /**
         * @internal
         */ this.panSession = null;
        this.visualElement = visualElement;
        this.visualElement.enableLayoutProjection();
        elementDragControls.set(visualElement, this);
    }
    /**
     * Instantiate a PanSession for the drag gesture
     *
     * @public
     */ VisualElementDragControls1.prototype.start = function(originEvent, _a) {
        var _this = this;
        var _b = _a === void 0 ? {
        } : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;
        var onSessionStart = function(event) {
            var _a1;
            // Stop any animations on both axis values immediately. This allows the user to throw and catch
            // the component.
            _this.stopMotion();
            /**
             * Save the initial point. We'll use this to calculate the pointer's position rather
             * than the one we receive when the gesture actually starts. By then, the pointer will
             * have already moved, and the perception will be of the pointer "slipping" across the element
             */ var initialPoint = getViewportPointFromEvent(event).point;
            (_a1 = _this.cancelLayout) === null || _a1 === void 0 || _a1.call(_this);
            _this.cancelLayout = batchLayout(function(read, write) {
                var ancestors = collectProjectingAncestors(_this.visualElement);
                var children = collectProjectingChildren(_this.visualElement);
                var tree = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(ancestors)), tslib.__read(children));
                var hasManuallySetCursorOrigin = false;
                /**
                 * Apply a simple lock to the projection target. This ensures no animations
                 * can run on the projection box while this lock is active.
                 */ _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
                write(function() {
                    tree.forEach(function(element) {
                        return element.resetTransform();
                    });
                });
                read(function() {
                    updateLayoutMeasurement(_this.visualElement);
                    children.forEach(updateLayoutMeasurement);
                });
                write(function() {
                    tree.forEach(function(element) {
                        return element.restoreTransform();
                    });
                    if (snapToCursor) hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
                });
                read(function() {
                    var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
                    if (!isRelativeDrag) _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
                    _this.visualElement.scheduleUpdateLayoutProjection();
                    /**
                     * When dragging starts, we want to find where the cursor is relative to the bounding box
                     * of the element. Every frame, we calculate a new bounding box using this relative position
                     * and let the visualElement renderer figure out how to reproject the element into this bounding
                     * box.
                     *
                     * By doing it this way, rather than applying an x/y transform directly to the element,
                     * we can ensure the component always visually sticks to the cursor as we'd expect, even
                     * if the DOM element itself changes layout as a result of React updates the user might
                     * make based on the drag position.
                     */ var projection = _this.visualElement.projection;
                    eachAxis(function(axis) {
                        if (!hasManuallySetCursorOrigin) {
                            var _a2 = projection.target[axis], min = _a2.min, max = _a2.max;
                            _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : popmotion.progress(min, max, initialPoint[axis]);
                        }
                        /**
                         * If we have external drag MotionValues, record their origin point. On pointermove
                         * we'll apply the pan gesture offset directly to this value.
                         */ var axisValue = _this.getAxisMotionValue(axis);
                        if (axisValue) _this.originPoint[axis] = axisValue.get();
                    });
                });
                write(function() {
                    sync.flushSync.update();
                    sync.flushSync.preRender();
                    sync.flushSync.render();
                    sync.flushSync.postRender();
                });
                read(function() {
                    return _this.resolveDragConstraints();
                });
            });
        };
        var onStart = function(event, info) {
            var _a1, _b1, _c1;
            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;
            if (drag && !dragPropagation) {
                if (_this.openGlobalLock) _this.openGlobalLock();
                _this.openGlobalLock = getGlobalLock(drag);
                // If we don 't have the lock, don't start dragging
                if (!_this.openGlobalLock) return;
            }
            flushLayout();
            // Set current drag status
            _this.isDragging = true;
            _this.currentDirection = null;
            // Fire onDragStart event
            (_b1 = (_a1 = _this.props).onDragStart) === null || _b1 === void 0 || _b1.call(_a1, event, info);
            (_c1 = _this.visualElement.animationState) === null || _c1 === void 0 || _c1.setActive(AnimationType.Drag, true);
        };
        var onMove = function(event, info) {
            var _a1, _b1, _c1, _d;
            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;
            // If we didn't successfully receive the gesture lock, early return.
            if (!dragPropagation && !_this.openGlobalLock) return;
            var offset = info.offset;
            // Attempt to detect drag direction if directionLock is true
            if (dragDirectionLock && _this.currentDirection === null) {
                _this.currentDirection = getCurrentDirection(offset);
                // If we've successfully set a direction, notify listener
                if (_this.currentDirection !== null) (_b1 = (_a1 = _this.props).onDirectionLock) === null || _b1 === void 0 || _b1.call(_a1, _this.currentDirection);
                return;
            }
            // Update each point with the latest position
            _this.updateAxis("x", info.point, offset);
            _this.updateAxis("y", info.point, offset);
            // Fire onDrag event
            (_d = (_c1 = _this.props).onDrag) === null || _d === void 0 || _d.call(_c1, event, info);
            // Update the last pointer event
            lastPointerEvent = event;
        };
        var onSessionEnd = function(event, info) {
            return _this.stop(event, info);
        };
        var transformPagePoint = this.props.transformPagePoint;
        this.panSession = new PanSession(originEvent, {
            onSessionStart: onSessionStart,
            onStart: onStart,
            onMove: onMove,
            onSessionEnd: onSessionEnd
        }, {
            transformPagePoint: transformPagePoint
        });
    };
    VisualElementDragControls1.prototype.resolveDragConstraints = function() {
        var _this = this;
        var _a1 = this.props, dragConstraints = _a1.dragConstraints, dragElastic = _a1.dragElastic;
        var layout = this.visualElement.getLayoutState().layoutCorrected;
        if (dragConstraints) this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(layout, dragConstraints) : calcRelativeConstraints(layout, dragConstraints);
        else this.constraints = false;
        this.elastic = resolveDragElastic(dragElastic);
        /**
         * If we're outputting to external MotionValues, we want to rebase the measured constraints
         * from viewport-relative to component-relative.
         */ if (this.constraints && !this.hasMutatedConstraints) eachAxis(function(axis) {
            if (_this.getAxisMotionValue(axis)) _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);
        });
    };
    VisualElementDragControls1.prototype.resolveRefConstraints = function(layoutBox, constraints) {
        var _a1 = this.props, onMeasureDragConstraints = _a1.onMeasureDragConstraints, transformPagePoint = _a1.transformPagePoint;
        var constraintsElement = constraints.current;
        heyListen.invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);
        /**
         * If there's an onMeasureDragConstraints listener we call it and
         * if different constraints are returned, set constraints to that
         */ if (onMeasureDragConstraints) {
            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
            this.hasMutatedConstraints = !!userConstraints;
            if (userConstraints) measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
        }
        return measuredConstraints;
    };
    VisualElementDragControls1.prototype.cancelDrag = function() {
        var _a1, _b;
        this.visualElement.unlockProjectionTarget();
        (_a1 = this.cancelLayout) === null || _a1 === void 0 || _a1.call(this);
        this.isDragging = false;
        this.panSession && this.panSession.end();
        this.panSession = null;
        if (!this.props.dragPropagation && this.openGlobalLock) {
            this.openGlobalLock();
            this.openGlobalLock = null;
        }
        (_b = this.visualElement.animationState) === null || _b === void 0 || _b.setActive(AnimationType.Drag, false);
    };
    VisualElementDragControls1.prototype.stop = function(event, info) {
        var _a1, _b, _c;
        (_a1 = this.panSession) === null || _a1 === void 0 || _a1.end();
        this.panSession = null;
        var isDragging = this.isDragging;
        this.cancelDrag();
        if (!isDragging) return;
        var velocity = info.velocity;
        this.animateDragEnd(velocity);
        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 || _c.call(_b, event, info);
    };
    VisualElementDragControls1.prototype.snapToCursor = function(point) {
        var _this = this;
        return eachAxis(function(axis) {
            var drag = _this.props.drag;
            // If we're not dragging this axis, do an early return.
            if (!shouldDrag(axis, drag, _this.currentDirection)) return;
            var axisValue = _this.getAxisMotionValue(axis);
            if (axisValue) {
                var box = _this.visualElement.getLayoutState().layout;
                var length_1 = box[axis].max - box[axis].min;
                var center = box[axis].min + length_1 / 2;
                var offset = point[axis] - center;
                _this.originPoint[axis] = point[axis];
                axisValue.set(offset);
            } else {
                _this.cursorProgress[axis] = 0.5;
                return true;
            }
        }).includes(true);
    };
    /**
     * Update the specified axis with the latest pointer information.
     */ VisualElementDragControls1.prototype.updateAxis = function(axis, point, offset) {
        var drag = this.props.drag;
        // If we're not dragging this axis, do an early return.
        if (!shouldDrag(axis, drag, this.currentDirection)) return;
        return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, point);
    };
    VisualElementDragControls1.prototype.updateAxisMotionValue = function(axis, offset) {
        var axisValue = this.getAxisMotionValue(axis);
        if (!offset || !axisValue) return;
        var nextValue = this.originPoint[axis] + offset[axis];
        var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;
        axisValue.set(update);
    };
    VisualElementDragControls1.prototype.updateVisualElementAxis = function(axis, point) {
        var _a1;
        // Get the actual layout bounding box of the element
        var axisLayout = this.visualElement.getLayoutState().layout[axis];
        // Calculate its current length. In the future we might want to lerp this to animate
        // between lengths if the layout changes as we change the DOM
        var axisLength = axisLayout.max - axisLayout.min;
        // Get the initial progress that the pointer sat on this axis on gesture start.
        var axisProgress = this.cursorProgress[axis];
        // Calculate a new min point based on the latest pointer position, constraints and elastic
        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a1 = this.constraints) === null || _a1 === void 0 ? void 0 : _a1[axis], this.elastic[axis]);
        // Update the axis viewport target with this new min and the length
        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);
    };
    VisualElementDragControls1.prototype.setProps = function(_a1) {
        var _b = _a1.drag, drag = _b === void 0 ? false : _b, _c = _a1.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a1.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a1.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a1.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a1.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = tslib.__rest(_a1, [
            "drag",
            "dragDirectionLock",
            "dragPropagation",
            "dragConstraints",
            "dragElastic",
            "dragMomentum"
        ]);
        this.props = tslib.__assign({
            drag: drag,
            dragDirectionLock: dragDirectionLock,
            dragPropagation: dragPropagation,
            dragConstraints: dragConstraints,
            dragElastic: dragElastic,
            dragMomentum: dragMomentum
        }, remainingProps);
    };
    /**
     * Drag works differently depending on which props are provided.
     *
     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
     * - If the component will perform layout animations, we output the gesture to the component's
     *      visual bounding box
     * - Otherwise, we apply the delta to the x/y motion values.
     */ VisualElementDragControls1.prototype.getAxisMotionValue = function(axis) {
        var _a1 = this.props, layout = _a1.layout, layoutId = _a1.layoutId;
        var dragKey = "_drag" + axis.toUpperCase();
        if (this.props[dragKey]) return this.props[dragKey];
        else if (!layout && layoutId === undefined) return this.visualElement.getValue(axis, 0);
    };
    VisualElementDragControls1.prototype.isLayoutDrag = function() {
        return !this.getAxisMotionValue("x");
    };
    VisualElementDragControls1.prototype.isExternalDrag = function() {
        var _a1 = this.props, _dragX = _a1._dragX, _dragY = _a1._dragY;
        return _dragX || _dragY;
    };
    VisualElementDragControls1.prototype.animateDragEnd = function(velocity) {
        var _this = this;
        var _a1 = this.props, drag = _a1.drag, dragMomentum = _a1.dragMomentum, dragElastic = _a1.dragElastic, dragTransition = _a1.dragTransition;
        /**
         * Everything beyond the drag gesture should be performed with
         * relative projection so children stay in sync with their parent element.
         */ var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
        /**
         * If we had previously resolved constraints relative to the viewport,
         * we need to also convert those to a relative coordinate space for the animation
         */ var constraints = this.constraints || {
        };
        if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {
            var projectionParent = this.visualElement.getProjectionParent();
            if (projectionParent) {
                var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
                eachAxis(function(axis) {
                    var _a3 = relativeConstraints_1[axis], min = _a3.min, max = _a3.max;
                    constraints[axis] = {
                        min: isNaN(min) ? undefined : min,
                        max: isNaN(max) ? undefined : max
                    };
                });
            }
        }
        var momentumAnimations = eachAxis(function(axis) {
            var _a3;
            if (!shouldDrag(axis, drag, _this.currentDirection)) return;
            var transition = (_a3 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a3 !== void 0 ? _a3 : {
            };
            /**
             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
             * of spring animations so we should look into adding a disable spring option to `inertia`.
             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
             * using the value of `dragElastic`.
             */ var bounceStiffness = dragElastic ? 200 : 1000000;
            var bounceDamping = dragElastic ? 40 : 10000000;
            var inertia = tslib.__assign(tslib.__assign({
                type: "inertia",
                velocity: dragMomentum ? velocity[axis] : 0,
                bounceStiffness: bounceStiffness,
                bounceDamping: bounceDamping,
                timeConstant: 750,
                restDelta: 1,
                restSpeed: 10
            }, dragTransition), transition);
            // If we're not animating on an externally-provided `MotionValue` we can use the
            // component's animation controls which will handle interactions with whileHover (etc),
            // otherwise we just have to animate the `MotionValue` itself.
            return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia) : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);
        });
        // Run all animations and then resolve the new drag constraints.
        return Promise.all(momentumAnimations).then(function() {
            var _a3, _b;
            (_b = (_a3 = _this.props).onDragTransitionEnd) === null || _b === void 0 || _b.call(_a3);
        });
    };
    VisualElementDragControls1.prototype.stopMotion = function() {
        var _this = this;
        eachAxis(function(axis) {
            var axisValue = _this.getAxisMotionValue(axis);
            axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();
        });
    };
    VisualElementDragControls1.prototype.startAxisValueAnimation = function(axis, transition) {
        var axisValue = this.getAxisMotionValue(axis);
        if (!axisValue) return;
        var currentValue = axisValue.get();
        axisValue.set(currentValue);
        axisValue.set(currentValue); // Set twice to hard-reset velocity
        return startAnimation(axis, axisValue, 0, transition);
    };
    VisualElementDragControls1.prototype.scalePoint = function() {
        var _this = this;
        var _a1 = this.props, drag = _a1.drag, dragConstraints = _a1.dragConstraints;
        if (!isRefObject(dragConstraints) || !this.constraintsBox) return;
        // Stop any current animations as there can be some visual glitching if we resize mid animation
        this.stopMotion();
        // Record the relative progress of the targetBox relative to the constraintsBox
        var boxProgress = {
            x: 0,
            y: 0
        };
        eachAxis(function(axis) {
            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
        });
        /**
         * For each axis, calculate the current progress of the layout axis within the constraints.
         * Then, using the latest layout and constraints measurements, reposition the new layout axis
         * proportionally within the constraints.
         */ this.updateConstraints(function() {
            eachAxis(function(axis) {
                if (!shouldDrag(axis, drag, null)) return;
                // Calculate the position of the targetBox relative to the constraintsBox using the
                // previously calculated progress
                var _a3 = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a3.min, max = _a3.max;
                _this.visualElement.setProjectionTargetAxis(axis, min, max);
            });
        });
        /**
         * If any other draggable components are queuing the same tasks synchronously
         * this will wait until they've all been scheduled before flushing.
         */ setTimeout(flushLayout, 1);
    };
    VisualElementDragControls1.prototype.updateConstraints = function(onReady) {
        var _this = this;
        this.cancelLayout = batchLayout(function(read, write) {
            var ancestors = collectProjectingAncestors(_this.visualElement);
            write(function() {
                return ancestors.forEach(function(element) {
                    return element.resetTransform();
                });
            });
            read(function() {
                return updateLayoutMeasurement(_this.visualElement);
            });
            write(function() {
                return ancestors.forEach(function(element) {
                    return element.restoreTransform();
                });
            });
            read(function() {
                _this.resolveDragConstraints();
            });
            if (onReady) write(onReady);
        });
    };
    VisualElementDragControls1.prototype.mount = function(visualElement) {
        var _this = this;
        var element = visualElement.getInstance();
        /**
         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
         */ var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
            var _a1 = _this.props, drag = _a1.drag, _b = _a1.dragListener, dragListener = _b === void 0 ? true : _b;
            drag && dragListener && _this.start(event);
        });
        /**
         * Attach a window resize listener to scale the draggable target within its defined
         * constraints as the window resizes.
         */ var stopResizeListener = addDomEvent(window, "resize", function() {
            _this.scalePoint();
        });
        /**
         * Ensure drag constraints are resolved correctly relative to the dragging element
         * whenever its layout changes.
         */ var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function() {
            if (_this.isDragging) _this.resolveDragConstraints();
        });
        /**
         * If the previous component with this same layoutId was dragging at the time
         * it was unmounted, we want to continue the same gesture on this component.
         */ var prevDragCursor = visualElement.prevDragCursor;
        if (prevDragCursor) this.start(lastPointerEvent, {
            cursorProgress: prevDragCursor
        });
        /**
         * Return a function that will teardown the drag gesture
         */ return function() {
            stopPointerListener === null || stopPointerListener === void 0 || stopPointerListener();
            stopResizeListener === null || stopResizeListener === void 0 || stopResizeListener();
            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 || stopLayoutUpdateListener();
            _this.cancelDrag();
        };
    };
    return VisualElementDragControls1;
}();
function shouldDrag(direction, drag, currentDirection) {
    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);
}
/**
 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
 * than the provided threshold, return `null`.
 *
 * @param offset - The x/y offset from origin.
 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
 */ function getCurrentDirection(offset, lockThreshold) {
    if (lockThreshold === void 0) lockThreshold = 10;
    var direction = null;
    if (Math.abs(offset.y) > lockThreshold) direction = "y";
    else if (Math.abs(offset.x) > lockThreshold) direction = "x";
    return direction;
}
/**
 * A hook that allows an element to be dragged.
 *
 * @internal
 */ function useDrag(props) {
    var groupDragControls = props.dragControls, visualElement = props.visualElement;
    var transformPagePoint = React.useContext(MotionConfigContext).transformPagePoint;
    var dragControls = useConstant(function() {
        return new VisualElementDragControls({
            visualElement: visualElement
        });
    });
    dragControls.setProps(tslib.__assign(tslib.__assign({
    }, props), {
        transformPagePoint: transformPagePoint
    }));
    // If we've been provided a DragControls for manual control over the drag gesture,
    // subscribe this component to it on mount.
    React.useEffect(function() {
        return groupDragControls && groupDragControls.subscribe(dragControls);
    }, [
        dragControls
    ]);
    // Mount the drag controls with the visualElement
    React.useEffect(function() {
        return dragControls.mount(visualElement);
    }, []);
}
/**
 *
 * @param handlers -
 * @param ref -
 *
 * @internalremarks
 * Currently this sets new pan gesture functions every render. The memo route has been explored
 * in the past but ultimately we're still creating new functions every render. An optimisation
 * to explore is creating the pan gestures and loading them into a `ref`.
 *
 * @internal
 */ function usePanGesture(_a1) {
    var onPan = _a1.onPan, onPanStart = _a1.onPanStart, onPanEnd = _a1.onPanEnd, onPanSessionStart = _a1.onPanSessionStart, visualElement = _a1.visualElement;
    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
    var panSession = React.useRef(null);
    var transformPagePoint = React.useContext(MotionConfigContext).transformPagePoint;
    var handlers = {
        onSessionStart: onPanSessionStart,
        onStart: onPanStart,
        onMove: onPan,
        onEnd: function(event, info) {
            panSession.current = null;
            onPanEnd && onPanEnd(event, info);
        }
    };
    React.useEffect(function() {
        if (panSession.current !== null) panSession.current.updateHandlers(handlers);
    });
    function onPointerDown(event) {
        panSession.current = new PanSession(event, handlers, {
            transformPagePoint: transformPagePoint
        });
    }
    usePointerEvent(visualElement, "pointerdown", hasPanEvents && onPointerDown);
    useUnmountEffect(function() {
        return panSession.current && panSession.current.end();
    });
}
var drag = {
    pan: makeRenderlessComponent(usePanGesture),
    drag: makeRenderlessComponent(useDrag)
};
/**
 * @public
 */ var Presence;
(function(Presence1) {
    Presence1[Presence1["Entering"] = 0] = "Entering";
    Presence1[Presence1["Present"] = 1] = "Present";
    Presence1[Presence1["Exiting"] = 2] = "Exiting";
})(Presence || (Presence = {
}));
/**
 * @public
 */ exports.VisibilityAction = void 0;
(function(VisibilityAction) {
    VisibilityAction[VisibilityAction["Hide"] = 0] = "Hide";
    VisibilityAction[VisibilityAction["Show"] = 1] = "Show";
})(exports.VisibilityAction || (exports.VisibilityAction = {
}));
function isCSSVariable(value) {
    return typeof value === "string" && value.startsWith("var(--");
}
/**
 * Parse Framer's special CSS variable format into a CSS token and a fallback.
 *
 * ```
 * `var(--foo, #fff)` => [`--foo`, '#fff']
 * ```
 *
 * @param current
 */ var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
    var match = cssVariableRegex.exec(current);
    if (!match) return [
        , 
    ];
    var _a1 = tslib.__read(match, 3), token = _a1[1], fallback = _a1[2];
    return [
        token,
        fallback
    ];
}
var maxDepth = 4;
function getVariableValue(current, element, depth) {
    if (depth === void 0) depth = 1;
    heyListen.invariant(depth <= maxDepth, "Max CSS variable fallback depth detected in property \"" + current + "\". This may indicate a circular fallback dependency.");
    var _a1 = tslib.__read(parseCSSVariable(current), 2), token = _a1[0], fallback = _a1[1];
    // No CSS variable detected
    if (!token) return;
    // Attempt to read this CSS variable off the element
    var resolved = window.getComputedStyle(element).getPropertyValue(token);
    if (resolved) return resolved.trim();
    else if (isCSSVariable(fallback)) // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.
    return getVariableValue(fallback, element, depth + 1);
    else return fallback;
}
/**
 * Resolve CSS variables from
 *
 * @internal
 */ function resolveCSSVariables(visualElement, _a1, transitionEnd) {
    var _b;
    var target = tslib.__rest(_a1, []);
    var element = visualElement.getInstance();
    if (!(element instanceof HTMLElement)) return {
        target: target,
        transitionEnd: transitionEnd
    };
    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`
    // only if they change but I think this reads clearer and this isn't a performance-critical path.
    if (transitionEnd) transitionEnd = tslib.__assign({
    }, transitionEnd);
    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved
    visualElement.forEachValue(function(value) {
        var current = value.get();
        if (!isCSSVariable(current)) return;
        var resolved = getVariableValue(current, element);
        if (resolved) value.set(resolved);
    });
    // Cycle through every target property and resolve CSS variables. Currently
    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`
    for(var key in target){
        var current = target[key];
        if (!isCSSVariable(current)) continue;
        var resolved = getVariableValue(current, element);
        if (!resolved) continue;
        // Clone target if it hasn't already been
        target[key] = resolved;
        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved
        // CSS variable. This will ensure that after the animation the component will reflect
        // changes in the value of the CSS variable.
        if (transitionEnd) (_b = transitionEnd[key]) !== null && _b !== void 0 || (transitionEnd[key] = current);
    }
    return {
        target: target,
        transitionEnd: transitionEnd
    };
}
function pixelsToPercent(pixels, axis) {
    return pixels / (axis.max - axis.min) * 100;
}
/**
 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
 * borderRadius in both states. If we animate between the two in pixels that will trigger
 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
 */ function correctBorderRadius(latest, _layoutState, _a1) {
    var target = _a1.target;
    /**
     * If latest is a string, if it's a percentage we can return immediately as it's
     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
     */ if (typeof latest === "string") {
        if (styleValueTypes.px.test(latest)) latest = parseFloat(latest);
        else return latest;
    }
    /**
     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
     * pixel value as a percentage of each axis
     */ var x = pixelsToPercent(latest, target.x);
    var y = pixelsToPercent(latest, target.y);
    return x + "% " + y + "%";
}
var varToken = "_$css";
function correctBoxShadow(latest, _a1) {
    var delta1 = _a1.delta, treeScale = _a1.treeScale;
    var original = latest;
    /**
     * We need to first strip and store CSS variables from the string.
     */ var containsCSSVariables = latest.includes("var(");
    var cssVariables = [];
    if (containsCSSVariables) latest = latest.replace(cssVariableRegex, function(match) {
        cssVariables.push(match);
        return varToken;
    });
    var shadow = styleValueTypes.complex.parse(latest);
    // TODO: Doesn't support multiple shadows
    if (shadow.length > 5) return original;
    var template = styleValueTypes.complex.createTransformer(latest);
    var offset = typeof shadow[0] !== "number" ? 1 : 0;
    // Calculate the overall context scale
    var xScale = delta1.x.scale * treeScale.x;
    var yScale = delta1.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    /**
     * Ideally we'd correct x and y scales individually, but because blur and
     * spread apply to both we have to take a scale average and apply that instead.
     * We could potentially improve the outcome of this by incorporating the ratio between
     * the two scales.
     */ var averageScale = popmotion.mix(xScale, yScale, 0.5);
    // Blur
    if (typeof shadow[2 + offset] === "number") shadow[2 + offset] /= averageScale;
    // Spread
    if (typeof shadow[3 + offset] === "number") shadow[3 + offset] /= averageScale;
    var output = template(shadow);
    if (containsCSSVariables) {
        var i_1 = 0;
        output = output.replace(varToken, function() {
            var cssVariable = cssVariables[i_1];
            i_1++;
            return cssVariable;
        });
    }
    return output;
}
var borderCorrectionDefinition = {
    process: correctBorderRadius
};
var defaultScaleCorrectors = {
    borderRadius: tslib.__assign(tslib.__assign({
    }, borderCorrectionDefinition), {
        applyTo: [
            "borderTopLeftRadius",
            "borderTopRightRadius",
            "borderBottomLeftRadius",
            "borderBottomRightRadius", 
        ]
    }),
    borderTopLeftRadius: borderCorrectionDefinition,
    borderTopRightRadius: borderCorrectionDefinition,
    borderBottomLeftRadius: borderCorrectionDefinition,
    borderBottomRightRadius: borderCorrectionDefinition,
    boxShadow: {
        process: correctBoxShadow
    }
};
var progressTarget = 1000;
var Animate1 = function(_super) {
    tslib.__extends(Animate2, _super);
    function Animate2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A mutable object that tracks the target viewport box
         * for the current animation frame.
         */ _this.frameTarget = axisBox();
        /**
         * The current animation target, we use this to check whether to start
         * a new animation or continue the existing one.
         */ _this.currentAnimationTarget = axisBox();
        /**
         * Track whether we're animating this axis.
         */ _this.isAnimating = {
            x: false,
            y: false
        };
        _this.stopAxisAnimation = {
            x: undefined,
            y: undefined
        };
        _this.isAnimatingTree = false;
        _this.animate = function(target, origin, _a1) {
            if (_a1 === void 0) _a1 = {
            };
            var originBox = _a1.originBox, targetBox = _a1.targetBox, visibilityAction = _a1.visibilityAction, shouldStackAnimate = _a1.shouldStackAnimate, onComplete = _a1.onComplete, prevParent = _a1.prevParent, config = tslib.__rest(_a1, [
                "originBox",
                "targetBox",
                "visibilityAction",
                "shouldStackAnimate",
                "onComplete",
                "prevParent"
            ]);
            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;
            /**
             * Early return if we've been instructed not to animate this render.
             */ if (shouldStackAnimate === false) {
                _this.isAnimatingTree = false;
                return _this.safeToRemove();
            }
            /**
             * Prioritise tree animations
             */ if (_this.isAnimatingTree && shouldStackAnimate !== true) return;
            else if (shouldStackAnimate) _this.isAnimatingTree = true;
            /**
             * Allow the measured origin (prev bounding box) and target (actual layout) to be
             * overridden by the provided config.
             */ origin = originBox || origin;
            target = targetBox || target;
            /**
             * If this element has a projecting parent, there's an opportunity to animate
             * it relatively to that parent rather than relatively to the viewport. This
             * allows us to add orchestrated animations.
             */ var isRelative = false;
            var projectionParent = visualElement.getProjectionParent();
            if (projectionParent) {
                var prevParentViewportBox = projectionParent.prevViewportBox;
                var parentLayout = projectionParent.getLayoutState().layout;
                /**
                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout
                 */ if (prevParent) {
                    /**
                     * If we've been provided an explicit target box it means we're animating back
                     * to this previous parent. So we can make a relative box by comparing to the previous
                     * parent's layout
                     */ if (targetBox) parentLayout = prevParent.getLayoutState().layout;
                    /**
                     * Likewise if we've been provided an explicit origin box it means we're
                     * animating out from a different element. So we should figure out where that was
                     * on screen relative to the new parent element.
                     */ if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) prevParentViewportBox = prevParent.prevViewportBox;
                }
                if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {
                    isRelative = true;
                    origin = calcRelativeOffset(prevParentViewportBox, origin);
                    target = calcRelativeOffset(parentLayout, target);
                }
            }
            var boxHasMoved = hasMoved(origin, target);
            var animations1 = eachAxis(function(axis) {
                var _a3, _b1;
                /**
                 * If layout is set to "position", we can resize the origin box based on the target
                 * box and only animate its position.
                 */ if (layout === "position") {
                    var targetLength = target[axis].max - target[axis].min;
                    origin[axis].max = origin[axis].min + targetLength;
                }
                if (visualElement.projection.isTargetLocked) return;
                else if (visibilityAction !== undefined) visualElement.setVisibility(visibilityAction === exports.VisibilityAction.Show);
                else if (boxHasMoved) // If the box has moved, animate between it's current visual state and its
                // final state
                return _this.animateAxis(axis, target[axis], origin[axis], tslib.__assign(tslib.__assign({
                }, config), {
                    isRelative: isRelative
                }));
                else {
                    (_b1 = (_a3 = _this.stopAxisAnimation)[axis]) === null || _b1 === void 0 || _b1.call(_a3);
                    // If the box has remained in the same place, immediately set the axis target
                    // to the final desired state
                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);
                }
            });
            // Force a render to ensure there's no flash of uncorrected bounding box.
            visualElement.syncRender();
            /**
             * If this visualElement isn't present (ie it's been removed from the tree by the user but
             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations
             * have successfully finished.
             */ return Promise.all(animations1).then(function() {
                _this.isAnimatingTree = false;
                onComplete && onComplete();
                visualElement.notifyLayoutAnimationComplete();
            });
        };
        return _this;
    }
    Animate2.prototype.componentDidMount = function() {
        var _this = this;
        var visualElement = this.props.visualElement;
        visualElement.animateMotionValue = startAnimation;
        visualElement.enableLayoutProjection();
        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);
        visualElement.layoutSafeToRemove = function() {
            return _this.safeToRemove();
        };
        addScaleCorrection(defaultScaleCorrectors);
    };
    Animate2.prototype.componentWillUnmount = function() {
        var _this = this;
        this.unsubLayoutReady();
        eachAxis(function(axis) {
            var _a1, _b;
            return (_b = (_a1 = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a1);
        });
    };
    /**
     * TODO: This manually performs animations on the visualElement's layout progress
     * values. It'd be preferable to amend the startLayoutAxisAnimation
     * API to accept more custom animations like this.
     */ Animate2.prototype.animateAxis = function(axis, target, origin, _a1) {
        var _this = this;
        var _b, _c;
        var _d = _a1 === void 0 ? {
        } : _a1, transition = _d.transition, isRelative = _d.isRelative;
        /**
         * If we're not animating to a new target, don't run this animation
         */ if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) return;
        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 || _c.call(_b);
        this.isAnimating[axis] = true;
        var visualElement = this.props.visualElement;
        var frameTarget = this.frameTarget[axis];
        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];
        /**
         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might
         * be re-incoporated into a subsequent spring animation.
         */ layoutProgress.clearListeners();
        layoutProgress.set(0);
        layoutProgress.set(0);
        /**
         * Create an animation function to run once per frame. This will tween the visual bounding box from
         * origin to target using the latest progress value.
         */ var frame = function() {
            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress
            var p = layoutProgress.get() / progressTarget;
            // Tween the axis and update the visualElement with the latest values
            tweenAxis(frameTarget, origin, target, p);
            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);
        };
        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.
        frame();
        // Create a function to stop animation on this specific axis
        var unsubscribeProgress = layoutProgress.onChange(frame);
        this.stopAxisAnimation[axis] = function() {
            _this.isAnimating[axis] = false;
            layoutProgress.stop();
            unsubscribeProgress();
        };
        this.currentAnimationTarget[axis] = target;
        var layoutTransition = transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
        // Start the animation on this axis
        var animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, "layout")).then(this.stopAxisAnimation[axis]);
        return animation;
    };
    Animate2.prototype.safeToRemove = function() {
        var _a1, _b;
        (_b = (_a1 = this.props).safeToRemove) === null || _b === void 0 || _b.call(_a1);
    };
    Animate2.prototype.render = function() {
        return null;
    };
    return Animate2;
}(React__namespace.Component);
function AnimateLayoutContextProvider(props) {
    var _a1 = tslib.__read(usePresence(), 2), safeToRemove = _a1[1];
    return React__namespace.createElement(Animate1, tslib.__assign({
    }, props, {
        safeToRemove: safeToRemove
    }));
}
function hasMoved(a, b) {
    return !isZeroBox(a) && !isZeroBox(b) && (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y));
}
var zeroAxis = {
    min: 0,
    max: 0
};
function isZeroBox(a) {
    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);
}
function axisIsEqual(a, b) {
    return a.min === b.min && a.max === b.max;
}
var defaultLayoutTransition = {
    duration: 0.45,
    ease: [
        0.4,
        0,
        0.1,
        1
    ]
};
function isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {
    return prevParent || !prevParent && !(originBox || targetBox);
}
/**
 * Default handlers for batching VisualElements
 */ var defaultHandler = {
    layoutReady: function(child) {
        return child.notifyLayoutReady();
    }
};
/**
 * Create a batcher to process VisualElements
 */ function createBatcher() {
    var queue = new Set();
    return {
        add: function(child) {
            return queue.add(child);
        },
        flush: function(_a1) {
            var _b = _a1 === void 0 ? defaultHandler : _a1, layoutReady = _b.layoutReady, parent = _b.parent;
            batchLayout(function(read, write) {
                var order1 = Array.from(queue).sort(compareByDepth);
                var ancestors = parent ? collectProjectingAncestors(parent) : [];
                write(function() {
                    var allElements = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(ancestors)), tslib.__read(order1));
                    allElements.forEach(function(element) {
                        return element.resetTransform();
                    });
                });
                read(function() {
                    order1.forEach(updateLayoutMeasurement);
                });
                write(function() {
                    ancestors.forEach(function(element) {
                        return element.restoreTransform();
                    });
                    order1.forEach(layoutReady);
                });
                read(function() {
                    /**
                     * After all children have started animating, ensure any Entering components are set to Present.
                     * If we add deferred animations (set up all animations and then start them in two loops) this
                     * could be moved to the start loop. But it needs to happen after all the animations configs
                     * are generated in AnimateSharedLayout as this relies on presence data
                     */ order1.forEach(function(child) {
                        if (child.isPresent) child.presence = Presence.Present;
                    });
                });
                write(function() {
                    /**
                     * Starting these animations will have queued jobs on the frame loop. In some situations,
                     * like when removing an element, these will be processed too late after the DOM is manipulated,
                     * leaving a flash of incorrectly-projected content. By manually flushing these jobs
                     * we ensure there's no flash.
                     */ sync.flushSync.preRender();
                    sync.flushSync.render();
                });
                read(function() {
                    /**
                     * Schedule a callback at the end of the following frame to assign the latest projection
                     * box to the prevViewportBox snapshot. Once global batching is in place this could be run
                     * synchronously. But for now it ensures that if any nested `AnimateSharedLayout` top-level
                     * child attempts to calculate its previous relative position against a prevViewportBox
                     * it will be against its latest projection box instead, as the snapshot is useless beyond this
                     * render.
                     */ sync__default['default'].postRender(function() {
                        return order1.forEach(assignProjectionToSnapshot);
                    });
                    queue.clear();
                });
            });
            // TODO: Need to find a layout-synchronous way of flushing this
            flushLayout();
        }
    };
}
function assignProjectionToSnapshot(child) {
    child.prevViewportBox = child.projection.target;
}
var SharedLayoutContext = React.createContext(createBatcher());
/**
 * @internal
 */ var FramerTreeLayoutContext = React.createContext(createBatcher());
function isSharedLayout(context) {
    return !!context.forceUpdate;
}
/**
 * This component is responsible for scheduling the measuring of the motion component
 */ var Measure1 = function(_super) {
    tslib.__extends(Measure2, _super);
    function Measure2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * If this is a child of a SyncContext, register the VisualElement with it on mount.
     */ Measure2.prototype.componentDidMount = function() {
        var _a1 = this.props, syncLayout = _a1.syncLayout, framerSyncLayout = _a1.framerSyncLayout, visualElement = _a1.visualElement;
        isSharedLayout(syncLayout) && syncLayout.register(visualElement);
        isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement);
        visualElement.onUnmount(function() {
            if (isSharedLayout(syncLayout)) syncLayout.remove(visualElement);
            if (isSharedLayout(framerSyncLayout)) framerSyncLayout.remove(visualElement);
        });
    };
    /**
     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then
     * handle the snapshotting.
     *
     * If it is stand-alone component, add it to the batcher.
     */ Measure2.prototype.getSnapshotBeforeUpdate = function() {
        var _a1 = this.props, syncLayout = _a1.syncLayout, visualElement = _a1.visualElement;
        if (isSharedLayout(syncLayout)) syncLayout.syncUpdate();
        else {
            snapshotViewportBox(visualElement);
            syncLayout.add(visualElement);
        }
        return null;
    };
    Measure2.prototype.componentDidUpdate = function() {
        var syncLayout = this.props.syncLayout;
        if (!isSharedLayout(syncLayout)) syncLayout.flush();
    };
    Measure2.prototype.render = function() {
        return null;
    };
    return Measure2;
}(React__default['default'].Component);
function MeasureContextProvider(props) {
    var syncLayout = React.useContext(SharedLayoutContext);
    var framerSyncLayout = React.useContext(FramerTreeLayoutContext);
    return React__default['default'].createElement(Measure1, tslib.__assign({
    }, props, {
        syncLayout: syncLayout,
        framerSyncLayout: framerSyncLayout
    }));
}
var layoutAnimations = {
    measureLayout: MeasureContextProvider,
    layoutAnimation: AnimateLayoutContextProvider
};
var createProjectionState = function() {
    return {
        isEnabled: false,
        isHydrated: false,
        isTargetLocked: false,
        target: axisBox(),
        targetFinal: axisBox()
    };
};
function createLayoutState() {
    return {
        isHydrated: false,
        layout: axisBox(),
        layoutCorrected: axisBox(),
        treeScale: {
            x: 1,
            y: 1
        },
        delta: delta(),
        deltaFinal: delta(),
        deltaTransform: ""
    };
}
var zeroLayout = createLayoutState();
/**
 * Build a transform style that takes a calculated delta between the element's current
 * space on screen and projects it into the desired space.
 */ function buildLayoutProjectionTransform(_a1, treeScale, latestTransform) {
    var x = _a1.x, y = _a1.y;
    /**
     * The translations we use to calculate are always relative to the viewport coordinate space.
     * But when we apply scales, we also scale the coordinate space of an element and its children.
     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
     */ var xTranslate = x.translate / treeScale.x;
    var yTranslate = y.translate / treeScale.y;
    var transform = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
    if (latestTransform) {
        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
        if (rotate) transform += "rotate(" + rotate + ") ";
        if (rotateX) transform += "rotateX(" + rotateX + ") ";
        if (rotateY) transform += "rotateY(" + rotateY + ") ";
    }
    transform += "scale(" + x.scale + ", " + y.scale + ")";
    return !latestTransform && transform === identityProjection ? "" : transform;
}
/**
 * Take the calculated delta origin and apply it as a transform string.
 */ function buildLayoutProjectionTransformOrigin(_a1) {
    var deltaFinal = _a1.deltaFinal;
    return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
}
var identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, {
    x: 1,
    y: 1
});
var names = [
    "LayoutMeasure",
    "BeforeLayoutMeasure",
    "LayoutUpdate",
    "ViewportBoxUpdate",
    "Update",
    "Render",
    "AnimationComplete",
    "LayoutAnimationComplete",
    "AnimationStart",
    "SetAxisTarget",
    "Unmount", 
];
function createLifecycles() {
    var managers = names.map(function() {
        return new SubscriptionManager();
    });
    var propSubscriptions = {
    };
    var lifecycles = {
        clearAllListeners: function() {
            return managers.forEach(function(manager) {
                return manager.clear();
            });
        },
        updatePropListeners: function(props) {
            return names.forEach(function(name) {
                var _a1;
                (_a1 = propSubscriptions[name]) === null || _a1 === void 0 || _a1.call(propSubscriptions);
                var on = "on" + name;
                var propListener = props[on];
                if (propListener) propSubscriptions[name] = lifecycles[on](propListener);
            });
        }
    };
    managers.forEach(function(manager, i) {
        lifecycles["on" + names[i]] = function(handler) {
            return manager.add(handler);
        };
        lifecycles["notify" + names[i]] = function() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            return manager.notify.apply(manager, tslib.__spreadArray([], tslib.__read(args)));
        };
    });
    return lifecycles;
}
function updateMotionValuesFromProps(element, next, prev) {
    var _a1;
    for(var key in next){
        var nextValue = next[key];
        var prevValue = prev[key];
        if (isMotionValue(nextValue)) /**
             * If this is a motion value found in props or style, we want to add it
             * to our visual element's motion value map.
             */ element.addValue(key, nextValue);
        else if (isMotionValue(prevValue)) /**
             * If we're swapping to a new motion value, create a new motion value
             * from that
             */ element.addValue(key, motionValue(nextValue));
        else if (prevValue !== nextValue) {
            /**
             * If this is a flat value that has changed, update the motion value
             * or create one if it doesn't exist. We only want to do this if we're
             * not handling the value with our animation state.
             */ if (element.hasValue(key)) {
                var existingValue = element.getValue(key);
                // TODO: Only update values that aren't being animated or even looked at
                !existingValue.hasAnimated && existingValue.set(nextValue);
            } else element.addValue(key, motionValue((_a1 = element.getStaticValue(key)) !== null && _a1 !== void 0 ? _a1 : nextValue));
        }
    }
    // Handle removed values
    for(var key in prev)if (next[key] === undefined) element.removeValue(key);
    return next;
}
function updateLayoutDeltas(_a1, _b, treePath, transformOrigin) {
    var delta1 = _a1.delta, layout = _a1.layout, layoutCorrected = _a1.layoutCorrected, treeScale = _a1.treeScale;
    var target = _b.target;
    /**
     * Reset the corrected box with the latest values from box, as we're then going
     * to perform mutative operations on it.
     */ resetBox(layoutCorrected, layout);
    /**
     * Apply all the parent deltas to this box to produce the corrected box. This
     * is the layout box, as it will appear on screen as a result of the transforms of its parents.
     */ applyTreeDeltas(layoutCorrected, treeScale, treePath);
    /**
     * Update the delta between the corrected box and the target box before user-set transforms were applied.
     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
     * for our layout reprojection, but still allow them to be scaled correctly by the user.
     * It might be that to simplify this we may want to accept that user-set scale is also corrected
     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
     * to allow people to choose whether these styles are corrected based on just the
     * layout reprojection or the final bounding box.
     */ updateBoxDelta(delta1, layoutCorrected, target, transformOrigin);
}
var FlatTree = function() {
    function FlatTree1() {
        this.children = [];
        this.isDirty = false;
    }
    FlatTree1.prototype.add = function(child) {
        addUniqueItem(this.children, child);
        this.isDirty = true;
    };
    FlatTree1.prototype.remove = function(child) {
        removeItem(this.children, child);
        this.isDirty = true;
    };
    FlatTree1.prototype.forEach = function(callback) {
        this.isDirty && this.children.sort(compareByDepth);
        this.isDirty = false;
        this.children.forEach(callback);
    };
    return FlatTree1;
}();
function setCurrentViewportBox(visualElement) {
    var projectionParent = visualElement.getProjectionParent();
    if (!projectionParent) {
        visualElement.rebaseProjectionTarget();
        return;
    }
    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);
    eachAxis(function(axis) {
        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
    });
}
var visualElement = function(_a1) {
    var _b = _a1.treeType, treeType = _b === void 0 ? "" : _b, build = _a1.build, getBaseTarget = _a1.getBaseTarget, makeTargetAnimatable = _a1.makeTargetAnimatable, measureViewportBox = _a1.measureViewportBox, renderInstance = _a1.render, readValueFromInstance = _a1.readValueFromInstance, resetTransform = _a1.resetTransform, restoreTransform = _a1.restoreTransform, removeValueFromRenderState = _a1.removeValueFromRenderState, sortNodePosition = _a1.sortNodePosition, scrapeMotionValuesFromProps1 = _a1.scrapeMotionValuesFromProps;
    return function(_a3, options) {
        var parent = _a3.parent, props = _a3.props, presenceId = _a3.presenceId, blockInitialAnimation = _a3.blockInitialAnimation, visualState = _a3.visualState;
        if (options === void 0) options = {
        };
        var latestValues = visualState.latestValues, renderState = visualState.renderState;
        /**
         * The instance of the render-specific node that will be hydrated by the
         * exposed React ref. So for example, this visual element can host a
         * HTMLElement, plain object, or Three.js object. The functions provided
         * in VisualElementConfig allow us to interface with this instance.
         */ var instance;
        /**
         * Manages the subscriptions for a visual element's lifecycle, for instance
         * onRender and onViewportBoxUpdate.
         */ var lifecycles = createLifecycles();
        /**
         *
         */ var projection = createProjectionState();
        /**
         * A reference to the nearest projecting parent. This is either
         * undefined if we haven't looked for the nearest projecting parent,
         * false if there is no parent performing layout projection, or a reference
         * to the projecting parent.
         */ var projectionParent;
        /**
         * This is a reference to the visual state of the "lead" visual element.
         * Usually, this will be this visual element. But if it shares a layoutId
         * with other visual elements, only one of them will be designated lead by
         * AnimateSharedLayout. All the other visual elements will take on the visual
         * appearance of the lead while they crossfade to it.
         */ var leadProjection = projection;
        var leadLatestValues = latestValues;
        var unsubscribeFromLeadVisualElement;
        /**
         * The latest layout measurements and calculated projections. This
         * is seperate from the target projection data in visualState as
         * many visual elements might point to the same piece of visualState as
         * a target, whereas they might each have different layouts and thus
         * projection calculations needed to project into the same viewport box.
         */ var layoutState = createLayoutState();
        /**
         *
         */ var crossfader;
        /**
         * Keep track of whether the viewport box has been updated since the
         * last time the layout projection was re-calculated.
         */ var hasViewportBoxUpdated = false;
        /**
         * A map of all motion values attached to this visual element. Motion
         * values are source of truth for any given animated value. A motion
         * value might be provided externally by the component via props.
         */ var values = new Map();
        /**
         * A map of every subscription that binds the provided or generated
         * motion values onChange listeners to this visual element.
         */ var valueSubscriptions = new Map();
        /**
         * A reference to the previously-provided motion values as returned
         * from scrapeMotionValuesFromProps. We use the keys in here to determine
         * if any motion values need to be removed after props are updated.
         */ var prevMotionValues = {
        };
        /**
         * x/y motion values that track the progress of initiated layout
         * animations.
         *
         * TODO: Target for removal
         */ var projectionTargetProgress;
        /**
         * When values are removed from all animation props we need to search
         * for a fallback value to animate to. These values are tracked in baseTarget.
         */ var baseTarget = tslib.__assign({
        }, latestValues);
        // Internal methods ========================
        /**
         * On mount, this will be hydrated with a callback to disconnect
         * this visual element from its parent on unmount.
         */ var removeFromVariantTree;
        /**
         *
         */ function render() {
            if (!instance) return;
            if (element.isProjectionReady()) {
                /**
                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
                 * This is the final box that we will then project into by calculating a transform delta and
                 * applying it to the corrected box.
                 */ applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
                /**
                 * Update the delta between the corrected box and the final target box, after
                 * user-set transforms are applied to it. This will be used by the renderer to
                 * create a transform style that will reproject the element from its actual layout
                 * into the desired bounding box.
                 */ updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);
            }
            triggerBuild();
            renderInstance(instance, renderState);
        }
        function triggerBuild() {
            var valuesToRender = latestValues;
            if (crossfader && crossfader.isActive()) {
                var crossfadedValues = crossfader.getCrossfadeState(element);
                if (crossfadedValues) valuesToRender = crossfadedValues;
            }
            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);
        }
        function update() {
            lifecycles.notifyUpdate(latestValues);
        }
        function updateLayoutProjection() {
            if (!element.isProjectionReady()) return;
            var delta1 = layoutState.delta, treeScale = layoutState.treeScale;
            var prevTreeScaleX = treeScale.x;
            var prevTreeScaleY = treeScale.y;
            var prevDeltaTransform = layoutState.deltaTransform;
            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);
            hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta1);
            hasViewportBoxUpdated = false;
            var deltaTransform = buildLayoutProjectionTransform(delta1, treeScale);
            if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction
            prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) element.scheduleRender();
            layoutState.deltaTransform = deltaTransform;
        }
        function updateTreeLayoutProjection() {
            element.layoutTree.forEach(fireUpdateLayoutProjection);
        }
        /**
         *
         */ function bindToMotionValue(key, value) {
            var removeOnChange = value.onChange(function(latestValue) {
                latestValues[key] = latestValue;
                props.onUpdate && sync__default['default'].update(update, false, true);
            });
            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);
            valueSubscriptions.set(key, function() {
                removeOnChange();
                removeOnRenderRequest();
            });
        }
        /**
         * Any motion values that are provided to the element when created
         * aren't yet bound to the element, as this would technically be impure.
         * However, we iterate through the motion values and set them to the
         * initial values for this component.
         *
         * TODO: This is impure and we should look at changing this to run on mount.
         * Doing so will break some tests but this isn't neccessarily a breaking change,
         * more a reflection of the test.
         */ var initialMotionValues = scrapeMotionValuesFromProps1(props);
        for(var key in initialMotionValues){
            var value = initialMotionValues[key];
            if (latestValues[key] !== undefined && isMotionValue(value)) value.set(latestValues[key], false);
        }
        /**
         * Determine what role this visual element should take in the variant tree.
         */ var isControllingVariants = checkIfControllingVariants(props);
        var isVariantNode = checkIfVariantNode(props);
        var element = tslib.__assign(tslib.__assign({
            treeType: treeType,
            /**
             * This is a mirror of the internal instance prop, which keeps
             * VisualElement type-compatible with React's RefObject.
             */ current: null,
            /**
             * The depth of this visual element within the visual element tree.
             */ depth: parent ? parent.depth + 1 : 0,
            parent: parent,
            children: new Set(),
            /**
             * An ancestor path back to the root visual element. This is used
             * by layout projection to quickly recurse back up the tree.
             */ path: parent ? tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(parent.path)), [
                parent
            ]) : [],
            layoutTree: parent ? parent.layoutTree : new FlatTree(),
            /**
             *
             */ presenceId: presenceId,
            projection: projection,
            /**
             * If this component is part of the variant tree, it should track
             * any children that are also part of the tree. This is essentially
             * a shadow tree to simplify logic around how to stagger over children.
             */ variantChildren: isVariantNode ? new Set() : undefined,
            /**
             * Whether this instance is visible. This can be changed imperatively
             * by AnimateSharedLayout, is analogous to CSS's visibility in that
             * hidden elements should take up layout, and needs enacting by the configured
             * render function.
             */ isVisible: undefined,
            /**
             * Normally, if a component is controlled by a parent's variants, it can
             * rely on that ancestor to trigger animations further down the tree.
             * However, if a component is created after its parent is mounted, the parent
             * won't trigger that mount animation so the child needs to.
             *
             * TODO: This might be better replaced with a method isParentMounted
             */ manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
            /**
             * This can be set by AnimatePresence to force components that mount
             * at the same time as it to mount as if they have initial={false} set.
             */ blockInitialAnimation: blockInitialAnimation,
            /**
             * Determine whether this component has mounted yet. This is mostly used
             * by variant children to determine whether they need to trigger their
             * own animations on mount.
             */ isMounted: function() {
                return Boolean(instance);
            },
            mount: function(newInstance) {
                instance = element.current = newInstance;
                element.pointTo(element);
                if (isVariantNode && parent && !isControllingVariants) removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
                parent === null || parent === void 0 || parent.children.add(element);
            },
            /**
             *
             */ unmount: function() {
                sync.cancelSync.update(update);
                sync.cancelSync.render(render);
                sync.cancelSync.preRender(element.updateLayoutProjection);
                valueSubscriptions.forEach(function(remove) {
                    return remove();
                });
                element.stopLayoutAnimation();
                element.layoutTree.remove(element);
                removeFromVariantTree === null || removeFromVariantTree === void 0 || removeFromVariantTree();
                parent === null || parent === void 0 || parent.children.delete(element);
                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 || unsubscribeFromLeadVisualElement();
                lifecycles.clearAllListeners();
            },
            /**
             * Add a child visual element to our set of children.
             */ addVariantChild: function(child) {
                var _a4;
                var closestVariantNode = element.getClosestVariantNode();
                if (closestVariantNode) {
                    (_a4 = closestVariantNode.variantChildren) === null || _a4 === void 0 || _a4.add(child);
                    return function() {
                        return closestVariantNode.variantChildren.delete(child);
                    };
                }
            },
            sortNodePosition: function(other) {
                /**
                 * If these nodes aren't even of the same type we can't compare their depth.
                 */ if (!sortNodePosition || treeType !== other.treeType) return 0;
                return sortNodePosition(element.getInstance(), other.getInstance());
            },
            /**
             * Returns the closest variant node in the tree starting from
             * this visual element.
             */ getClosestVariantNode: function() {
                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
            },
            /**
             * A method that schedules an update to layout projections throughout
             * the tree. We inherit from the parent so there's only ever one
             * job scheduled on the next frame - that of the root visual element.
             */ scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function() {
                return sync__default['default'].preRender(element.updateTreeLayoutProjection, false, true);
            },
            /**
             * Expose the latest layoutId prop.
             */ getLayoutId: function() {
                return props.layoutId;
            },
            /**
             * Returns the current instance.
             */ getInstance: function() {
                return instance;
            },
            /**
             * Get/set the latest static values.
             */ getStaticValue: function(key1) {
                return latestValues[key1];
            },
            setStaticValue: function(key1, value) {
                return latestValues[key1] = value;
            },
            /**
             * Returns the latest motion value state. Currently only used to take
             * a snapshot of the visual element - perhaps this can return the whole
             * visual state
             */ getLatestValues: function() {
                return latestValues;
            },
            /**
             * Set the visiblity of the visual element. If it's changed, schedule
             * a render to reflect these changes.
             */ setVisibility: function(visibility) {
                if (element.isVisible === visibility) return;
                element.isVisible = visibility;
                element.scheduleRender();
            },
            /**
             * Make a target animatable by Popmotion. For instance, if we're
             * trying to animate width from 100px to 100vw we need to measure 100vw
             * in pixels to determine what we really need to animate to. This is also
             * pluggable to support Framer's custom value types like Color,
             * and CSS variables.
             */ makeTargetAnimatable: function(target, canMutate) {
                if (canMutate === void 0) canMutate = true;
                return makeTargetAnimatable(element, target, props, canMutate);
            },
            // Motion values ========================
            /**
             * Add a motion value and bind it to this visual element.
             */ addValue: function(key1, value) {
                // Remove existing value if it exists
                if (element.hasValue(key1)) element.removeValue(key1);
                values.set(key1, value);
                latestValues[key1] = value.get();
                bindToMotionValue(key1, value);
            },
            /**
             * Remove a motion value and unbind any active subscriptions.
             */ removeValue: function(key1) {
                var _a4;
                values.delete(key1);
                (_a4 = valueSubscriptions.get(key1)) === null || _a4 === void 0 || _a4();
                valueSubscriptions.delete(key1);
                delete latestValues[key1];
                removeValueFromRenderState(key1, renderState);
            },
            /**
             * Check whether we have a motion value for this key
             */ hasValue: function(key1) {
                return values.has(key1);
            },
            /**
             * Get a motion value for this key. If called with a default
             * value, we'll create one if none exists.
             */ getValue: function(key1, defaultValue) {
                var value = values.get(key1);
                if (value === undefined && defaultValue !== undefined) {
                    value = motionValue(defaultValue);
                    element.addValue(key1, value);
                }
                return value;
            },
            /**
             * Iterate over our motion values.
             */ forEachValue: function(callback) {
                return values.forEach(callback);
            },
            /**
             * If we're trying to animate to a previously unencountered value,
             * we need to check for it in our state and as a last resort read it
             * directly from the instance (which might have performance implications).
             */ readValue: function(key1) {
                var _a4;
                return (_a4 = latestValues[key1]) !== null && _a4 !== void 0 ? _a4 : readValueFromInstance(instance, key1, options);
            },
            /**
             * Set the base target to later animate back to. This is currently
             * only hydrated on creation and when we first read a value.
             */ setBaseTarget: function(key1, value) {
                baseTarget[key1] = value;
            },
            /**
             * Find the base target for a value thats been removed from all animation
             * props.
             */ getBaseTarget: function(key1) {
                if (getBaseTarget) {
                    var target = getBaseTarget(props, key1);
                    if (target !== undefined && !isMotionValue(target)) return target;
                }
                return baseTarget[key1];
            }
        }, lifecycles), {
            /**
             * Build the renderer state based on the latest visual state.
             */ build: function() {
                triggerBuild();
                return renderState;
            },
            /**
             * Schedule a render on the next animation frame.
             */ scheduleRender: function() {
                sync__default['default'].render(render, false, true);
            },
            /**
             * Synchronously fire render. It's prefered that we batch renders but
             * in many circumstances, like layout measurement, we need to run this
             * synchronously. However in those instances other measures should be taken
             * to batch reads/writes.
             */ syncRender: render,
            /**
             * Update the provided props. Ensure any newly-added motion values are
             * added to our map, old ones removed, and listeners updated.
             */ setProps: function(newProps) {
                props = newProps;
                lifecycles.updatePropListeners(newProps);
                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps1(props), prevMotionValues);
            },
            getProps: function() {
                return props;
            },
            // Variants ==============================
            /**
             * Returns the variant definition with a given name.
             */ getVariant: function(name) {
                var _a4;
                return (_a4 = props.variants) === null || _a4 === void 0 ? void 0 : _a4[name];
            },
            /**
             * Returns the defined default transition on this component.
             */ getDefaultTransition: function() {
                return props.transition;
            },
            /**
             * Used by child variant nodes to get the closest ancestor variant props.
             */ getVariantContext: function(startAtParent) {
                if (startAtParent === void 0) startAtParent = false;
                if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
                if (!isControllingVariants) {
                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {
                    };
                    if (props.initial !== undefined) context_1.initial = props.initial;
                    return context_1;
                }
                var context = {
                };
                for(var i = 0; i < numVariantProps; i++){
                    var name_1 = variantProps[i];
                    var prop = props[name_1];
                    if (isVariantLabel(prop) || prop === false) context[name_1] = prop;
                }
                return context;
            },
            // Layout projection ==============================
            /**
             * Enable layout projection for this visual element. Won't actually
             * occur until we also have hydrated layout measurements.
             */ enableLayoutProjection: function() {
                projection.isEnabled = true;
                element.layoutTree.add(element);
            },
            /**
             * Lock the projection target, for instance when dragging, so
             * nothing else can try and animate it.
             */ lockProjectionTarget: function() {
                projection.isTargetLocked = true;
            },
            unlockProjectionTarget: function() {
                element.stopLayoutAnimation();
                projection.isTargetLocked = false;
            },
            getLayoutState: function() {
                return layoutState;
            },
            setCrossfader: function(newCrossfader) {
                crossfader = newCrossfader;
            },
            isProjectionReady: function() {
                return projection.isEnabled && projection.isHydrated && layoutState.isHydrated;
            },
            /**
             * Start a layout animation on a given axis.
             */ startLayoutAnimation: function(axis, transition, isRelative) {
                if (isRelative === void 0) isRelative = false;
                var progress = element.getProjectionAnimationProgress()[axis];
                var _a4 = isRelative ? projection.relativeTarget[axis] : projection.target[axis], min = _a4.min, max = _a4.max;
                var length = max - min;
                progress.clearListeners();
                progress.set(min);
                progress.set(min); // Set twice to hard-reset velocity
                progress.onChange(function(v) {
                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);
                });
                return element.animateMotionValue(axis, progress, 0, transition);
            },
            /**
             * Stop layout animations.
             */ stopLayoutAnimation: function() {
                eachAxis(function(axis) {
                    return element.getProjectionAnimationProgress()[axis].stop();
                });
            },
            /**
             * Measure the current viewport box with or without transforms.
             * Only measures axis-aligned boxes, rotate and skew must be manually
             * removed with a re-render to work.
             */ measureViewportBox: function(withTransform) {
                if (withTransform === void 0) withTransform = true;
                var viewportBox = measureViewportBox(instance, options);
                if (!withTransform) removeBoxTransforms(viewportBox, latestValues);
                return viewportBox;
            },
            /**
             * Get the motion values tracking the layout animations on each
             * axis. Lazy init if not already created.
             */ getProjectionAnimationProgress: function() {
                projectionTargetProgress || (projectionTargetProgress = {
                    x: motionValue(0),
                    y: motionValue(0)
                });
                return projectionTargetProgress;
            },
            /**
             * Update the projection of a single axis. Schedule an update to
             * the tree layout projection.
             */ setProjectionTargetAxis: function(axis, min, max, isRelative) {
                if (isRelative === void 0) isRelative = false;
                var target;
                if (isRelative) {
                    if (!projection.relativeTarget) projection.relativeTarget = axisBox();
                    target = projection.relativeTarget[axis];
                } else {
                    projection.relativeTarget = undefined;
                    target = projection.target[axis];
                }
                projection.isHydrated = true;
                target.min = min;
                target.max = max;
                // Flag that we want to fire the onViewportBoxUpdate event handler
                hasViewportBoxUpdated = true;
                lifecycles.notifySetAxisTarget();
            },
            /**
             * Rebase the projection target on top of the provided viewport box
             * or the measured layout. This ensures that non-animating elements
             * don't fall out of sync differences in measurements vs projections
             * after a page scroll or other relayout.
             */ rebaseProjectionTarget: function(force, box) {
                if (box === void 0) box = layoutState.layout;
                var _a4 = element.getProjectionAnimationProgress(), x = _a4.x, y = _a4.y;
                var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();
                if (force || shouldRebase) eachAxis(function(axis) {
                    var _a5 = box[axis], min = _a5.min, max = _a5.max;
                    element.setProjectionTargetAxis(axis, min, max);
                });
            },
            /**
             * Notify the visual element that its layout is up-to-date.
             * Currently Animate.tsx uses this to check whether a layout animation
             * needs to be performed.
             */ notifyLayoutReady: function(config) {
                setCurrentViewportBox(element);
                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);
            },
            /**
             * Temporarily reset the transform of the instance.
             */ resetTransform: function() {
                return resetTransform(element, instance, props);
            },
            restoreTransform: function() {
                return restoreTransform(instance, renderState);
            },
            updateLayoutProjection: updateLayoutProjection,
            updateTreeLayoutProjection: function() {
                element.layoutTree.forEach(fireResolveRelativeTargetBox);
                /**
                 * Schedule the projection updates at the end of the current preRender
                 * step. This will ensure that all layout trees will first resolve
                 * relative projection boxes into viewport boxes, and *then*
                 * update projections.
                 */ sync__default['default'].preRender(updateTreeLayoutProjection, false, true);
            // sync.postRender(() => element.scheduleUpdateLayoutProjection())
            },
            getProjectionParent: function() {
                if (projectionParent === undefined) {
                    var foundParent = false;
                    // Search backwards through the tree path
                    for(var i = element.path.length - 1; i >= 0; i--){
                        var ancestor = element.path[i];
                        if (ancestor.projection.isEnabled) {
                            foundParent = ancestor;
                            break;
                        }
                    }
                    projectionParent = foundParent;
                }
                return projectionParent;
            },
            resolveRelativeTargetBox: function() {
                var relativeParent = element.getProjectionParent();
                if (!projection.relativeTarget || !relativeParent) return;
                calcRelativeBox(projection, relativeParent.projection);
                if (isDraggable(relativeParent)) {
                    var target = projection.target;
                    applyBoxTransforms(target, target, relativeParent.getLatestValues());
                }
            },
            shouldResetTransform: function() {
                return Boolean(props._layoutResetTransform);
            },
            /**
             *
             */ pointTo: function(newLead) {
                leadProjection = newLead.projection;
                leadLatestValues = newLead.getLatestValues();
                /**
                 * Subscribe to lead component's layout animations
                 */ unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 || unsubscribeFromLeadVisualElement();
                unsubscribeFromLeadVisualElement = popmotion.pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function() {
                    var _a4;
                    if (element.isPresent) element.presence = Presence.Present;
                    else (_a4 = element.layoutSafeToRemove) === null || _a4 === void 0 || _a4.call(element);
                }));
            },
            // TODO: Clean this up
            isPresent: true,
            presence: Presence.Entering
        });
        return element;
    };
};
function fireResolveRelativeTargetBox(child) {
    child.resolveRelativeTargetBox();
}
function fireUpdateLayoutProjection(child) {
    child.updateLayoutProjection();
}
var variantProps = tslib.__spreadArray([
    "initial"
], tslib.__read(variantPriorityOrder));
var numVariantProps = variantProps.length;
var positionalKeys = new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y", 
]);
var isPositionalKey = function(key) {
    return positionalKeys.has(key);
};
var hasPositionalKey = function(target) {
    return Object.keys(target).some(isPositionalKey);
};
var setAndResetVelocity = function(value, to) {
    // Looks odd but setting it twice doesn't render, it'll just
    // set both prev and current to the latest value
    value.set(to, false);
    value.set(to);
};
var isNumOrPxType = function(v) {
    return v === styleValueTypes.number || v === styleValueTypes.px;
};
var BoundingBoxDimension;
(function(BoundingBoxDimension1) {
    BoundingBoxDimension1["width"] = "width";
    BoundingBoxDimension1["height"] = "height";
    BoundingBoxDimension1["left"] = "left";
    BoundingBoxDimension1["right"] = "right";
    BoundingBoxDimension1["top"] = "top";
    BoundingBoxDimension1["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {
}));
var getPosFromMatrix = function(matrix, pos) {
    return parseFloat(matrix.split(", ")[pos]);
};
var getTranslateFromMatrix = function(pos2, pos3) {
    return function(_bbox, _a1) {
        var transform = _a1.transform;
        if (transform === "none" || !transform) return 0;
        var matrix3d = transform.match(/^matrix3d\((.+)\)$/);
        if (matrix3d) return getPosFromMatrix(matrix3d[1], pos3);
        else {
            var matrix = transform.match(/^matrix\((.+)\)$/);
            if (matrix) return getPosFromMatrix(matrix[1], pos2);
            else return 0;
        }
    };
};
var transformKeys = new Set([
    "x",
    "y",
    "z"
]);
var nonTranslationalTransformKeys = transformProps.filter(function(key) {
    return !transformKeys.has(key);
});
function removeNonTranslationalTransform(visualElement1) {
    var removedTransforms = [];
    nonTranslationalTransformKeys.forEach(function(key) {
        var value = visualElement1.getValue(key);
        if (value !== undefined) {
            removedTransforms.push([
                key,
                value.get()
            ]);
            value.set(key.startsWith("scale") ? 1 : 0);
        }
    });
    // Apply changes to element before measurement
    if (removedTransforms.length) visualElement1.syncRender();
    return removedTransforms;
}
var positionalValues = {
    // Dimensions
    width: function(_a1) {
        var x = _a1.x;
        return x.max - x.min;
    },
    height: function(_a1) {
        var y = _a1.y;
        return y.max - y.min;
    },
    top: function(_bbox, _a1) {
        var top = _a1.top;
        return parseFloat(top);
    },
    left: function(_bbox, _a1) {
        var left = _a1.left;
        return parseFloat(left);
    },
    bottom: function(_a1, _b) {
        var y = _a1.y;
        var top = _b.top;
        return parseFloat(top) + (y.max - y.min);
    },
    right: function(_a1, _b) {
        var x = _a1.x;
        var left = _b.left;
        return parseFloat(left) + (x.max - x.min);
    },
    // Transform
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
};
var convertChangedValueTypes = function(target, visualElement1, changedKeys) {
    var originBbox = visualElement1.measureViewportBox();
    var element = visualElement1.getInstance();
    var elementComputedStyle = getComputedStyle(element);
    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;
    var originComputedStyle = {
        top: top,
        left: left,
        bottom: bottom,
        right: right,
        transform: transform
    };
    // If the element is currently set to display: "none", make it visible before
    // measuring the target bounding box
    if (display === "none") visualElement1.setStaticValue("display", target.display || "block");
    // Apply the latest values (as set in checkAndConvertChangedValueTypes)
    visualElement1.syncRender();
    var targetBbox = visualElement1.measureViewportBox();
    changedKeys.forEach(function(key) {
        // Restore styles to their **calculated computed style**, not their actual
        // originally set style. This allows us to animate between equivalent pixel units.
        var value = visualElement1.getValue(key);
        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));
        target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
};
var checkAndConvertChangedValueTypes = function(visualElement1, target, origin, transitionEnd) {
    if (origin === void 0) origin = {
    };
    if (transitionEnd === void 0) transitionEnd = {
    };
    target = tslib.__assign({
    }, target);
    transitionEnd = tslib.__assign({
    }, transitionEnd);
    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    // We want to remove any transform values that could affect the element's bounding box before
    // it's measured. We'll reapply these later.
    var removedTransformValues = [];
    var hasAttemptedToRemoveTransformValues = false;
    var changedValueTypeKeys = [];
    targetPositionalKeys.forEach(function(key) {
        var value = visualElement1.getValue(key);
        if (!visualElement1.hasValue(key)) return;
        var from = origin[key];
        var to = target[key];
        var fromType = findDimensionValueType(from);
        var toType;
        // TODO: The current implementation of this basically throws an error
        // if you try and do value conversion via keyframes. There's probably
        // a way of doing this but the performance implications would need greater scrutiny,
        // as it'd be doing multiple resize-remeasure operations.
        if (isKeyframesTarget(to)) {
            var numKeyframes = to.length;
            for(var i = to[0] === null ? 1 : 0; i < numKeyframes; i++)if (!toType) {
                toType = findDimensionValueType(to[i]);
                heyListen.invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
            } else heyListen.invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
        } else toType = findDimensionValueType(to);
        if (fromType !== toType) {
            // If they're both just number or px, convert them both to numbers rather than
            // relying on resize/remeasure to convert (which is wasteful in this situation)
            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
                var current = value.get();
                if (typeof current === "string") value.set(parseFloat(current));
                if (typeof to === "string") target[key] = parseFloat(to);
                else if (Array.isArray(to) && toType === styleValueTypes.px) target[key] = to.map(parseFloat);
            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
                // If one or the other value is 0, it's safe to coerce it to the
                // type of the other without measurement
                if (from === 0) value.set(toType.transform(from));
                else target[key] = fromType.transform(to);
            } else {
                // If we're going to do value conversion via DOM measurements, we first
                // need to remove non-positional transform values that could affect the bbox measurements.
                if (!hasAttemptedToRemoveTransformValues) {
                    removedTransformValues = removeNonTranslationalTransform(visualElement1);
                    hasAttemptedToRemoveTransformValues = true;
                }
                changedValueTypeKeys.push(key);
                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];
                setAndResetVelocity(value, to);
            }
        }
    });
    if (changedValueTypeKeys.length) {
        var convertedTarget = convertChangedValueTypes(target, visualElement1, changedValueTypeKeys);
        // If we removed transform values, reapply them before the next render
        if (removedTransformValues.length) removedTransformValues.forEach(function(_a1) {
            var _b = tslib.__read(_a1, 2), key = _b[0], value = _b[1];
            visualElement1.getValue(key).set(value);
        });
        // Reapply original values
        visualElement1.syncRender();
        return {
            target: convertedTarget,
            transitionEnd: transitionEnd
        };
    } else return {
        target: target,
        transitionEnd: transitionEnd
    };
};
/**
 * Convert value types for x/y/width/height/top/left/bottom/right
 *
 * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`
 *
 * @internal
 */ function unitConversion(visualElement1, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement1, target, origin, transitionEnd) : {
        target: target,
        transitionEnd: transitionEnd
    };
}
/**
 * Parse a DOM variant to make it animatable. This involves resolving CSS variables
 * and ensuring animations like "20%" => "calc(50vw)" are performed in pixels.
 */ var parseDomVariant = function(visualElement1, target, origin, transitionEnd) {
    var resolved = resolveCSSVariables(visualElement1, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement1, target, origin, transitionEnd);
};
function getComputedStyle$1(element) {
    return window.getComputedStyle(element);
}
var htmlConfig = {
    treeType: "dom",
    readValueFromInstance: function(domElement, key) {
        if (isTransformProp(key)) {
            var defaultType = getDefaultValueType(key);
            return defaultType ? defaultType.default || 0 : 0;
        } else {
            var computedStyle = getComputedStyle$1(domElement);
            return (isCSSVariable$1(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
        }
    },
    sortNodePosition: function(a, b) {
        /**
         * compareDocumentPosition returns a bitmask, by using the bitwise &
         * we're returning true if 2 in that bitmask is set to true. 2 is set
         * to true if b preceeds a.
         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;
    },
    getBaseTarget: function(props, key) {
        var _a1;
        return (_a1 = props.style) === null || _a1 === void 0 ? void 0 : _a1[key];
    },
    measureViewportBox: function(element, _a1) {
        var transformPagePoint = _a1.transformPagePoint;
        return getBoundingBox(element, transformPagePoint);
    },
    /**
     * Reset the transform on the current Element. This is called as part
     * of a batched process across the entire layout tree. To remove this write
     * cycle it'd be interesting to see if it's possible to "undo" all the current
     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms
     * works
     */ resetTransform: function(element, domElement, props) {
        var transformTemplate = props.transformTemplate;
        domElement.style.transform = transformTemplate ? transformTemplate({
        }, "") : "none";
        // Ensure that whatever happens next, we restore our transform on the next frame
        element.scheduleRender();
    },
    restoreTransform: function(instance, mutableState) {
        instance.style.transform = mutableState.style.transform;
    },
    removeValueFromRenderState: function(key, _a1) {
        var vars = _a1.vars, style = _a1.style;
        delete vars[key];
        delete style[key];
    },
    /**
     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`
     * can be animated by Motion.
     */ makeTargetAnimatable: function(element, _a1, _b, isMounted) {
        var transformValues = _b.transformValues;
        if (isMounted === void 0) isMounted = true;
        var transition = _a1.transition, transitionEnd = _a1.transitionEnd, target = tslib.__rest(_a1, [
            "transition",
            "transitionEnd"
        ]);
        var origin = getOrigin(target, transition || {
        }, element);
        /**
         * If Framer has provided a function to convert `Color` etc value types, convert them
         */ if (transformValues) {
            if (transitionEnd) transitionEnd = transformValues(transitionEnd);
            if (target) target = transformValues(target);
            if (origin) origin = transformValues(origin);
        }
        if (isMounted) {
            checkTargetForNewValues(element, target, origin);
            var parsed = parseDomVariant(element, target, origin, transitionEnd);
            transitionEnd = parsed.transitionEnd;
            target = parsed.target;
        }
        return tslib.__assign({
            transition: transition,
            transitionEnd: transitionEnd
        }, target);
    },
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
    build: function(element, renderState, latestValues, projection, layoutState, options, props) {
        if (element.isVisible !== undefined) renderState.style.visibility = element.isVisible ? "visible" : "hidden";
        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform ? buildLayoutProjectionTransformOrigin : undefined);
    },
    render: renderHTML
};
var htmlVisualElement = visualElement(htmlConfig);
var svgVisualElement = visualElement(tslib.__assign(tslib.__assign({
}, htmlConfig), {
    getBaseTarget: function(props, key) {
        return props[key];
    },
    readValueFromInstance: function(domElement, key) {
        var _a1;
        if (isTransformProp(key)) return ((_a1 = getDefaultValueType(key)) === null || _a1 === void 0 ? void 0 : _a1.default) || 0;
        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        return domElement.getAttribute(key);
    },
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
    build: function(_element, renderState, latestValues, projection, layoutState, options, props) {
        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform ? buildLayoutProjectionTransformOrigin : undefined);
    },
    render: renderSVG
}));
var createDomVisualElement = function(Component, options) {
    return isSVGComponent(Component) ? svgVisualElement(options, {
        enableHardwareAcceleration: false
    }) : htmlVisualElement(options, {
        enableHardwareAcceleration: true
    });
};
var featureBundle = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({
}, animations), gestureAnimations), drag), layoutAnimations);
/**
 * HTML & SVG components, optimised for use with gestures and animation. These can be used as
 * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.
 *
 * @public
 */ var motion = /*@__PURE__*/ createMotionProxy(function(Component, config) {
    return createDomMotionConfig(Component, config, featureBundle, createDomVisualElement);
});
/**
 * Create a DOM `motion` component with the provided string. This is primarily intended
 * as a full alternative to `motion` for consumers who have to support environments that don't
 * support `Proxy`.
 *
 * ```javascript
 * import { createDomMotionComponent } from "framer-motion"
 *
 * const motion = {
 *   div: createDomMotionComponent('div')
 * }
 * ```
 *
 * @public
 */ function createDomMotionComponent(key) {
    return createMotionComponent(createDomMotionConfig(key, {
        forwardMotionProps: false
    }, featureBundle, createDomVisualElement));
}
/**
 * @public
 */ var m = createMotionProxy(createDomMotionConfig);
function useForceUpdate() {
    var unloadingRef = React.useRef(false);
    var _a1 = tslib.__read(React.useState(0), 2), forcedRenderCount = _a1[0], setForcedRenderCount = _a1[1];
    useUnmountEffect(function() {
        return unloadingRef.current = true;
    });
    return React.useCallback(function() {
        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [
        forcedRenderCount
    ]);
}
var presenceId = 0;
function getPresenceId() {
    var id = presenceId;
    presenceId++;
    return id;
}
var PresenceChild = function(_a1) {
    var children = _a1.children, initial = _a1.initial, isPresent1 = _a1.isPresent, onExitComplete = _a1.onExitComplete, custom = _a1.custom, presenceAffectsLayout = _a1.presenceAffectsLayout;
    var presenceChildren = useConstant(newChildrenMap);
    var id = useConstant(getPresenceId);
    var context = React.useMemo(function() {
        return {
            id: id,
            initial: initial,
            isPresent: isPresent1,
            custom: custom,
            onExitComplete: function(childId) {
                presenceChildren.set(childId, true);
                var allComplete = true;
                presenceChildren.forEach(function(isComplete) {
                    if (!isComplete) allComplete = false;
                });
                allComplete && (onExitComplete === null || onExitComplete === void 0 || onExitComplete());
            },
            register: function(childId) {
                presenceChildren.set(childId, false);
                return function() {
                    return presenceChildren.delete(childId);
                };
            }
        };
    }, /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */ presenceAffectsLayout ? undefined : [
        isPresent1
    ]);
    React.useMemo(function() {
        presenceChildren.forEach(function(_, key) {
            return presenceChildren.set(key, false);
        });
    }, [
        isPresent1
    ]);
    /**
     * If there's no `motion` components to fire exit animations, we want to remove this
     * component immediately.
     */ React__namespace.useEffect(function() {
        !isPresent1 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 || onExitComplete());
    }, [
        isPresent1
    ]);
    return React__namespace.createElement(PresenceContext.Provider, {
        value: context
    }, children);
};
function newChildrenMap() {
    return new Map();
}
function getChildKey(child) {
    return child.key || "";
}
function updateChildLookup(children, allChildren) {
    var seenChildren = new Set();
    children.forEach(function(child) {
        var key = getChildKey(child);
        if (seenChildren) {
            if (seenChildren.has(key)) console.warn("Children of AnimatePresence require unique keys. \"" + key + "\" is a duplicate.");
            seenChildren.add(key);
        }
        allChildren.set(key, child);
    });
}
function onlyElements(children) {
    var filtered = [];
    // We use forEach here instead of map as map mutates the component key by preprending `.$`
    React.Children.forEach(children, function(child) {
        if (React.isValidElement(child)) filtered.push(child);
    });
    return filtered;
}
/**
 * `AnimatePresence` enables the animation of components that have been removed from the tree.
 *
 * When adding/removing more than a single child, every child **must** be given a unique `key` prop.
 *
 * @library
 *
 * Any `Frame` components that have an `exit` property defined will animate out when removed from
 * the tree.
 *
 * ```jsx
 * import { Frame, AnimatePresence } from 'framer'
 *
 * // As items are added and removed from `items`
 * export function Items({ items }) {
 *   return (
 *     <AnimatePresence>
 *       {items.map(item => (
 *         <Frame
 *           key={item.id}
 *           initial={{ opacity: 0 }}
 *           animate={{ opacity: 1 }}
 *           exit={{ opacity: 0 }}
 *         />
 *       ))}
 *     </AnimatePresence>
 *   )
 * }
 * ```
 *
 * You can sequence exit animations throughout a tree using variants.
 *
 * @motion
 *
 * Any `motion` components that have an `exit` property defined will animate out when removed from
 * the tree.
 *
 * ```jsx
 * import { motion, AnimatePresence } from 'framer-motion'
 *
 * export const Items = ({ items }) => (
 *   <AnimatePresence>
 *     {items.map(item => (
 *       <motion.div
 *         key={item.id}
 *         initial={{ opacity: 0 }}
 *         animate={{ opacity: 1 }}
 *         exit={{ opacity: 0 }}
 *       />
 *     ))}
 *   </AnimatePresence>
 * )
 * ```
 *
 * You can sequence exit animations throughout a tree using variants.
 *
 * If a child contains multiple `motion` components with `exit` props, it will only unmount the child
 * once all `motion` components have finished animating out. Likewise, any components using
 * `usePresence` all need to call `safeToRemove`.
 *
 * @public
 */ var AnimatePresence = function(_a1) {
    var children = _a1.children, custom = _a1.custom, _b = _a1.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a1.onExitComplete, exitBeforeEnter = _a1.exitBeforeEnter, _c = _a1.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
    // We want to force a re-render once all exiting animations have finished. We
    // either use a local forceRender function, or one from a parent context if it exists.
    var forceRender = useForceUpdate();
    var layoutContext = React.useContext(SharedLayoutContext);
    if (isSharedLayout(layoutContext)) forceRender = layoutContext.forceUpdate;
    var isInitialRender = React.useRef(true);
    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key
    var filteredChildren = onlyElements(children);
    // Keep a living record of the children we're actually rendering so we
    // can diff to figure out which are entering and exiting
    var presentChildren = React.useRef(filteredChildren);
    // A lookup table to quickly reference components by key
    var allChildren = React.useRef(new Map()).current;
    // A living record of all currently exiting components.
    var exiting = React.useRef(new Set()).current;
    updateChildLookup(filteredChildren, allChildren);
    // If this is the initial component render, just deal with logic surrounding whether
    // we play onMount animations or not.
    if (isInitialRender.current) {
        isInitialRender.current = false;
        return React__namespace.createElement(React__namespace.Fragment, null, filteredChildren.map(function(child) {
            return React__namespace.createElement(PresenceChild, {
                key: getChildKey(child),
                isPresent: true,
                initial: initial ? undefined : false,
                presenceAffectsLayout: presenceAffectsLayout
            }, child);
        }));
    }
    // If this is a subsequent render, deal with entering and exiting children
    var childrenToRender = tslib.__spreadArray([], tslib.__read(filteredChildren));
    // Diff the keys of the currently-present and target children to update our
    // exiting list.
    var presentKeys = presentChildren.current.map(getChildKey);
    var targetKeys = filteredChildren.map(getChildKey);
    // Diff the present children with our target children and mark those that are exiting
    var numPresent = presentKeys.length;
    for(var i = 0; i < numPresent; i++){
        var key = presentKeys[i];
        if (targetKeys.indexOf(key) === -1) exiting.add(key);
        else // In case this key has re-entered, remove from the exiting list
        exiting.delete(key);
    }
    // If we currently have exiting children, and we're deferring rendering incoming children
    // until after all current children have exiting, empty the childrenToRender array
    if (exitBeforeEnter && exiting.size) childrenToRender = [];
    // Loop through all currently exiting components and clone them to overwrite `animate`
    // with any `exit` prop they might have defined.
    exiting.forEach(function(key) {
        // If this component is actually entering again, early return
        if (targetKeys.indexOf(key) !== -1) return;
        var child = allChildren.get(key);
        if (!child) return;
        var insertionIndex = presentKeys.indexOf(key);
        var onExit = function() {
            allChildren.delete(key);
            exiting.delete(key);
            // Remove this child from the present children
            var removeIndex = presentChildren.current.findIndex(function(presentChild) {
                return presentChild.key === key;
            });
            presentChildren.current.splice(removeIndex, 1);
            // Defer re-rendering until all exiting children have indeed left
            if (!exiting.size) {
                presentChildren.current = filteredChildren;
                forceRender();
                onExitComplete && onExitComplete();
            }
        };
        childrenToRender.splice(insertionIndex, 0, React__namespace.createElement(PresenceChild, {
            key: getChildKey(child),
            isPresent: false,
            onExitComplete: onExit,
            custom: custom,
            presenceAffectsLayout: presenceAffectsLayout
        }, child));
    });
    // Add `MotionContext` even to children that don't need it to ensure we're rendering
    // the same tree between renders
    childrenToRender = childrenToRender.map(function(child) {
        var key = child.key;
        return exiting.has(key) ? child : React__namespace.createElement(PresenceChild, {
            key: getChildKey(child),
            isPresent: true,
            presenceAffectsLayout: presenceAffectsLayout
        }, child);
    });
    presentChildren.current = childrenToRender;
    if (exitBeforeEnter && childrenToRender.length > 1) console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
    return React__namespace.createElement(React__namespace.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
        return React.cloneElement(child);
    }));
};
/**
 * Animate a single value or a `MotionValue`.
 *
 * The first argument is either a `MotionValue` to animate, or an initial animation value.
 *
 * The second is either a value to animate to, or an array of keyframes to animate through.
 *
 * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.
 *
 * Returns `AnimationPlaybackControls`, currently just a `stop` method.
 *
 * ```javascript
 * const x = useMotionValue(0)
 *
 * useEffect(() => {
 *   const controls = animate(x, 100, {
 *     type: "spring",
 *     stiffness: 2000,
 *     onComplete: v => {}
 *   })
 *
 *   return controls.stop
 * })
 * ```
 *
 * @public
 */ function animate(from, to, transition) {
    if (transition === void 0) transition = {
    };
    var value = isMotionValue(from) ? from : motionValue(from);
    startAnimation("", value, to, transition);
    return {
        stop: function() {
            return value.stop();
        }
    };
}
function createCrossfader() {
    /**
     * The current state of the crossfade as a value between 0 and 1
     */ var progress = motionValue(1);
    var options = {
        lead: undefined,
        follow: undefined,
        crossfadeOpacity: false,
        preserveFollowOpacity: false
    };
    var prevOptions = tslib.__assign({
    }, options);
    var leadState = {
    };
    var followState = {
    };
    /**
     *
     */ var isActive = false;
    /**
     *
     */ var finalCrossfadeFrame = null;
    /**
     * Framestamp of the last frame we updated values at.
     */ var prevUpdate = 0;
    function startCrossfadeAnimation(target, transition) {
        var lead = options.lead, follow = options.follow;
        isActive = true;
        finalCrossfadeFrame = null;
        var hasUpdated = false;
        var onUpdate = function() {
            hasUpdated = true;
            lead && lead.scheduleRender();
            follow && follow.scheduleRender();
        };
        var onComplete = function() {
            isActive = false;
            /**
             * If the crossfade animation is no longer active, flag a frame
             * that we're still allowed to crossfade
             */ finalCrossfadeFrame = sync.getFrameData().timestamp;
        };
        transition = transition && getValueTransition(transition, "crossfade");
        return animate(progress, target, tslib.__assign(tslib.__assign({
        }, transition), {
            onUpdate: onUpdate,
            onComplete: function() {
                if (!hasUpdated) {
                    progress.set(target);
                    /**
                     * If we never ran an update, for instance if this was an instant transition, fire a
                     * simulated final frame to ensure the crossfade gets applied correctly.
                     */ sync__default['default'].read(onComplete);
                } else onComplete();
                onUpdate();
            }
        }));
    }
    function updateCrossfade() {
        var _a1, _b;
        /**
         * We only want to compute the crossfade once per frame, so we
         * compare the previous update framestamp with the current frame
         * and early return if they're the same.
         */ var timestamp = sync.getFrameData().timestamp;
        var lead = options.lead, follow = options.follow;
        if (timestamp === prevUpdate || !lead) return;
        prevUpdate = timestamp;
        /**
         * Merge each component's latest values into our crossfaded state
         * before crossfading.
         */ var latestLeadValues = lead.getLatestValues();
        Object.assign(leadState, latestLeadValues);
        var latestFollowValues = follow ? follow.getLatestValues() : options.prevValues;
        Object.assign(followState, latestFollowValues);
        var p = progress.get();
        /**
         * Crossfade the opacity between the two components. This will result
         * in a different opacity for each component.
         */ var leadTargetOpacity = (_a1 = latestLeadValues.opacity) !== null && _a1 !== void 0 ? _a1 : 1;
        var followTargetOpacity = (_b = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b !== void 0 ? _b : 1;
        if (options.crossfadeOpacity && follow) {
            leadState.opacity = popmotion.mix(/**
             * If the follow child has been completely hidden we animate
             * this opacity from its previous opacity, but otherwise from completely transparent.
             */ follow.isVisible !== false ? 0 : followTargetOpacity, leadTargetOpacity, easeCrossfadeIn(p));
            followState.opacity = options.preserveFollowOpacity ? followTargetOpacity : popmotion.mix(followTargetOpacity, 0, easeCrossfadeOut(p));
        } else if (!follow) leadState.opacity = popmotion.mix(followTargetOpacity, leadTargetOpacity, p);
        mixValues(leadState, followState, latestLeadValues, latestFollowValues || {
        }, Boolean(follow), p);
    }
    return {
        isActive: function() {
            return leadState && (isActive || sync.getFrameData().timestamp === finalCrossfadeFrame);
        },
        fromLead: function(transition) {
            return startCrossfadeAnimation(0, transition);
        },
        toLead: function(transition) {
            var initialProgress = 0;
            if (!options.prevValues && !options.follow) /**
                 * If we're not coming from anywhere, start at the end of the animation.
                 */ initialProgress = 1;
            else if (prevOptions.lead === options.follow && prevOptions.follow === options.lead) /**
                 * If we're swapping follow/lead we can reverse the progress
                 */ initialProgress = 1 - progress.get();
            progress.set(initialProgress);
            return startCrossfadeAnimation(1, transition);
        },
        reset: function() {
            return progress.set(1);
        },
        stop: function() {
            return progress.stop();
        },
        getCrossfadeState: function(element) {
            updateCrossfade();
            if (element === options.lead) return leadState;
            else if (element === options.follow) return followState;
        },
        setOptions: function(newOptions) {
            prevOptions = options;
            options = newOptions;
            leadState = {
            };
            followState = {
            };
        },
        getLatestValues: function() {
            return leadState;
        }
    };
}
var easeCrossfadeIn = compress(0, 0.5, popmotion.circOut);
var easeCrossfadeOut = compress(0.5, 0.95, popmotion.linear);
function compress(min, max, easing) {
    return function(p) {
        // Could replace ifs with clamp
        if (p < min) return 0;
        if (p > max) return 1;
        return easing(popmotion.progress(min, max, p));
    };
}
var borders = [
    "TopLeft",
    "TopRight",
    "BottomLeft",
    "BottomRight"
];
var numBorders = borders.length;
function mixValues(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {
    /**
     * Mix border radius
     */ for(var i = 0; i < numBorders; i++){
        var borderLabel = "border" + borders[i] + "Radius";
        var followRadius = getRadius(latestFollowValues, borderLabel);
        var leadRadius = getRadius(latestLeadValues, borderLabel);
        if (followRadius === undefined && leadRadius === undefined) continue;
        followRadius || (followRadius = 0);
        leadRadius || (leadRadius = 0);
        /**
         * Currently we're only crossfading between numerical border radius.
         * It would be possible to crossfade between percentages for a little
         * extra bundle size.
         */ if (typeof followRadius === "number" && typeof leadRadius === "number") {
            var radius = Math.max(popmotion.mix(followRadius, leadRadius, p), 0);
            leadState[borderLabel] = followState[borderLabel] = radius;
        }
    }
    /**
     * Mix rotation
     */ if (latestFollowValues.rotate || latestLeadValues.rotate) {
        var rotate = popmotion.mix(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);
        leadState.rotate = followState.rotate = rotate;
    }
    /**
     * We only want to mix the background color if there's a follow element
     * that we're not crossfading opacity between. For instance with switch
     * AnimateSharedLayout animations, this helps the illusion of a continuous
     * element being animated but also cuts down on the number of paints triggered
     * for elements where opacity is doing that work for us.
     */ if (!hasFollowElement && latestLeadValues.backgroundColor && latestFollowValues.backgroundColor) /**
         * This isn't ideal performance-wise as mixColor is creating a new function every frame.
         * We could probably create a mixer that runs at the start of the animation but
         * the idea behind the crossfader is that it runs dynamically between two potentially
         * changing targets (ie opacity or borderRadius may be animating independently via variants)
         */ leadState.backgroundColor = followState.backgroundColor = popmotion.mixColor(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);
}
function getRadius(values, radiusName) {
    var _a1;
    return (_a1 = values[radiusName]) !== null && _a1 !== void 0 ? _a1 : values.borderRadius;
}
function layoutStack() {
    var stack = new Set();
    var state = {
        leadIsExiting: false
    };
    var prevState = tslib.__assign({
    }, state);
    var prevValues;
    var prevViewportBox;
    var prevDragCursor;
    var crossfader = createCrossfader();
    var needsCrossfadeAnimation = false;
    function getFollowViewportBox() {
        return state.follow ? state.follow.prevViewportBox : prevViewportBox;
    }
    function getFollowLayout() {
        var _a1;
        return (_a1 = state.follow) === null || _a1 === void 0 ? void 0 : _a1.getLayoutState().layout;
    }
    return {
        add: function(element) {
            element.setCrossfader(crossfader);
            stack.add(element);
            /**
             * Hydrate new element with previous drag position if we have one
             */ if (prevDragCursor) element.prevDragCursor = prevDragCursor;
            if (!state.lead) state.lead = element;
        },
        remove: function(element) {
            stack.delete(element);
        },
        getLead: function() {
            return state.lead;
        },
        updateSnapshot: function() {
            if (!state.lead) return;
            prevValues = crossfader.isActive() ? crossfader.getLatestValues() : state.lead.getLatestValues();
            prevViewportBox = state.lead.prevViewportBox;
            var dragControls = elementDragControls.get(state.lead);
            if (dragControls && dragControls.isDragging) prevDragCursor = dragControls.cursorProgress;
        },
        clearSnapshot: function() {
            prevDragCursor = prevViewportBox = undefined;
        },
        updateLeadAndFollow: function() {
            var _a1;
            prevState = tslib.__assign({
            }, state);
            var lead;
            var follow;
            var order1 = Array.from(stack);
            for(var i = order1.length; i--;){
                var element = order1[i];
                if (lead) follow !== null && follow !== void 0 || (follow = element);
                lead !== null && lead !== void 0 || (lead = element);
                if (lead && follow) break;
            }
            state.lead = lead;
            state.follow = follow;
            state.leadIsExiting = ((_a1 = state.lead) === null || _a1 === void 0 ? void 0 : _a1.presence) === Presence.Exiting;
            crossfader.setOptions({
                lead: lead,
                follow: follow,
                prevValues: prevValues,
                crossfadeOpacity: (follow === null || follow === void 0 ? void 0 : follow.isPresenceRoot) || (lead === null || lead === void 0 ? void 0 : lead.isPresenceRoot)
            });
            if (// Don't crossfade if we've just animated back from lead and switched the
            // old follow to the new lead.
            state.lead !== prevState.follow && (prevState.lead !== state.lead || prevState.leadIsExiting !== state.leadIsExiting)) needsCrossfadeAnimation = true;
        },
        animate: function(child, shouldCrossfade) {
            var _a1;
            if (shouldCrossfade === void 0) shouldCrossfade = false;
            if (child === state.lead) {
                if (shouldCrossfade) /**
                     * Point a lead to itself in case it was previously pointing
                     * to a different visual element
                     */ child.pointTo(state.lead);
                else child.setVisibility(true);
                var config = {
                };
                var prevParent = (_a1 = state.follow) === null || _a1 === void 0 ? void 0 : _a1.getProjectionParent();
                if (prevParent) /**
                     * We'll use this to determine if the element or its layoutId has been reparented.
                     */ config.prevParent = prevParent;
                if (child.presence === Presence.Entering) config.originBox = getFollowViewportBox();
                else if (child.presence === Presence.Exiting) config.targetBox = getFollowLayout();
                if (needsCrossfadeAnimation) {
                    needsCrossfadeAnimation = false;
                    var transition = child.getDefaultTransition();
                    child.presence === Presence.Entering ? crossfader.toLead(transition) : crossfader.fromLead(transition);
                }
                child.notifyLayoutReady(config);
            } else if (shouldCrossfade) state.lead && child.pointTo(state.lead);
            else child.setVisibility(false);
        }
    };
}
function resetRotate(child) {
    // If there's no detected rotation values, we can early return without a forced render.
    var hasRotate = false;
    // Keep a record of all the values we've reset
    var resetValues = {
    };
    // Check the rotate value of all axes and reset to 0
    for(var i = 0; i < transformAxes.length; i++){
        var axis = transformAxes[i];
        var key = "rotate" + axis;
        // If this rotation doesn't exist as a motion value, then we don't
        // need to reset it
        if (!child.hasValue(key) || child.getStaticValue(key) === 0) continue;
        hasRotate = true;
        // Record the rotation and then temporarily set it to 0
        resetValues[key] = child.getStaticValue(key);
        child.setStaticValue(key, 0);
    }
    // If there's no rotation values, we don't need to do any more.
    if (!hasRotate) return;
    // Force a render of this element to apply the transform with all rotations
    // set to 0.
    child.syncRender();
    // Put back all the values we reset
    for(var key in resetValues)child.setStaticValue(key, resetValues[key]);
    // Schedule a render for the next frame. This ensures we won't visually
    // see the element with the reset rotate value applied.
    child.scheduleRender();
}
/**
 * @public
 */ var AnimateSharedLayout1 = function(_super) {
    tslib.__extends(AnimateSharedLayout2, _super);
    function AnimateSharedLayout2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A list of all the children in the shared layout
         */ _this.children = new Set();
        /**
         * As animate components with a defined `layoutId` are added/removed to the tree,
         * we store them in order. When one is added, it will animate out from the
         * previous one, and when it's removed, it'll animate to the previous one.
         */ _this.stacks = new Map();
        /**
         * Track whether the component has mounted. If it hasn't, the presence of added children
         * are set to Present, whereas if it has they're considered Entering
         */ _this.hasMounted = false;
        /**
         * Track whether we already have an update scheduled. If we don't, we'll run snapshots
         * and schedule one.
         */ _this.updateScheduled = false;
        /**
         * Tracks whether we already have a render scheduled. If we don't, we'll force one with this.forceRender
         */ _this.renderScheduled = false;
        /**
         * The methods provided to all children in the shared layout tree.
         */ _this.syncContext = tslib.__assign(tslib.__assign({
        }, createBatcher()), {
            syncUpdate: function(force) {
                return _this.scheduleUpdate(force);
            },
            forceUpdate: function() {
                // By copying syncContext to itself, when this component re-renders it'll also re-render
                // all children subscribed to the SharedLayout context.
                _this.syncContext = tslib.__assign({
                }, _this.syncContext);
                _this.scheduleUpdate(true);
            },
            register: function(child) {
                return _this.addChild(child);
            },
            remove: function(child) {
                return _this.removeChild(child);
            }
        });
        return _this;
    }
    AnimateSharedLayout2.prototype.componentDidMount = function() {
        this.hasMounted = true;
    };
    AnimateSharedLayout2.prototype.componentDidUpdate = function() {
        this.startLayoutAnimation();
    };
    AnimateSharedLayout2.prototype.shouldComponentUpdate = function() {
        this.renderScheduled = true;
        return true;
    };
    AnimateSharedLayout2.prototype.startLayoutAnimation = function() {
        var _this = this;
        /**
         * Reset update and render scheduled status
         */ this.renderScheduled = this.updateScheduled = false;
        var type = this.props.type;
        /**
         * Update presence metadata based on the latest AnimatePresence status.
         * This is a kind of goofy way of dealing with this, perhaps there's a better model to find.
         */ this.children.forEach(function(child) {
            if (!child.isPresent) child.presence = Presence.Exiting;
            else if (child.presence !== Presence.Entering) child.presence = child.presence === Presence.Exiting ? Presence.Entering : Presence.Present;
        });
        this.updateStacks();
        /**
         * Create a handler which we can use to flush the children animations
         */ var handler = {
            layoutReady: function(child) {
                if (child.getLayoutId() !== undefined) {
                    var stack = _this.getStack(child);
                    stack.animate(child, type === "crossfade");
                } else child.notifyLayoutReady();
            },
            parent: this.context.visualElement
        };
        /**
         * Shared layout animations can be used without the AnimateSharedLayout wrapping component.
         * This requires some co-ordination across components to stop layout thrashing
         * and ensure measurements are taken at the correct time.
         *
         * Here we use that same mechanism of schedule/flush.
         */ this.children.forEach(function(child) {
            return _this.syncContext.add(child);
        });
        this.syncContext.flush(handler);
        /**
         * Clear snapshots so subsequent rerenders don't retain memory of outgoing components
         */ this.stacks.forEach(function(stack) {
            return stack.clearSnapshot();
        });
    };
    AnimateSharedLayout2.prototype.updateStacks = function() {
        this.stacks.forEach(function(stack) {
            return stack.updateLeadAndFollow();
        });
    };
    AnimateSharedLayout2.prototype.scheduleUpdate = function(force) {
        if (force === void 0) force = false;
        if (!(force || !this.updateScheduled)) return;
        /**
         * Flag we've scheduled an update
         */ this.updateScheduled = true;
        /**
         * Write: Reset transforms so bounding boxes can be accurately measured.
         */ this.children.forEach(function(child) {
            resetRotate(child);
            if (child.shouldResetTransform()) child.resetTransform();
        });
        /**
         * Read: Snapshot children
         */ this.children.forEach(snapshotViewportBox);
        /**
         * Every child keeps a local snapshot, but we also want to record
         * snapshots of the visible children as, if they're are being removed
         * in this render, we can still access them.
         *
         * TODO: What would be better here is doing a single loop where we
         * only snapshotViewportBoxes of undefined layoutIds and then one for each stack
         */ this.stacks.forEach(function(stack) {
            return stack.updateSnapshot();
        });
        /**
         * Force a rerender by setting state if we aren't already going to render.
         */ if (force || !this.renderScheduled) {
            this.renderScheduled = true;
            this.forceUpdate();
        }
    };
    AnimateSharedLayout2.prototype.addChild = function(child) {
        this.children.add(child);
        this.addToStack(child);
        child.presence = this.hasMounted ? Presence.Entering : Presence.Present;
    };
    AnimateSharedLayout2.prototype.removeChild = function(child) {
        this.scheduleUpdate();
        this.children.delete(child);
        this.removeFromStack(child);
    };
    AnimateSharedLayout2.prototype.addToStack = function(child) {
        var stack = this.getStack(child);
        stack === null || stack === void 0 || stack.add(child);
    };
    AnimateSharedLayout2.prototype.removeFromStack = function(child) {
        var stack = this.getStack(child);
        stack === null || stack === void 0 || stack.remove(child);
    };
    /**
     * Return a stack of animate children based on the provided layoutId.
     * Will create a stack if none currently exists with that layoutId.
     */ AnimateSharedLayout2.prototype.getStack = function(child) {
        var id = child.getLayoutId();
        if (id === undefined) return;
        // Create stack if it doesn't already exist
        !this.stacks.has(id) && this.stacks.set(id, layoutStack());
        return this.stacks.get(id);
    };
    AnimateSharedLayout2.prototype.render = function() {
        return React__namespace.createElement(SharedLayoutContext.Provider, {
            value: this.syncContext
        }, this.props.children);
    };
    AnimateSharedLayout2.contextType = MotionContext;
    return AnimateSharedLayout2;
}(React__namespace.Component);
/**
 * `MotionConfig` is used to set configuration options for all children `motion` components.
 *
 * ```jsx
 * import { motion, MotionConfig } from "framer-motion"
 *
 * export function App() {
 *   return (
 *     <MotionConfig transition={{ type: "spring" }}>
 *       <motion.div animate={{ x: 100 }} />
 *     </MotionConfig>
 *   )
 * }
 * ```
 *
 * @public
 */ function MotionConfig(_a1) {
    var children = _a1.children, config = tslib.__rest(_a1, [
        "children"
    ]);
    /**
     * Inherit props from any parent MotionConfig components
     */ config = tslib.__assign(tslib.__assign({
    }, React.useContext(MotionConfigContext)), config);
    /**
     * Don't allow isStatic to change between renders as it affects how many hooks
     * motion components fire.
     */ config.isStatic = useConstant(function() {
        return config.isStatic;
    });
    /**
     * Creating a new config context object will re-render every `motion` component
     * every time it renders. So we only want to create a new one sparingly.
     */ var transitionDependency = typeof config.transition === "object" ? config.transition.toString() : "";
    var context = React.useMemo(function() {
        return config;
    }, [
        transitionDependency,
        config.transformPagePoint, 
    ]);
    return React__namespace.createElement(MotionConfigContext.Provider, {
        value: context
    }, children);
}
/**
 * Used in conjunction with the `m` component to reduce bundle size.
 *
 * `m` is a version of the `motion` component that only loads functionality
 * critical for the initial render.
 *
 * `LazyMotion` can then be used to either synchronously or asynchronously
 * load animation and gesture support.
 *
 * ```jsx
 * // Synchronous loading
 * import { LazyMotion, m, domAnimations } from "framer-motion"
 *
 * function App() {
 *   return (
 *     <LazyMotion features={domAnimations}>
 *       <m.div animate={{ scale: 2 }} />
 *     </LazyMotion>
 *   )
 * }
 *
 * // Asynchronous loading
 * import { LazyMotion, m } from "framer-motion"
 *
 * function App() {
 *   return (
 *     <LazyMotion features={() => import('./path/to/domAnimations')}>
 *       <m.div animate={{ scale: 2 }} />
 *     </LazyMotion>
 *   )
 * }
 * ```
 *
 * @public
 */ function LazyMotion(_a1) {
    var children = _a1.children, features = _a1.features, _b = _a1.strict, strict = _b === void 0 ? false : _b;
    var _c = tslib.__read(React.useState(!isLazyBundle(features)), 2), setIsLoaded = _c[1];
    var loadedRenderer = React.useRef(undefined);
    /**
     * If this is a synchronous load, load features immediately
     */ if (!isLazyBundle(features)) {
        var renderer = features.renderer, loadedFeatures = tslib.__rest(features, [
            "renderer"
        ]);
        loadedRenderer.current = renderer;
        loadFeatures(loadedFeatures);
    }
    React.useEffect(function() {
        if (isLazyBundle(features)) features().then(function(_a3) {
            var renderer = _a3.renderer, loadedFeatures = tslib.__rest(_a3, [
                "renderer"
            ]);
            loadFeatures(loadedFeatures);
            loadedRenderer.current = renderer;
            setIsLoaded(true);
        });
    }, []);
    return React__namespace.createElement(LazyContext.Provider, {
        value: {
            renderer: loadedRenderer.current,
            strict: strict
        }
    }, children);
}
function isLazyBundle(features) {
    return typeof features === "function";
}
/**
 * @public
 */ var domAnimation = tslib.__assign(tslib.__assign({
    renderer: createDomVisualElement
}, animations), gestureAnimations);
/**
 * @public
 */ var domMax = tslib.__assign(tslib.__assign(tslib.__assign({
}, domAnimation), drag), layoutAnimations);
/**
 * Creates a `MotionValue` to track the state and velocity of a value.
 *
 * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.
 *
 * @library
 *
 * ```jsx
 * export function MyComponent() {
 *   const scale = useMotionValue(1)
 *
 *   return <Frame scale={scale} />
 * }
 * ```
 *
 * @motion
 *
 * ```jsx
 * export const MyComponent = () => {
 *   const scale = useMotionValue(1)
 *
 *   return <motion.div style={{ scale }} />
 * }
 * ```
 *
 * @param initial - The initial state.
 *
 * @public
 */ function useMotionValue(initial) {
    var value = useConstant(function() {
        return motionValue(initial);
    });
    /**
     * If this motion value is being used in static mode, like on
     * the Framer canvas, force components to rerender when the motion
     * value is updated.
     */ var isStatic = React.useContext(MotionConfigContext).isStatic;
    if (isStatic) {
        var _a1 = tslib.__read(React.useState(initial), 2), setLatest_1 = _a1[1];
        React.useEffect(function() {
            return value.onChange(setLatest_1);
        }, []);
    }
    return value;
}
function useOnChange(value, callback) {
    React.useEffect(function() {
        if (isMotionValue(value)) return value.onChange(callback);
    }, [
        callback
    ]);
}
function useMultiOnChange(values, handler) {
    React.useEffect(function() {
        var subscriptions = values.map(function(value) {
            return value.onChange(handler);
        });
        return function() {
            return subscriptions.forEach(function(unsubscribe) {
                return unsubscribe();
            });
        };
    });
}
function useCombineMotionValues(values, combineValues) {
    /**
     * Initialise the returned motion value. This remains the same between renders.
     */ var value = useMotionValue(combineValues());
    /**
     * Create a function that will update the template motion value with the latest values.
     * This is pre-bound so whenever a motion value updates it can schedule its
     * execution in Framesync. If it's already been scheduled it won't be fired twice
     * in a single frame.
     */ var updateValue = function() {
        return value.set(combineValues());
    };
    /**
     * Synchronously update the motion value with the latest values during the render.
     * This ensures that within a React render, the styles applied to the DOM are up-to-date.
     */ updateValue();
    /**
     * Subscribe to all motion values found within the template. Whenever any of them change,
     * schedule an update.
     */ useMultiOnChange(values, function() {
        return sync__default['default'].update(updateValue, false, true);
    });
    return value;
}
/**
 * Combine multiple motion values into a new one using a string template literal.
 *
 * ```jsx
 * import {
 *   motion,
 *   useSpring,
 *   useMotionValue,
 *   useMotionTemplate
 * } from "framer-motion"
 *
 * function Component() {
 *   const shadowX = useSpring(0)
 *   const shadowY = useMotionValue(0)
 *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`
 *
 *   return <motion.div style={{ filter: shadow }} />
 * }
 * ```
 *
 * @public
 */ function useMotionTemplate(fragments) {
    var values = [];
    for(var _i = 1; _i < arguments.length; _i++)values[_i - 1] = arguments[_i];
    /**
     * Create a function that will build a string from the latest motion values.
     */ var numFragments = fragments.length;
    function buildValue() {
        var output = "";
        for(var i = 0; i < numFragments; i++){
            output += fragments[i];
            var value = values[i];
            if (value) output += values[i].get();
        }
        return output;
    }
    return useCombineMotionValues(values, buildValue);
}
var isCustomValueType = function(v) {
    return typeof v === "object" && v.mix;
};
var getMixer = function(v) {
    return isCustomValueType(v) ? v.mix : undefined;
};
function transform() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var useImmediate = !Array.isArray(args[0]);
    var argOffset = useImmediate ? 0 : -1;
    var inputValue = args[0 + argOffset];
    var inputRange = args[1 + argOffset];
    var outputRange = args[2 + argOffset];
    var options = args[3 + argOffset];
    var interpolator = popmotion.interpolate(inputRange, outputRange, tslib.__assign({
        mixer: getMixer(outputRange[0])
    }, options));
    return useImmediate ? interpolator(inputValue) : interpolator;
}
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
    var transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
    return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([
        input
    ], function(_a3) {
        var _b = tslib.__read(_a3, 1), latest = _b[0];
        return transformer(latest);
    });
}
function useListTransform(values, transformer) {
    var latest = useConstant(function() {
        return [];
    });
    return useCombineMotionValues(values, function() {
        latest.length = 0;
        var numValues = values.length;
        for(var i = 0; i < numValues; i++)latest[i] = values[i].get();
        return transformer(latest);
    });
}
/**
 * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.
 *
 * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber
 * to another `MotionValue`.
 *
 * @remarks
 *
 * ```jsx
 * const x = useSpring(0, { stiffness: 300 })
 * const y = useSpring(x, { damping: 10 })
 * ```
 *
 * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.
 * @param springConfig - Configuration options for the spring.
 * @returns `MotionValue`
 *
 * @public
 */ function useSpring(source, config) {
    if (config === void 0) config = {
    };
    var isStatic = React.useContext(MotionConfigContext).isStatic;
    var activeSpringAnimation = React.useRef(null);
    var value = useMotionValue(isMotionValue(source) ? source.get() : source);
    React.useMemo(function() {
        return value.attach(function(v, set) {
            /**
             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations
             * at that level, but this will work for now
             */ if (isStatic) return set(v);
            if (activeSpringAnimation.current) activeSpringAnimation.current.stop();
            activeSpringAnimation.current = popmotion.animate(tslib.__assign(tslib.__assign({
                from: value.get(),
                to: v,
                velocity: value.getVelocity()
            }, config), {
                onUpdate: set
            }));
            return value.get();
        });
    }, Object.values(config));
    useOnChange(source, function(v) {
        return value.set(parseFloat(v));
    });
    return value;
}
/**
 * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.
 *
 * ```javascript
 * const x = useMotionValue(0)
 * const xVelocity = useVelocity(x)
 * const xAcceleration = useVelocity(xVelocity)
 * ```
 *
 * @public
 */ function useVelocity(value) {
    var velocity = useMotionValue(value.getVelocity());
    React.useEffect(function() {
        return value.velocityUpdateSubscribers.add(function(newVelocity) {
            velocity.set(newVelocity);
        });
    }, [
        value
    ]);
    return velocity;
}
function createScrollMotionValues() {
    return {
        scrollX: motionValue(0),
        scrollY: motionValue(0),
        scrollXProgress: motionValue(0),
        scrollYProgress: motionValue(0)
    };
}
function setProgress(offset, maxOffset, value) {
    value.set(!offset || !maxOffset ? 0 : offset / maxOffset);
}
function createScrollUpdater(values, getOffsets) {
    var update = function() {
        var _a3 = getOffsets(), xOffset = _a3.xOffset, yOffset = _a3.yOffset, xMaxOffset = _a3.xMaxOffset, yMaxOffset = _a3.yMaxOffset;
        // Set absolute positions
        values.scrollX.set(xOffset);
        values.scrollY.set(yOffset);
        // Set 0-1 progress
        setProgress(xOffset, xMaxOffset, values.scrollXProgress);
        setProgress(yOffset, yMaxOffset, values.scrollYProgress);
    };
    update();
    return update;
}
var getElementScrollOffsets = function(element) {
    return function() {
        return {
            xOffset: element.scrollLeft,
            yOffset: element.scrollTop,
            xMaxOffset: element.scrollWidth - element.offsetWidth,
            yMaxOffset: element.scrollHeight - element.offsetHeight
        };
    };
};
/**
 * Returns MotionValues that update when the provided element scrolls:
 *
 * - `scrollX` — Horizontal scroll distance in pixels.
 * - `scrollY` — Vertical scroll distance in pixels.
 * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.
 * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.
 *
 * This element must be set to `overflow: scroll` on either or both axes to report scroll offset.
 *
 * @library
 *
 * ```jsx
 * import * as React from "react"
 * import {
 *   Frame,
 *   useElementScroll,
 *   useTransform
 * } from "framer"
 *
 * export function MyComponent() {
 *   const ref = React.useRef()
 *   const { scrollYProgress } = useElementScroll(ref)
 *
 *   return (
 *     <Frame ref={ref}>
 *       <Frame scaleX={scrollYProgress} />
 *     </Frame>
 *   )
 * }
 * ```
 *
 * @motion
 *
 * ```jsx
 * export const MyComponent = () => {
 *   const ref = useRef()
 *   const { scrollYProgress } = useElementScroll(ref)
 *
 *   return (
 *     <div ref={ref}>
 *       <motion.div style={{ scaleX: scrollYProgress }} />
 *     </div>
 *   )
 * }
 * ```
 *
 * @public
 */ function useElementScroll(ref) {
    var values = useConstant(createScrollMotionValues);
    useIsomorphicLayoutEffect(function() {
        var element = ref.current;
        heyListen.invariant(!!element, "ref provided to useScroll must be passed into a HTML element.");
        if (!element) return;
        var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));
        var scrollListener = addDomEvent(element, "scroll", updateScrollValues, {
            passive: true
        });
        var resizeListener = addDomEvent(element, "resize", updateScrollValues);
        return function() {
            scrollListener && scrollListener();
            resizeListener && resizeListener();
        };
    }, []);
    return values;
}
var viewportScrollValues;
function getViewportScrollOffsets() {
    return {
        xOffset: window.pageXOffset,
        yOffset: window.pageYOffset,
        xMaxOffset: document.body.clientWidth - window.innerWidth,
        yMaxOffset: document.body.clientHeight - window.innerHeight
    };
}
var hasListeners = false;
function addEventListeners() {
    hasListeners = true;
    if (typeof window === "undefined") return;
    var updateScrollValues = createScrollUpdater(viewportScrollValues, getViewportScrollOffsets);
    addDomEvent(window, "scroll", updateScrollValues, {
        passive: true
    });
    addDomEvent(window, "resize", updateScrollValues);
}
/**
 * Returns MotionValues that update when the viewport scrolls:
 *
 * - `scrollX` — Horizontal scroll distance in pixels.
 * - `scrollY` — Vertical scroll distance in pixels.
 * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.
 * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.
 *
 * **Warning:** Setting `body` or `html` to `height: 100%` or similar will break the `Progress`
 * values as this breaks the browser's capability to accurately measure the page length.
 *
 * @library
 *
 * ```jsx
 * import * as React from "react"
 * import {
 *   Frame,
 *   useViewportScroll,
 *   useTransform
 * } from "framer"
 *
 * export function MyComponent() {
 *   const { scrollYProgress } = useViewportScroll()
 *   return <Frame scaleX={scrollYProgress} />
 * }
 * ```
 *
 * @motion
 *
 * ```jsx
 * export const MyComponent = () => {
 *   const { scrollYProgress } = useViewportScroll()
 *   return <motion.div style={{ scaleX: scrollYProgress }} />
 * }
 * ```
 *
 * @public
 */ function useViewportScroll() {
    /**
     * Lazy-initialise the viewport scroll values
     */ if (!viewportScrollValues) viewportScrollValues = createScrollMotionValues();
    useIsomorphicLayoutEffect(function() {
        !hasListeners && addEventListeners();
    }, []);
    return viewportScrollValues;
}
// Does this device prefer reduced motion? Returns `null` server-side.
var prefersReducedMotion;
function initPrefersReducedMotion() {
    prefersReducedMotion = motionValue(null);
    if (typeof window === "undefined") return;
    if (window.matchMedia) {
        var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
        var setReducedMotionPreferences = function() {
            return prefersReducedMotion.set(motionMediaQuery_1.matches);
        };
        motionMediaQuery_1.addListener(setReducedMotionPreferences);
        setReducedMotionPreferences();
    } else prefersReducedMotion.set(false);
}
/**
 * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.
 *
 * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing
 * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.
 *
 * It will actively respond to changes and re-render your components with the latest setting.
 *
 * ```jsx
 * export function Sidebar({ isOpen }) {
 *   const shouldReduceMotion = useReducedMotion()
 *   const closedX = shouldReduceMotion ? 0 : "-100%"
 *
 *   return (
 *     <motion.div animate={{
 *       opacity: isOpen ? 1 : 0,
 *       x: isOpen ? 0 : closedX
 *     }} />
 *   )
 * }
 * ```
 *
 * @return boolean
 *
 * @public
 */ function useReducedMotion() {
    /**
     * Lazy initialisation of prefersReducedMotion
     */ !prefersReducedMotion && initPrefersReducedMotion();
    var _a3 = tslib.__read(React.useState(prefersReducedMotion.get()), 2), shouldReduceMotion = _a3[0], setShouldReduceMotion = _a3[1];
    useOnChange(prefersReducedMotion, setShouldReduceMotion);
    return shouldReduceMotion;
}
/**
 * @public
 */ function animationControls() {
    /**
     * Track whether the host component has mounted.
     */ var hasMounted = false;
    /**
     * Pending animations that are started before a component is mounted.
     * TODO: Remove this as animations should only run in effects
     */ var pendingAnimations = [];
    /**
     * A collection of linked component animation controls.
     */ var subscribers = new Set();
    var controls = {
        subscribe: function(visualElement1) {
            subscribers.add(visualElement1);
            return function() {
                return void subscribers.delete(visualElement1);
            };
        },
        start: function(definition, transitionOverride) {
            /**
             * TODO: We only perform this hasMounted check because in Framer we used to
             * encourage the ability to start an animation within the render phase. This
             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe
             * we can ditch this.
             */ if (hasMounted) {
                var animations_1 = [];
                subscribers.forEach(function(visualElement1) {
                    animations_1.push(animateVisualElement(visualElement1, definition, {
                        transitionOverride: transitionOverride
                    }));
                });
                return Promise.all(animations_1);
            } else return new Promise(function(resolve) {
                pendingAnimations.push({
                    animation: [
                        definition,
                        transitionOverride
                    ],
                    resolve: resolve
                });
            });
        },
        set: function(definition) {
            heyListen.invariant(hasMounted, "controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.");
            return subscribers.forEach(function(visualElement1) {
                setValues(visualElement1, definition);
            });
        },
        stop: function() {
            subscribers.forEach(function(visualElement1) {
                stopAnimation(visualElement1);
            });
        },
        mount: function() {
            hasMounted = true;
            pendingAnimations.forEach(function(_a3) {
                var animation = _a3.animation, resolve = _a3.resolve;
                controls.start.apply(controls, tslib.__spreadArray([], tslib.__read(animation))).then(resolve);
            });
            return function() {
                hasMounted = false;
                controls.stop();
            };
        }
    };
    return controls;
}
/**
 * Creates `AnimationControls`, which can be used to manually start, stop
 * and sequence animations on one or more components.
 *
 * The returned `AnimationControls` should be passed to the `animate` property
 * of the components you want to animate.
 *
 * These components can then be animated with the `start` method.
 *
 * @library
 *
 * ```jsx
 * import * as React from 'react'
 * import { Frame, useAnimation } from 'framer'
 *
 * export function MyComponent(props) {
 *    const controls = useAnimation()
 *
 *    controls.start({
 *        x: 100,
 *        transition: { duration: 0.5 },
 *    })
 *
 *    return <Frame animate={controls} />
 * }
 * ```
 *
 * @motion
 *
 * ```jsx
 * import * as React from 'react'
 * import { motion, useAnimation } from 'framer-motion'
 *
 * export function MyComponent(props) {
 *    const controls = useAnimation()
 *
 *    controls.start({
 *        x: 100,
 *        transition: { duration: 0.5 },
 *    })
 *
 *    return <motion.div animate={controls} />
 * }
 * ```
 *
 * @returns Animation controller with `start` and `stop` methods
 *
 * @public
 */ function useAnimation() {
    var controls = useConstant(animationControls);
    React.useEffect(controls.mount, []);
    return controls;
}
/**
 * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.
 *
 * @library
 *
 * ```jsx
 * import * as React from "react"
 * import { Frame, useCycle } from "framer"
 *
 * export function MyComponent() {
 *   const [x, cycleX] = useCycle(0, 50, 100)
 *
 *   return (
 *     <Frame
 *       animate={{ x: x }}
 *       onTap={() => cycleX()}
 *      />
 *    )
 * }
 * ```
 *
 * @motion
 *
 * An index value can be passed to the returned `cycle` function to cycle to a specific index.
 *
 * ```jsx
 * import * as React from "react"
 * import { motion, useCycle } from "framer-motion"
 *
 * export const MyComponent = () => {
 *   const [x, cycleX] = useCycle(0, 50, 100)
 *
 *   return (
 *     <motion.div
 *       animate={{ x: x }}
 *       onTap={() => cycleX()}
 *      />
 *    )
 * }
 * ```
 *
 * @param items - items to cycle through
 * @returns [currentState, cycleState]
 *
 * @public
 */ function useCycle() {
    var items = [];
    for(var _i = 0; _i < arguments.length; _i++)items[_i] = arguments[_i];
    var index = React.useRef(0);
    var _a3 = tslib.__read(React.useState(items[index.current]), 2), item = _a3[0], setItem = _a3[1];
    return [
        item,
        function(next) {
            index.current = typeof next !== "number" ? popmotion.wrap(0, items.length, index.current + 1) : next;
            setItem(items[index.current]);
        }, 
    ];
}
/**
 * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.
 *
 * @library
 *
 * ```jsx
 * const dragControls = useDragControls()
 *
 * function startDrag(event) {
 *   dragControls.start(event, { snapToCursor: true })
 * }
 *
 * return (
 *   <>
 *     <Frame onTapStart={startDrag} />
 *     <Frame drag="x" dragControls={dragControls} />
 *   </>
 * )
 * ```
 *
 * @motion
 *
 * ```jsx
 * const dragControls = useDragControls()
 *
 * function startDrag(event) {
 *   dragControls.start(event, { snapToCursor: true })
 * }
 *
 * return (
 *   <>
 *     <div onPointerDown={startDrag} />
 *     <motion.div drag="x" dragControls={dragControls} />
 *   </>
 * )
 * ```
 *
 * @public
 */ var DragControls = function() {
    function DragControls1() {
        this.componentControls = new Set();
    }
    /**
     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.
     *
     * @internal
     */ DragControls1.prototype.subscribe = function(controls) {
        var _this = this;
        this.componentControls.add(controls);
        return function() {
            return _this.componentControls.delete(controls);
        };
    };
    /**
     * Start a drag gesture on every `motion` component that has this set of drag controls
     * passed into it via the `dragControls` prop.
     *
     * ```jsx
     * dragControls.start(e, {
     *   snapToCursor: true
     * })
     * ```
     *
     * @param event - PointerEvent
     * @param options - Options
     *
     * @public
     */ DragControls1.prototype.start = function(event, options) {
        this.componentControls.forEach(function(controls) {
            controls.start(event.nativeEvent || event, options);
        });
    };
    DragControls1.prototype.updateConstraints = function(flush) {
        if (flush === void 0) flush = true;
        this.componentControls.forEach(function(controls) {
            controls.updateConstraints();
        });
        flush && flushLayout();
    };
    return DragControls1;
}();
var createDragControls = function() {
    return new DragControls();
};
/**
 * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop
 * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we
 * might want to initiate that dragging from a different component than the draggable one.
 *
 * By creating a `dragControls` using the `useDragControls` hook, we can pass this into
 * the draggable component's `dragControls` prop. It exposes a `start` method
 * that can start dragging from pointer events on other components.
 *
 * @library
 *
 * ```jsx
 * const dragControls = useDragControls()
 *
 * function startDrag(event) {
 *   dragControls.start(event, { snapToCursor: true })
 * }
 *
 * return (
 *   <>
 *     <Frame onTapStart={startDrag} />
 *     <Frame drag="x" dragControls={dragControls} />
 *   </>
 * )
 * ```
 *
 * @motion
 *
 * ```jsx
 * const dragControls = useDragControls()
 *
 * function startDrag(event) {
 *   dragControls.start(event, { snapToCursor: true })
 * }
 *
 * return (
 *   <>
 *     <div onPointerDown={startDrag} />
 *     <motion.div drag="x" dragControls={dragControls} />
 *   </>
 * )
 * ```
 *
 * @public
 */ function useDragControls() {
    return useConstant(createDragControls);
}
var createObject = function() {
    return {
    };
};
var stateVisualElement = visualElement({
    build: function() {
    },
    measureViewportBox: axisBox,
    resetTransform: function() {
    },
    restoreTransform: function() {
    },
    removeValueFromRenderState: function() {
    },
    render: function() {
    },
    scrapeMotionValuesFromProps: createObject,
    readValueFromInstance: function(_state, key, options) {
        return options.initialState[key] || 0;
    },
    makeTargetAnimatable: function(element, _a3) {
        var transition = _a3.transition, transitionEnd = _a3.transitionEnd, target = tslib.__rest(_a3, [
            "transition",
            "transitionEnd"
        ]);
        var origin = getOrigin(target, transition || {
        }, element);
        checkTargetForNewValues(element, target, origin);
        return tslib.__assign({
            transition: transition,
            transitionEnd: transitionEnd
        }, target);
    }
});
var useVisualState = makeUseVisualState({
    scrapeMotionValuesFromProps: createObject,
    createRenderState: createObject
});
/**
 * This is not an officially supported API and may be removed
 * on any version.
 * @internal
 */ function useAnimatedState(initialState) {
    var _a3 = tslib.__read(React.useState(initialState), 2), animationState = _a3[0], setAnimationState = _a3[1];
    var visualState = useVisualState({
    }, false);
    var element = useConstant(function() {
        return stateVisualElement({
            props: {
            },
            visualState: visualState
        }, {
            initialState: initialState
        });
    });
    React.useEffect(function() {
        element.mount({
        });
        return element.unmount();
    }, []);
    React.useEffect(function() {
        element.setProps({
            onUpdate: function(v) {
                return setAnimationState(tslib.__assign({
                }, v));
            }
        });
    });
    var startAnimation1 = useConstant(function() {
        return function(animationDefinition) {
            return animateVisualElement(element, animationDefinition);
        };
    });
    return [
        animationState,
        startAnimation1
    ];
}
// Keep things reasonable and avoid scale: Infinity. In practise we might need
// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]
// to simply hide content at unreasonable scales.
var maxScale = 100000;
var invertScale = function(scale) {
    return scale > 0.001 ? 1 / scale : maxScale;
};
var hasWarned = false;
/**
 * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse
 * of their respective parent scales.
 *
 * This is useful for undoing the distortion of content when scaling a parent component.
 *
 * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.
 * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output
 * of those instead.
 *
 * @motion
 *
 * ```jsx
 * const MyComponent = () => {
 *   const { scaleX, scaleY } = useInvertedScale()
 *   return <motion.div style={{ scaleX, scaleY }} />
 * }
 * ```
 *
 * @library
 *
 * ```jsx
 * function MyComponent() {
 *   const { scaleX, scaleY } = useInvertedScale()
 *   return <Frame scaleX={scaleX} scaleY={scaleY} />
 * }
 * ```
 *
 * @deprecated
 * @internal
 */ function useInvertedScale(scale) {
    var parentScaleX = useMotionValue(1);
    var parentScaleY = useMotionValue(1);
    var visualElement1 = useVisualElementContext();
    heyListen.invariant(!!(scale || visualElement1), "If no scale values are provided, useInvertedScale must be used within a child of another motion component.");
    heyListen.warning(hasWarned, "useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.");
    hasWarned = true;
    if (scale) {
        parentScaleX = scale.scaleX || parentScaleX;
        parentScaleY = scale.scaleY || parentScaleY;
    } else if (visualElement1) {
        parentScaleX = visualElement1.getValue("scaleX", 1);
        parentScaleY = visualElement1.getValue("scaleY", 1);
    }
    var scaleX = useTransform(parentScaleX, invertScale);
    var scaleY = useTransform(parentScaleY, invertScale);
    return {
        scaleX: scaleX,
        scaleY: scaleY
    };
}
exports.AnimatePresence = AnimatePresence;
exports.AnimateSharedLayout = AnimateSharedLayout1;
exports.DragControls = DragControls;
exports.FlatTree = FlatTree;
exports.FramerTreeLayoutContext = FramerTreeLayoutContext;
exports.LayoutGroupContext = LayoutGroupContext;
exports.LazyMotion = LazyMotion;
exports.MotionConfig = MotionConfig;
exports.MotionConfigContext = MotionConfigContext;
exports.MotionValue = MotionValue;
exports.PresenceContext = PresenceContext;
exports.SharedLayoutContext = SharedLayoutContext;
exports.addScaleCorrection = addScaleCorrection;
exports.animate = animate;
exports.animateVisualElement = animateVisualElement;
exports.animationControls = animationControls;
exports.batchLayout = batchLayout;
exports.createBatcher = createBatcher;
exports.createCrossfader = createCrossfader;
exports.createDomMotionComponent = createDomMotionComponent;
exports.createMotionComponent = createMotionComponent;
exports.domAnimation = domAnimation;
exports.domMax = domMax;
exports.flushLayout = flushLayout;
exports.isValidMotionProp = isValidMotionProp;
exports.m = m;
exports.motion = motion;
exports.motionValue = motionValue;
exports.resolveMotionValue = resolveMotionValue;
exports.snapshotViewportBox = snapshotViewportBox;
exports.transform = transform;
exports.useAnimation = useAnimation;
exports.useCycle = useCycle;
exports.useDeprecatedAnimatedState = useAnimatedState;
exports.useDeprecatedInvertedScale = useInvertedScale;
exports.useDomEvent = useDomEvent;
exports.useDragControls = useDragControls;
exports.useElementScroll = useElementScroll;
exports.useIsPresent = useIsPresent;
exports.useMotionTemplate = useMotionTemplate;
exports.useMotionValue = useMotionValue;
exports.usePresence = usePresence;
exports.useReducedMotion = useReducedMotion;
exports.useSpring = useSpring;
exports.useTransform = useTransform;
exports.useVelocity = useVelocity;
exports.useViewportScroll = useViewportScroll;
exports.visualElement = visualElement;

},{"tslib":"4rd38","react":"3f97z","hey-listen":"6CxDv","style-value-types":"627uD","popmotion":"3z7zl","framesync":"5fyvk","@emotion/is-prop-valid":"4SkYr"}],"4rd38":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __exportStar = function(m, o) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    /** @deprecated */ __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    /** @deprecated */ __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __spreadArray = function(to, from) {
        for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
        return to;
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", {
            enumerable: true,
            value: v
        });
    } : function(o, v) {
        o["default"] = v;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"6CxDv":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.warning = function() {
};
exports.invariant = function() {
};
exports.warning = function(check, message) {
    if (!check && typeof console !== 'undefined') console.warn(message);
};
exports.invariant = function(check, message) {
    if (!check) throw new Error(message);
};

},{}],"627uD":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var clamp = function(min, max) {
    return function(v) {
        return Math.max(Math.min(v, max), min);
    };
};
var sanitize = function(v) {
    return v % 1 ? Number(v.toFixed(5)) : v;
};
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function isString(v) {
    return typeof v === 'string';
}
var number = {
    test: function(v) {
        return typeof v === 'number';
    },
    parse: parseFloat,
    transform: function(v) {
        return v;
    }
};
var alpha = tslib.__assign(tslib.__assign({
}, number), {
    transform: clamp(0, 1)
});
var scale = tslib.__assign(tslib.__assign({
}, number), {
    default: 1
});
var createUnitType = function(unit) {
    return {
        test: function(v) {
            return isString(v) && v.endsWith(unit) && v.split(' ').length === 1;
        },
        parse: parseFloat,
        transform: function(v) {
            return "" + v + unit;
        }
    };
};
var degrees = createUnitType('deg');
var percent = createUnitType('%');
var px = createUnitType('px');
var vh = createUnitType('vh');
var vw = createUnitType('vw');
var progressPercentage = tslib.__assign(tslib.__assign({
}, percent), {
    parse: function(v) {
        return percent.parse(v) / 100;
    },
    transform: function(v) {
        return percent.transform(v * 100);
    }
});
var isColorString = function(type, testProp) {
    return function(v) {
        return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
    };
};
var splitColor = function(aName, bName, cName) {
    return function(v) {
        var _a;
        if (!isString(v)) return v;
        var _b = v.match(floatRegex), a = _b[0], b = _b[1], c = _b[2], alpha1 = _b[3];
        return _a = {
        }, _a[aName] = parseFloat(a), _a[bName] = parseFloat(b), _a[cName] = parseFloat(c), _a.alpha = alpha1 !== undefined ? parseFloat(alpha1) : 1, _a;
    };
};
var hsla = {
    test: isColorString('hsl', 'hue'),
    parse: splitColor('hue', 'saturation', 'lightness'),
    transform: function(_a) {
        var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return 'hsla(' + Math.round(hue) + ', ' + percent.transform(sanitize(saturation)) + ', ' + percent.transform(sanitize(lightness)) + ', ' + sanitize(alpha.transform(alpha$1)) + ')';
    }
};
var clampRgbUnit = clamp(0, 255);
var rgbUnit = tslib.__assign(tslib.__assign({
}, number), {
    transform: function(v) {
        return Math.round(clampRgbUnit(v));
    }
});
var rgba = {
    test: isColorString('rgb', 'red'),
    parse: splitColor('red', 'green', 'blue'),
    transform: function(_a) {
        var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
        return 'rgba(' + rgbUnit.transform(red) + ', ' + rgbUnit.transform(green) + ', ' + rgbUnit.transform(blue) + ', ' + sanitize(alpha.transform(alpha$1)) + ')';
    }
};
function parseHex(v) {
    var r = '';
    var g = '';
    var b = '';
    var a = '';
    if (v.length > 5) {
        r = v.substr(1, 2);
        g = v.substr(3, 2);
        b = v.substr(5, 2);
        a = v.substr(7, 2);
    } else {
        r = v.substr(1, 1);
        g = v.substr(2, 1);
        b = v.substr(3, 1);
        a = v.substr(4, 1);
        r += r;
        g += g;
        b += b;
        a += a;
    }
    return {
        red: parseInt(r, 16),
        green: parseInt(g, 16),
        blue: parseInt(b, 16),
        alpha: a ? parseInt(a, 16) / 255 : 1
    };
}
var hex = {
    test: isColorString('#'),
    parse: parseHex,
    transform: rgba.transform
};
var color = {
    test: function(v) {
        return rgba.test(v) || hex.test(v) || hsla.test(v);
    },
    parse: function(v) {
        if (rgba.test(v)) return rgba.parse(v);
        else if (hsla.test(v)) return hsla.parse(v);
        else return hex.parse(v);
    },
    transform: function(v) {
        return isString(v) ? v : v.hasOwnProperty('red') ? rgba.transform(v) : hsla.transform(v);
    }
};
var colorToken = '${c}';
var numberToken = '${n}';
function test(v) {
    var _a, _b, _c, _d;
    return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}
function analyse(v) {
    var values = [];
    var numColors = 0;
    var colors = v.match(colorRegex);
    if (colors) {
        numColors = colors.length;
        v = v.replace(colorRegex, colorToken);
        values.push.apply(values, colors.map(color.parse));
    }
    var numbers = v.match(floatRegex);
    if (numbers) {
        v = v.replace(floatRegex, numberToken);
        values.push.apply(values, numbers.map(number.parse));
    }
    return {
        values: values,
        numColors: numColors,
        tokenised: v
    };
}
function parse(v) {
    return analyse(v).values;
}
function createTransformer(v) {
    var _a = analyse(v), values = _a.values, numColors = _a.numColors, tokenised = _a.tokenised;
    var numValues = values.length;
    return function(v1) {
        var output = tokenised;
        for(var i = 0; i < numValues; i++)output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v1[i]) : sanitize(v1[i]));
        return output;
    };
}
var convertNumbersToZero = function(v) {
    return typeof v === 'number' ? 0 : v;
};
function getAnimatableNone(v) {
    var parsed = parse(v);
    var transformer = createTransformer(v);
    return transformer(parsed.map(convertNumbersToZero));
}
var complex = {
    test: test,
    parse: parse,
    createTransformer: createTransformer,
    getAnimatableNone: getAnimatableNone
};
var maxDefaults = new Set([
    'brightness',
    'contrast',
    'saturate',
    'opacity'
]);
function applyDefaultFilter(v) {
    var _a = v.slice(0, -1).split('('), name = _a[0], value = _a[1];
    if (name === 'drop-shadow') return v;
    var number1 = (value.match(floatRegex) || [])[0];
    if (!number1) return v;
    var unit = value.replace(number1, '');
    var defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number1 !== value) defaultValue *= 100;
    return name + '(' + defaultValue + unit + ')';
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter = tslib.__assign(tslib.__assign({
}, complex), {
    getAnimatableNone: function(v) {
        var functions = v.match(functionRegex);
        return functions ? functions.map(applyDefaultFilter).join(' ') : v;
    }
});
exports.alpha = alpha;
exports.color = color;
exports.complex = complex;
exports.degrees = degrees;
exports.filter = filter;
exports.hex = hex;
exports.hsla = hsla;
exports.number = number;
exports.percent = percent;
exports.progressPercentage = progressPercentage;
exports.px = px;
exports.rgbUnit = rgbUnit;
exports.rgba = rgba;
exports.scale = scale;
exports.vh = vh;
exports.vw = vw;

},{"tslib":"4rd38"}],"3z7zl":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var tslib = require('tslib');
var heyListen = require('hey-listen');
var styleValueTypes = require('style-value-types');
var sync = require('framesync');
function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
        'default': e
    };
}
var sync__default = /*#__PURE__*/ _interopDefaultLegacy(sync);
var clamp = function(min, max, v) {
    return Math.min(Math.max(v, min), max);
};
var safeMin = 0.001;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring(_a) {
    var _b = _a.duration, duration = _b === void 0 ? 800 : _b, _c = _a.bounce, bounce = _c === void 0 ? 0.25 : _c, _d = _a.velocity, velocity = _d === void 0 ? 0 : _d, _e = _a.mass, mass = _e === void 0 ? 1 : _e;
    var envelope;
    var derivative;
    heyListen.warning(duration <= maxDuration * 1000, "Spring duration must be 10 seconds or less");
    var dampingRatio = 1 - bounce;
    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
    duration = clamp(minDuration, maxDuration, duration / 1000);
    if (dampingRatio < 1) {
        envelope = function(undampedFreq) {
            var exponentialDecay = undampedFreq * dampingRatio;
            var delta = exponentialDecay * duration;
            var a = exponentialDecay - velocity;
            var b = calcAngularFreq(undampedFreq, dampingRatio);
            var c = Math.exp(-delta);
            return safeMin - a / b * c;
        };
        derivative = function(undampedFreq) {
            var exponentialDecay = undampedFreq * dampingRatio;
            var delta = exponentialDecay * duration;
            var d = delta * velocity + velocity;
            var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
            var f = Math.exp(-delta);
            var g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
            var factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
            return factor * ((d - e) * f) / g;
        };
    } else {
        envelope = function(undampedFreq) {
            var a = Math.exp(-undampedFreq * duration);
            var b = (undampedFreq - velocity) * duration + 1;
            return -safeMin + a * b;
        };
        derivative = function(undampedFreq) {
            var a = Math.exp(-undampedFreq * duration);
            var b = (velocity - undampedFreq) * (duration * duration);
            return a * b;
        };
    }
    var initialGuess = 5 / duration;
    var undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = duration * 1000;
    if (isNaN(undampedFreq)) return {
        stiffness: 100,
        damping: 10,
        duration: duration
    };
    else {
        var stiffness = Math.pow(undampedFreq, 2) * mass;
        return {
            stiffness: stiffness,
            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
            duration: duration
        };
    }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
    var result = initialGuess;
    for(var i = 1; i < rootIterations; i++)result = result - envelope(result) / derivative(result);
    return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}
var durationKeys = [
    "duration",
    "bounce"
];
var physicsKeys = [
    "stiffness",
    "damping",
    "mass"
];
function isSpringType(options, keys) {
    return keys.some(function(key) {
        return options[key] !== undefined;
    });
}
function getSpringOptions(options) {
    var springOptions = tslib.__assign({
        velocity: 0,
        stiffness: 100,
        damping: 10,
        mass: 1,
        isResolvedFromDuration: false
    }, options);
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
        var derived = findSpring(options);
        springOptions = tslib.__assign(tslib.__assign(tslib.__assign({
        }, springOptions), derived), {
            velocity: 0,
            mass: 1
        });
        springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
}
function spring(_a) {
    var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.to, to = _c === void 0 ? 1 : _c, _d = _a.restSpeed, restSpeed = _d === void 0 ? 2 : _d, restDelta = _a.restDelta, options = tslib.__rest(_a, [
        "from",
        "to",
        "restSpeed",
        "restDelta"
    ]);
    var state = {
        done: false,
        value: from
    };
    var _e = getSpringOptions(options), stiffness = _e.stiffness, damping = _e.damping, mass = _e.mass, velocity = _e.velocity, duration = _e.duration, isResolvedFromDuration = _e.isResolvedFromDuration;
    var resolveSpring = zero;
    var resolveVelocity = zero;
    function createSpring() {
        var initialVelocity = velocity ? -(velocity / 1000) : 0;
        var initialDelta = to - from;
        var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
        var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;
        restDelta !== null && restDelta !== void 0 || (restDelta = Math.abs(to - from) <= 1 ? 0.01 : 0.4);
        if (dampingRatio < 1) {
            var angularFreq_1 = calcAngularFreq(undampedAngularFreq, dampingRatio);
            resolveSpring = function(t) {
                var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
                return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 * Math.sin(angularFreq_1 * t) + initialDelta * Math.cos(angularFreq_1 * t));
            };
            resolveVelocity = function(t) {
                var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
                return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 + initialDelta * Math.cos(angularFreq_1 * t)) - envelope * (Math.cos(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq_1 * initialDelta * Math.sin(angularFreq_1 * t));
            };
        } else if (dampingRatio === 1) resolveSpring = function(t) {
            return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
        };
        else {
            var dampedAngularFreq_1 = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
            resolveSpring = function(t) {
                var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
                var freqForT = Math.min(dampedAngularFreq_1 * t, 300);
                return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq_1 * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq_1;
            };
        }
    }
    createSpring();
    return {
        next: function(t) {
            var current = resolveSpring(t);
            if (!isResolvedFromDuration) {
                var currentVelocity = resolveVelocity(t) * 1000;
                var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
                var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
                state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
            } else state.done = t >= duration;
            state.value = state.done ? to : current;
            return state;
        },
        flipTarget: function() {
            var _a1;
            velocity = -velocity;
            _a1 = [
                to,
                from
            ], from = _a1[0], to = _a1[1];
            createSpring();
        }
    };
}
spring.needsInterpolation = function(a, b) {
    return typeof a === "string" || typeof b === "string";
};
var zero = function(_t) {
    return 0;
};
var progress = function(from, to, value) {
    var toFromDifference = to - from;
    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};
var mix = function(from, to, progress1) {
    return -progress1 * from + progress1 * to + from;
};
var mixLinearColor = function(from, to, v) {
    var fromExpo = from * from;
    var toExpo = to * to;
    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes = [
    styleValueTypes.hex,
    styleValueTypes.rgba,
    styleValueTypes.hsla
];
var getColorType = function(v) {
    return colorTypes.find(function(type) {
        return type.test(v);
    });
};
var notAnimatable = function(color) {
    return "'" + color + "' is not an animatable color. Use the equivalent color code instead.";
};
var mixColor = function(from, to) {
    var fromColorType = getColorType(from);
    var toColorType = getColorType(to);
    heyListen.invariant(!!fromColorType, notAnimatable(from));
    heyListen.invariant(!!toColorType, notAnimatable(to));
    heyListen.invariant(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
    var fromColor = fromColorType.parse(from);
    var toColor = toColorType.parse(to);
    var blended = tslib.__assign({
    }, fromColor);
    var mixFunc = fromColorType === styleValueTypes.hsla ? mix : mixLinearColor;
    return function(v) {
        for(var key in blended)if (key !== "alpha") blended[key] = mixFunc(fromColor[key], toColor[key], v);
        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
        return fromColorType.transform(blended);
    };
};
var zeroPoint = {
    x: 0,
    y: 0,
    z: 0
};
var isNum = function(v) {
    return typeof v === 'number';
};
var combineFunctions = function(a, b) {
    return function(v) {
        return b(a(v));
    };
};
var pipe = function() {
    var transformers = [];
    for(var _i = 0; _i < arguments.length; _i++)transformers[_i] = arguments[_i];
    return transformers.reduce(combineFunctions);
};
function getMixer(origin, target) {
    if (isNum(origin)) return function(v) {
        return mix(origin, target, v);
    };
    else if (styleValueTypes.color.test(origin)) return mixColor(origin, target);
    else return mixComplex(origin, target);
}
var mixArray = function(from, to) {
    var output = tslib.__spreadArray([], from);
    var numValues = output.length;
    var blendValue = from.map(function(fromThis, i) {
        return getMixer(fromThis, to[i]);
    });
    return function(v) {
        for(var i = 0; i < numValues; i++)output[i] = blendValue[i](v);
        return output;
    };
};
var mixObject = function(origin, target) {
    var output = tslib.__assign(tslib.__assign({
    }, origin), target);
    var blendValue = {
    };
    for(var key in output)if (origin[key] !== undefined && target[key] !== undefined) blendValue[key] = getMixer(origin[key], target[key]);
    return function(v) {
        for(var key1 in blendValue)output[key1] = blendValue[key1](v);
        return output;
    };
};
function analyse(value) {
    var parsed = styleValueTypes.complex.parse(value);
    var numValues = parsed.length;
    var numNumbers = 0;
    var numRGB = 0;
    var numHSL = 0;
    for(var i = 0; i < numValues; i++){
        if (numNumbers || typeof parsed[i] === "number") numNumbers++;
        else if (parsed[i].hue !== undefined) numHSL++;
        else numRGB++;
    }
    return {
        parsed: parsed,
        numNumbers: numNumbers,
        numRGB: numRGB,
        numHSL: numHSL
    };
}
var mixComplex = function(origin, target) {
    var template = styleValueTypes.complex.createTransformer(target);
    var originStats = analyse(origin);
    var targetStats = analyse(target);
    heyListen.invariant(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
};
var mixNumber = function(from, to) {
    return function(p) {
        return mix(from, to, p);
    };
};
function detectMixerFactory(v) {
    if (typeof v === 'number') return mixNumber;
    else if (typeof v === 'string') {
        if (styleValueTypes.color.test(v)) return mixColor;
        else return mixComplex;
    } else if (Array.isArray(v)) return mixArray;
    else if (typeof v === 'object') return mixObject;
}
function createMixers(output, ease, customMixer) {
    var mixers = [];
    var mixerFactory = customMixer || detectMixerFactory(output[0]);
    var numMixers = output.length - 1;
    for(var i = 0; i < numMixers; i++){
        var mixer = mixerFactory(output[i], output[i + 1]);
        if (ease) {
            var easingFunction = Array.isArray(ease) ? ease[i] : ease;
            mixer = pipe(easingFunction, mixer);
        }
        mixers.push(mixer);
    }
    return mixers;
}
function fastInterpolate(_a, _b) {
    var from = _a[0], to = _a[1];
    var mixer = _b[0];
    return function(v) {
        return mixer(progress(from, to, v));
    };
}
function slowInterpolate(input, mixers) {
    var inputLength = input.length;
    var lastInputIndex = inputLength - 1;
    return function(v) {
        var mixerIndex = 0;
        var foundMixerIndex = false;
        if (v <= input[0]) foundMixerIndex = true;
        else if (v >= input[lastInputIndex]) {
            mixerIndex = lastInputIndex - 1;
            foundMixerIndex = true;
        }
        if (!foundMixerIndex) {
            var i = 1;
            for(; i < inputLength; i++){
                if (input[i] > v || i === lastInputIndex) break;
            }
            mixerIndex = i - 1;
        }
        var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
        return mixers[mixerIndex](progressInRange);
    };
}
function interpolate(input, output, _a) {
    var _b = _a === void 0 ? {
    } : _a, _c = _b.clamp, isClamp = _c === void 0 ? true : _c, ease = _b.ease, mixer = _b.mixer;
    var inputLength = input.length;
    heyListen.invariant(inputLength === output.length, 'Both input and output ranges must be the same length');
    heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');
    if (input[0] > input[inputLength - 1]) {
        input = [].concat(input);
        output = [].concat(output);
        input.reverse();
        output.reverse();
    }
    var mixers = createMixers(output, ease, mixer);
    var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
    return isClamp ? function(v) {
        return interpolator(clamp(input[0], input[inputLength - 1], v));
    } : interpolator;
}
var reverseEasing = function(easing) {
    return function(p) {
        return 1 - easing(1 - p);
    };
};
var mirrorEasing = function(easing) {
    return function(p) {
        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
    };
};
var createExpoIn = function(power) {
    return function(p) {
        return Math.pow(p, power);
    };
};
var createBackIn = function(power) {
    return function(p) {
        return p * p * ((power + 1) * p - power);
    };
};
var createAnticipate = function(power) {
    var backEasing = createBackIn(power);
    return function(p) {
        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
    };
};
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var BOUNCE_FIRST_THRESHOLD = 4 / 11;
var BOUNCE_SECOND_THRESHOLD = 8 / 11;
var BOUNCE_THIRD_THRESHOLD = 0.9;
var linear = function(p) {
    return p;
};
var easeIn = createExpoIn(2);
var easeOut = reverseEasing(easeIn);
var easeInOut = mirrorEasing(easeIn);
var circIn = function(p) {
    return 1 - Math.sin(Math.acos(p));
};
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circOut);
var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut = reverseEasing(backIn);
var backInOut = mirrorEasing(backIn);
var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
var ca = 4356 / 361;
var cb = 35442 / 1805;
var cc = 16061 / 1805;
var bounceOut = function(p) {
    if (p === 1 || p === 0) return p;
    var p2 = p * p;
    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};
var bounceIn = reverseEasing(bounceOut);
var bounceInOut = function(p) {
    return p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
};
function defaultEasing(values, easing) {
    return values.map(function() {
        return easing || easeInOut;
    }).splice(0, values.length - 1);
}
function defaultOffset(values) {
    var numValues = values.length;
    return values.map(function(_value, i) {
        return i !== 0 ? i / (numValues - 1) : 0;
    });
}
function convertOffsetToTimes(offset, duration) {
    return offset.map(function(o) {
        return o * duration;
    });
}
function keyframes(_a) {
    var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.to, to = _c === void 0 ? 1 : _c, ease = _a.ease, offset = _a.offset, _d = _a.duration, duration = _d === void 0 ? 300 : _d;
    var state = {
        done: false,
        value: from
    };
    var values = Array.isArray(to) ? to : [
        from,
        to
    ];
    var times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);
    function createInterpolator() {
        return interpolate(times, values, {
            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
        });
    }
    var interpolator = createInterpolator();
    return {
        next: function(t) {
            state.value = interpolator(t);
            state.done = t >= duration;
            return state;
        },
        flipTarget: function() {
            values.reverse();
            interpolator = createInterpolator();
        }
    };
}
function decay(_a) {
    var _b = _a.velocity, velocity = _b === void 0 ? 0 : _b, _c = _a.from, from = _c === void 0 ? 0 : _c, _d = _a.power, power = _d === void 0 ? 0.8 : _d, _e = _a.timeConstant, timeConstant = _e === void 0 ? 350 : _e, _f = _a.restDelta, restDelta = _f === void 0 ? 0.5 : _f, modifyTarget = _a.modifyTarget;
    var state = {
        done: false,
        value: from
    };
    var amplitude = power * velocity;
    var ideal = from + amplitude;
    var target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
    if (target !== ideal) amplitude = target - from;
    return {
        next: function(t) {
            var delta = -amplitude * Math.exp(-t / timeConstant);
            state.done = !(delta > restDelta || delta < -restDelta);
            state.value = state.done ? target : target + delta;
            return state;
        },
        flipTarget: function() {
        }
    };
}
var types = {
    keyframes: keyframes,
    spring: spring,
    decay: decay
};
function detectAnimationFromOptions(config) {
    if (Array.isArray(config.to)) return keyframes;
    else if (types[config.type]) return types[config.type];
    var keys = new Set(Object.keys(config));
    if (keys.has("ease") || keys.has("duration") && !keys.has("dampingRatio")) return keyframes;
    else if (keys.has("dampingRatio") || keys.has("stiffness") || keys.has("mass") || keys.has("damping") || keys.has("restSpeed") || keys.has("restDelta")) return spring;
    return keyframes;
}
function loopElapsed(elapsed, duration, delay) {
    if (delay === void 0) delay = 0;
    return elapsed - duration - delay;
}
function reverseElapsed(elapsed, duration, delay, isForwardPlayback) {
    if (delay === void 0) delay = 0;
    if (isForwardPlayback === void 0) isForwardPlayback = true;
    return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
}
function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
}
var framesync = function(update) {
    var passTimestamp = function(_a) {
        var delta = _a.delta;
        return update(delta);
    };
    return {
        start: function() {
            return sync__default['default'].update(passTimestamp, true);
        },
        stop: function() {
            return sync.cancelSync.update(passTimestamp);
        }
    };
};
function animate(_a) {
    var _b, _c;
    var from = _a.from, _d = _a.autoplay, autoplay = _d === void 0 ? true : _d, _e = _a.driver, driver = _e === void 0 ? framesync : _e, _f = _a.elapsed, elapsed = _f === void 0 ? 0 : _f, _g = _a.repeat, repeatMax = _g === void 0 ? 0 : _g, _h = _a.repeatType, repeatType = _h === void 0 ? "loop" : _h, _j = _a.repeatDelay, repeatDelay = _j === void 0 ? 0 : _j, onPlay = _a.onPlay, onStop = _a.onStop, onComplete = _a.onComplete, onRepeat = _a.onRepeat, onUpdate = _a.onUpdate, options = tslib.__rest(_a, [
        "from",
        "autoplay",
        "driver",
        "elapsed",
        "repeat",
        "repeatType",
        "repeatDelay",
        "onPlay",
        "onStop",
        "onComplete",
        "onRepeat",
        "onUpdate"
    ]);
    var to = options.to;
    var driverControls;
    var repeatCount = 0;
    var computedDuration = options.duration;
    var latest;
    var isComplete = false;
    var isForwardPlayback = true;
    var interpolateFromNumber;
    var animator = detectAnimationFromOptions(options);
    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
        interpolateFromNumber = interpolate([
            0,
            100
        ], [
            from,
            to
        ], {
            clamp: false
        });
        from = 0;
        to = 100;
    }
    var animation = animator(tslib.__assign(tslib.__assign({
    }, options), {
        from: from,
        to: to
    }));
    function repeat() {
        repeatCount++;
        if (repeatType === "reverse") {
            isForwardPlayback = repeatCount % 2 === 0;
            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
        } else {
            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
            if (repeatType === "mirror") animation.flipTarget();
        }
        isComplete = false;
        onRepeat && onRepeat();
    }
    function complete() {
        driverControls.stop();
        onComplete && onComplete();
    }
    function update(delta) {
        if (!isForwardPlayback) delta = -delta;
        elapsed += delta;
        if (!isComplete) {
            var state = animation.next(Math.max(0, elapsed));
            latest = state.value;
            if (interpolateFromNumber) latest = interpolateFromNumber(latest);
            isComplete = isForwardPlayback ? state.done : elapsed <= 0;
        }
        onUpdate === null || onUpdate === void 0 || onUpdate(latest);
        if (isComplete) {
            if (repeatCount === 0) computedDuration !== null && computedDuration !== void 0 || (computedDuration = elapsed);
            if (repeatCount < repeatMax) hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
            else complete();
        }
    }
    function play() {
        onPlay === null || onPlay === void 0 || onPlay();
        driverControls = driver(update);
        driverControls.start();
    }
    autoplay && play();
    return {
        stop: function() {
            onStop === null || onStop === void 0 || onStop();
            driverControls.stop();
        }
    };
}
function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1000 / frameDuration) : 0;
}
function inertia(_a) {
    var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.velocity, velocity = _c === void 0 ? 0 : _c, min = _a.min, max = _a.max, _d = _a.power, power = _d === void 0 ? 0.8 : _d, _e = _a.timeConstant, timeConstant = _e === void 0 ? 750 : _e, _f = _a.bounceStiffness, bounceStiffness = _f === void 0 ? 500 : _f, _g = _a.bounceDamping, bounceDamping = _g === void 0 ? 10 : _g, _h = _a.restDelta, restDelta = _h === void 0 ? 1 : _h, modifyTarget = _a.modifyTarget, driver = _a.driver, onUpdate = _a.onUpdate, onComplete = _a.onComplete;
    var currentAnimation;
    function isOutOfBounds(v) {
        return min !== undefined && v < min || max !== undefined && v > max;
    }
    function boundaryNearest(v) {
        if (min === undefined) return max;
        if (max === undefined) return min;
        return Math.abs(min - v) < Math.abs(max - v) ? min : max;
    }
    function startAnimation(options) {
        currentAnimation === null || currentAnimation === void 0 || currentAnimation.stop();
        currentAnimation = animate(tslib.__assign(tslib.__assign({
        }, options), {
            driver: driver,
            onUpdate: function(v) {
                var _a1;
                onUpdate === null || onUpdate === void 0 || onUpdate(v);
                (_a1 = options.onUpdate) === null || _a1 === void 0 || _a1.call(options, v);
            },
            onComplete: onComplete
        }));
    }
    function startSpring(options) {
        startAnimation(tslib.__assign({
            type: "spring",
            stiffness: bounceStiffness,
            damping: bounceDamping,
            restDelta: restDelta
        }, options));
    }
    if (isOutOfBounds(from)) startSpring({
        from: from,
        velocity: velocity,
        to: boundaryNearest(from)
    });
    else {
        var target = power * velocity + from;
        if (typeof modifyTarget !== "undefined") target = modifyTarget(target);
        var boundary_1 = boundaryNearest(target);
        var heading_1 = boundary_1 === min ? -1 : 1;
        var prev_1;
        var current_1;
        var checkBoundary = function(v) {
            prev_1 = current_1;
            current_1 = v;
            velocity = velocityPerSecond(v - prev_1, sync.getFrameData().delta);
            if (heading_1 === 1 && v > boundary_1 || heading_1 === -1 && v < boundary_1) startSpring({
                from: v,
                to: boundary_1,
                velocity: velocity
            });
        };
        startAnimation({
            type: "decay",
            from: from,
            velocity: velocity,
            timeConstant: timeConstant,
            power: power,
            restDelta: restDelta,
            modifyTarget: modifyTarget,
            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined
        });
    }
    return {
        stop: function() {
            return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
        }
    };
}
var radiansToDegrees = function(radians) {
    return radians * 180 / Math.PI;
};
var angle = function(a, b) {
    if (b === void 0) b = zeroPoint;
    return radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));
};
var applyOffset = function(from, to) {
    var hasReceivedFrom = true;
    if (to === undefined) {
        to = from;
        hasReceivedFrom = false;
    }
    return function(v) {
        if (hasReceivedFrom) return v - from + to;
        else {
            from = v;
            hasReceivedFrom = true;
            return to;
        }
    };
};
var identity = function(v) {
    return v;
};
var createAttractor = function(alterDisplacement) {
    if (alterDisplacement === void 0) alterDisplacement = identity;
    return function(constant, origin, v) {
        var displacement = origin - v;
        var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
        return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
    };
};
var attract = createAttractor();
var attractExpo = createAttractor(Math.sqrt);
var degreesToRadians = function(degrees) {
    return degrees * Math.PI / 180;
};
var isPoint = function(point) {
    return point.hasOwnProperty('x') && point.hasOwnProperty('y');
};
var isPoint3D = function(point) {
    return isPoint(point) && point.hasOwnProperty('z');
};
var distance1D = function(a, b) {
    return Math.abs(a - b);
};
function distance(a, b) {
    if (isNum(a) && isNum(b)) return distance1D(a, b);
    else if (isPoint(a) && isPoint(b)) {
        var xDelta = distance1D(a.x, b.x);
        var yDelta = distance1D(a.y, b.y);
        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;
        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
    }
}
var pointFromVector = function(origin, angle1, distance1) {
    angle1 = degreesToRadians(angle1);
    return {
        x: distance1 * Math.cos(angle1) + origin.x,
        y: distance1 * Math.sin(angle1) + origin.y
    };
};
var toDecimal = function(num, precision) {
    if (precision === void 0) precision = 2;
    precision = Math.pow(10, precision);
    return Math.round(num * precision) / precision;
};
var smoothFrame = function(prevValue, nextValue, duration, smoothing) {
    if (smoothing === void 0) smoothing = 0;
    return toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));
};
var smooth = function(strength) {
    if (strength === void 0) strength = 50;
    var previousValue = 0;
    var lastUpdated = 0;
    return function(v) {
        var currentFramestamp = sync.getFrameData().timestamp;
        var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;
        var newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;
        lastUpdated = currentFramestamp;
        previousValue = newValue;
        return newValue;
    };
};
var snap = function(points) {
    if (typeof points === 'number') return function(v) {
        return Math.round(v / points) * points;
    };
    else {
        var i_1 = 0;
        var numPoints_1 = points.length;
        return function(v) {
            var lastDistance = Math.abs(points[0] - v);
            for(i_1 = 1; i_1 < numPoints_1; i_1++){
                var point = points[i_1];
                var distance1 = Math.abs(point - v);
                if (distance1 === 0) return point;
                if (distance1 > lastDistance) return points[i_1 - 1];
                if (i_1 === numPoints_1 - 1) return point;
                lastDistance = distance1;
            }
        };
    }
};
function velocityPerFrame(xps, frameDuration) {
    return xps / (1000 / frameDuration);
}
var wrap = function(min, max, v) {
    var rangeSize = max - min;
    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};
var a = function(a1, a2) {
    return 1 - 3 * a2 + 3 * a1;
};
var b = function(a1, a2) {
    return 3 * a2 - 6 * a1;
};
var c = function(a1) {
    return 3 * a1;
};
var calcBezier = function(t, a1, a2) {
    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
};
var getSlope = function(t, a1, a2) {
    return 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
};
var subdivisionPrecision = 0.0000001;
var subdivisionMaxIterations = 10;
function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX;
    var currentT;
    var i = 0;
    do {
        currentT = aA + (aB - aA) / 2;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0) aB = currentT;
        else aA = currentT;
    }while (Math.abs(currentX) > subdivisionPrecision && (++i) < subdivisionMaxIterations)
    return currentT;
}
var newtonIterations = 8;
var newtonMinSlope = 0.001;
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for(var i = 0; i < newtonIterations; ++i){
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0) return aGuessT;
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
}
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2) return linear;
    var sampleValues = new Float32Array(kSplineTableSize);
    for(var i = 0; i < kSplineTableSize; ++i)sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    function getTForX(aX) {
        var intervalStart = 0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;
        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample)intervalStart += kSampleStepSize;
        --currentSample;
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= newtonMinSlope) return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        else if (initialSlope === 0) return guessForT;
        else return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
    return function(t) {
        return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
    };
}
var steps = function(steps1, direction) {
    if (direction === void 0) direction = 'end';
    return function(progress1) {
        progress1 = direction === 'end' ? Math.min(progress1, 0.999) : Math.max(progress1, 0.001);
        var expanded = progress1 * steps1;
        var rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);
        return clamp(0, 1, rounded / steps1);
    };
};
exports.angle = angle;
exports.animate = animate;
exports.anticipate = anticipate;
exports.applyOffset = applyOffset;
exports.attract = attract;
exports.attractExpo = attractExpo;
exports.backIn = backIn;
exports.backInOut = backInOut;
exports.backOut = backOut;
exports.bounceIn = bounceIn;
exports.bounceInOut = bounceInOut;
exports.bounceOut = bounceOut;
exports.circIn = circIn;
exports.circInOut = circInOut;
exports.circOut = circOut;
exports.clamp = clamp;
exports.createAnticipate = createAnticipate;
exports.createAttractor = createAttractor;
exports.createBackIn = createBackIn;
exports.createExpoIn = createExpoIn;
exports.cubicBezier = cubicBezier;
exports.decay = decay;
exports.degreesToRadians = degreesToRadians;
exports.distance = distance;
exports.easeIn = easeIn;
exports.easeInOut = easeInOut;
exports.easeOut = easeOut;
exports.inertia = inertia;
exports.interpolate = interpolate;
exports.isPoint = isPoint;
exports.isPoint3D = isPoint3D;
exports.keyframes = keyframes;
exports.linear = linear;
exports.mirrorEasing = mirrorEasing;
exports.mix = mix;
exports.mixColor = mixColor;
exports.mixComplex = mixComplex;
exports.pipe = pipe;
exports.pointFromVector = pointFromVector;
exports.progress = progress;
exports.radiansToDegrees = radiansToDegrees;
exports.reverseEasing = reverseEasing;
exports.smooth = smooth;
exports.smoothFrame = smoothFrame;
exports.snap = snap;
exports.spring = spring;
exports.steps = steps;
exports.toDecimal = toDecimal;
exports.velocityPerFrame = velocityPerFrame;
exports.velocityPerSecond = velocityPerSecond;
exports.wrap = wrap;

},{"tslib":"4rd38","hey-listen":"6CxDv","style-value-types":"627uD","framesync":"5fyvk"}],"4SkYr":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var memoize = _interopDefault(require('@emotion/memoize'));
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var index = memoize(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
exports.default = index;

},{"@emotion/memoize":"3NW5W"}],"3NW5W":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function memoize(fn) {
    var cache = {
    };
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
exports.default = memoize;

},{}],"29X8r":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.slideTransition = slideTransition;
exports.withDelay = exports.TransitionDefaults = exports.TransitionVariants = exports.TransitionEasings = void 0;
var _utils = require("@chakra-ui/utils");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var TransitionEasings = {
    ease: [
        0.25,
        0.1,
        0.25,
        1
    ],
    easeIn: [
        0.4,
        0,
        1,
        1
    ],
    easeOut: [
        0,
        0,
        0.2,
        1
    ],
    easeInOut: [
        0.4,
        0,
        0.2,
        1
    ]
};
exports.TransitionEasings = TransitionEasings;
var TransitionVariants = {
    scale: {
        enter: {
            scale: 1
        },
        exit: {
            scale: 0.95
        }
    },
    fade: {
        enter: {
            opacity: 1
        },
        exit: {
            opacity: 0
        }
    },
    pushLeft: {
        enter: {
            x: "100%"
        },
        exit: {
            x: "-30%"
        }
    },
    pushRight: {
        enter: {
            x: "-100%"
        },
        exit: {
            x: "30%"
        }
    },
    pushUp: {
        enter: {
            y: "100%"
        },
        exit: {
            y: "-30%"
        }
    },
    pushDown: {
        enter: {
            y: "-100%"
        },
        exit: {
            y: "30%"
        }
    },
    slideLeft: {
        position: {
            left: 0,
            top: 0,
            bottom: 0,
            width: "100%"
        },
        enter: {
            x: 0
        },
        exit: {
            x: "-100%"
        }
    },
    slideRight: {
        position: {
            right: 0,
            top: 0,
            bottom: 0,
            width: "100%"
        },
        enter: {
            x: 0
        },
        exit: {
            x: "100%"
        }
    },
    slideUp: {
        position: {
            top: 0,
            left: 0,
            right: 0,
            maxWidth: "100vw"
        },
        enter: {
            y: 0
        },
        exit: {
            y: "-100%"
        }
    },
    slideDown: {
        position: {
            bottom: 0,
            left: 0,
            right: 0,
            maxWidth: "100vw"
        },
        enter: {
            y: 0
        },
        exit: {
            y: "100%"
        }
    }
};
exports.TransitionVariants = TransitionVariants;
function slideTransition(options) {
    var _options$direction;
    var side = (_options$direction = options == null ? void 0 : options.direction) != null ? _options$direction : "right";
    switch(side){
        case "right":
            return TransitionVariants.slideRight;
        case "left":
            return TransitionVariants.slideLeft;
        case "bottom":
            return TransitionVariants.slideDown;
        case "top":
            return TransitionVariants.slideUp;
        default:
            return TransitionVariants.slideRight;
    }
}
var TransitionDefaults = {
    enter: {
        duration: 0.2,
        ease: TransitionEasings.easeOut
    },
    exit: {
        duration: 0.1,
        ease: TransitionEasings.easeIn
    }
};
exports.TransitionDefaults = TransitionDefaults;
var withDelay = {
    enter: function enter(transition, delay) {
        return _extends({
        }, transition, {
            delay: _utils.isNumber(delay) ? delay : delay == null ? void 0 : delay["enter"]
        });
    },
    exit: function exit(transition, delay) {
        return _extends({
        }, transition, {
            delay: _utils.isNumber(delay) ? delay : delay == null ? void 0 : delay["exit"]
        });
    }
};
exports.withDelay = withDelay;

},{"@chakra-ui/utils":"3364O"}],"kjVI9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Fade = exports.fadeConfig = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _transitionUtils = require("./transition-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var variants = {
    enter: function enter(_temp) {
        var _transition$enter;
        var _ref = _temp === void 0 ? {
        } : _temp, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
        return {
            opacity: 1,
            transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : _transitionUtils.withDelay.enter(_transitionUtils.TransitionDefaults.enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    },
    exit: function exit(_temp2) {
        var _transition$exit;
        var _ref2 = _temp2 === void 0 ? {
        } : _temp2, transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
        return {
            opacity: 0,
            transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : _transitionUtils.withDelay.exit(_transitionUtils.TransitionDefaults.exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        };
    }
};
var fadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants: variants
};
exports.fadeConfig = fadeConfig;
var Fade = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose(props, [
        "unmountOnExit",
        "in",
        "className",
        "transition",
        "transitionEnd",
        "delay"
    ]);
    var animate = isOpen || unmountOnExit ? "enter" : "exit";
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var custom = {
        transition: transition,
        transitionEnd: transitionEnd,
        delay: delay
    };
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        custom: custom
    }, show && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-fade", className),
        custom: custom
    }, fadeConfig, {
        animate: animate
    }, rest))));
});
exports.Fade = Fade;
if (_utils.__DEV__) Fade.displayName = "Fade";

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./transition-utils":"29X8r"}],"6vcFx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ScaleFade = exports.scaleFadeConfig = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _transitionUtils = require("./transition-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var variants = {
    exit: function exit(_ref) {
        var _transition$exit;
        var reverse = _ref.reverse, initialScale = _ref.initialScale, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
        return _extends({
            opacity: 0
        }, reverse ? {
            scale: initialScale,
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        } : {
            transitionEnd: _extends({
                scale: initialScale
            }, transitionEnd == null ? void 0 : transitionEnd.exit)
        }, {
            transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : _transitionUtils.withDelay.exit(_transitionUtils.TransitionDefaults.exit, delay)
        });
    },
    enter: function enter(_ref2) {
        var _transition$enter;
        var transitionEnd = _ref2.transitionEnd, transition = _ref2.transition, delay = _ref2.delay;
        return {
            opacity: 1,
            scale: 1,
            transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : _transitionUtils.withDelay.enter(_transitionUtils.TransitionDefaults.enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    }
};
var scaleFadeConfig = {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    variants: variants
};
exports.scaleFadeConfig = scaleFadeConfig;
var ScaleFade = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, _props$initialScale = props.initialScale, initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale, className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose(props, [
        "unmountOnExit",
        "in",
        "reverse",
        "initialScale",
        "className",
        "transition",
        "transitionEnd",
        "delay"
    ]);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
        initialScale: initialScale,
        reverse: reverse,
        transition: transition,
        transitionEnd: transitionEnd,
        delay: delay
    };
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        custom: custom
    }, show && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-offset-slide", className)
    }, scaleFadeConfig, {
        animate: animate,
        custom: custom
    }, rest))));
});
exports.ScaleFade = ScaleFade;
if (_utils.__DEV__) ScaleFade.displayName = "ScaleFade";

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./transition-utils":"29X8r"}],"2V9lp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Slide = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _transitionUtils = require("./transition-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var defaultTransition = {
    exit: {
        duration: 0.15,
        ease: _transitionUtils.TransitionEasings.easeInOut
    },
    enter: {
        type: "spring",
        damping: 25,
        stiffness: 180
    }
};
var variants = {
    exit: function exit(_ref) {
        var _transition$exit;
        var direction = _ref.direction, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
        var _slideTransition = _transitionUtils.slideTransition({
            direction: direction
        }), exitStyles = _slideTransition.exit;
        return _extends({
        }, exitStyles, {
            transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : _transitionUtils.withDelay.exit(defaultTransition.exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        });
    },
    enter: function enter(_ref2) {
        var _transition$enter;
        var direction = _ref2.direction, transitionEnd = _ref2.transitionEnd, transition = _ref2.transition, delay = _ref2.delay;
        var _slideTransition2 = _transitionUtils.slideTransition({
            direction: direction
        }), enterStyles = _slideTransition2.enter;
        return _extends({
        }, enterStyles, {
            transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : _transitionUtils.withDelay.enter(defaultTransition.enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        });
    }
};
var Slide = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var _props$direction = props.direction, direction = _props$direction === void 0 ? "right" : _props$direction, style = props.style, unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose(props, [
        "direction",
        "style",
        "unmountOnExit",
        "in",
        "className",
        "transition",
        "transitionEnd",
        "delay"
    ]);
    var transitionStyles = _transitionUtils.slideTransition({
        direction: direction
    });
    var computedStyle = Object.assign({
        position: "fixed"
    }, transitionStyles.position, style);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
        transitionEnd: transitionEnd,
        transition: transition,
        direction: direction,
        delay: delay
    };
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        custom: custom
    }, show && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, _extends({
        ref: ref,
        initial: "exit",
        className: _utils.cx("chakra-slide", className),
        animate: animate,
        exit: "exit",
        custom: custom,
        variants: variants,
        style: computedStyle
    }, rest))));
});
exports.Slide = Slide;
if (_utils.__DEV__) Slide.displayName = "Slide";

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./transition-utils":"29X8r"}],"231ch":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.SlideFade = exports.slideFadeConfig = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _transitionUtils = require("./transition-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var variants = {
    initial: function initial(_ref) {
        var _transition$exit;
        var offsetX = _ref.offsetX, offsetY = _ref.offsetY, transition = _ref.transition, transitionEnd = _ref.transitionEnd, delay = _ref.delay;
        return {
            opacity: 0,
            x: offsetX,
            y: offsetY,
            transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : _transitionUtils.withDelay.exit(_transitionUtils.TransitionDefaults.exit, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        };
    },
    enter: function enter(_ref2) {
        var _transition$enter;
        var transition = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
        return {
            opacity: 1,
            x: 0,
            y: 0,
            transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : _transitionUtils.withDelay.enter(_transitionUtils.TransitionDefaults.enter, delay),
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
        };
    },
    exit: function exit(_ref3) {
        var _transition$exit2;
        var offsetY = _ref3.offsetY, offsetX = _ref3.offsetX, transition = _ref3.transition, transitionEnd = _ref3.transitionEnd, reverse = _ref3.reverse, delay = _ref3.delay;
        var offset = {
            x: offsetX,
            y: offsetY
        };
        return _extends({
            opacity: 0,
            transition: (_transition$exit2 = transition == null ? void 0 : transition.exit) != null ? _transition$exit2 : _transitionUtils.withDelay.exit(_transitionUtils.TransitionDefaults.exit, delay)
        }, reverse ? _extends({
        }, offset, {
            transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
        }) : {
            transitionEnd: _extends({
            }, offset, transitionEnd == null ? void 0 : transitionEnd.exit)
        });
    }
};
var slideFadeConfig = {
    initial: "initial",
    animate: "enter",
    exit: "exit",
    variants: variants
};
exports.slideFadeConfig = slideFadeConfig;
var SlideFade = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, className = props.className, _props$offsetX = props.offsetX, offsetX = _props$offsetX === void 0 ? 0 : _props$offsetX, _props$offsetY = props.offsetY, offsetY = _props$offsetY === void 0 ? 8 : _props$offsetY, transition = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose(props, [
        "unmountOnExit",
        "in",
        "reverse",
        "className",
        "offsetX",
        "offsetY",
        "transition",
        "transitionEnd",
        "delay"
    ]);
    var show = unmountOnExit ? isOpen && unmountOnExit : true;
    var animate = isOpen || unmountOnExit ? "enter" : "exit";
    var custom = {
        offsetX: offsetX,
        offsetY: offsetY,
        reverse: reverse,
        transition: transition,
        transitionEnd: transitionEnd,
        delay: delay
    };
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        custom: custom
    }, show && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-offset-slide", className),
        custom: custom
    }, slideFadeConfig, {
        animate: animate
    }, rest))));
});
exports.SlideFade = SlideFade;
if (_utils.__DEV__) SlideFade.displayName = "SlideFade";

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./transition-utils":"29X8r"}],"1OMpw":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useAccordion = useAccordion;
exports.useAccordionItem = useAccordionItem;
exports.useAccordionContext = exports.AccordionProvider = exports.useAccordionDescendant = exports.useAccordionDescendants = exports.useAccordionDescendantsContext = exports.AccordionDescendantsProvider = void 0;
var _descendant = require("@chakra-ui/descendant");
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/ var _createDescendantCont = _descendant.createDescendantContext(), AccordionDescendantsProvider = _createDescendantCont[0], useAccordionDescendantsContext = _createDescendantCont[1], useAccordionDescendants = _createDescendantCont[2], useAccordionDescendant = _createDescendantCont[3];
/* -------------------------------------------------------------------------------------------------
 * useAccordion - The root react hook that manages all accordion items
 * -----------------------------------------------------------------------------------------------*/ exports.useAccordionDescendant = useAccordionDescendant;
exports.useAccordionDescendants = useAccordionDescendants;
exports.useAccordionDescendantsContext = useAccordionDescendantsContext;
exports.AccordionDescendantsProvider = AccordionDescendantsProvider;
/**
 * useAccordion hook provides all the state and focus management logic
 * for accordion items.
 */ function useAccordion(props) {
    var onChange = props.onChange, defaultIndex = props.defaultIndex, indexProp = props.index, allowMultiple = props.allowMultiple, allowToggle = props.allowToggle, htmlProps = _objectWithoutPropertiesLoose(props, [
        "onChange",
        "defaultIndex",
        "index",
        "allowMultiple",
        "allowToggle"
    ]); // validate the props and `warn` if used incorrectly
    allowMultipleWarning(props);
    allowMultipleAndAllowToggleWarning(props);
    /**
   * Think of this as the register to each accordion item.
   * We used to manage focus between accordion item buttons.
   *
   * Every accordion item, registers their button refs in this context
   */ var descendants = useAccordionDescendants();
    /**
   * This state is used to track the index focused accordion
   * button when click on the button, tab on the button, or
   * use the down/up arrow to navigate.
   */ var _useState = _react.useState(-1), focusedIndex = _useState[0], setFocusedIndex = _useState[1];
    /**
   * Reset focused index when accordion unmounts
   * or descendants change
   */ _hooks.useUnmountEffect(function() {
        setFocusedIndex(-1);
    });
    /**
   * Hook that manages the controlled and un-controlled state
   * for the accordion.
   */ var _useControllableState = _hooks.useControllableState({
        value: indexProp,
        defaultValue: function defaultValue() {
            if (allowMultiple) return defaultIndex != null ? defaultIndex : [];
            return defaultIndex != null ? defaultIndex : -1;
        },
        onChange: onChange
    }), index = _useControllableState[0], setIndex = _useControllableState[1];
    /**
   * Gets the `isOpen` and `onChange` props for a child accordion item based on
   * the child's index.
   *
   * @param idx {number} The index of the child accordion item
   */ var getAccordionItemProps = function getAccordionItemProps1(idx) {
        var isOpen = false;
        if (idx !== null) isOpen = _utils.isArray(index) ? index.includes(idx) : index === idx;
        var onChange1 = function onChange2(isOpen1) {
            if (idx === null) return;
            if (allowMultiple && _utils.isArray(index)) {
                var nextState = isOpen1 ? _utils.addItem(index, idx) : _utils.removeItem(index, idx);
                setIndex(nextState);
            } else if (isOpen1) setIndex(idx);
            else if (allowToggle) setIndex(-1);
        };
        return {
            isOpen: isOpen,
            onChange: onChange1
        };
    };
    return {
        index: index,
        setIndex: setIndex,
        htmlProps: htmlProps,
        getAccordionItemProps: getAccordionItemProps,
        focusedIndex: focusedIndex,
        setFocusedIndex: setFocusedIndex,
        descendants: descendants
    };
}
var _createContext = _reactUtils.createContext({
    name: "AccordionContext",
    errorMessage: "useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"
}), AccordionProvider = _createContext[0], useAccordionContext = _createContext[1];
/* -------------------------------------------------------------------------------------------------
 * Hook for a single accordion item
 * -----------------------------------------------------------------------------------------------*/ exports.useAccordionContext = useAccordionContext;
exports.AccordionProvider = AccordionProvider;
/**
 * useAccordionItem
 *
 * React hook that provides the open/close functionality
 * for an accordion item and its children
 */ function useAccordionItem(props) {
    var isDisabled = props.isDisabled, isFocusable = props.isFocusable, id = props.id, htmlProps = _objectWithoutPropertiesLoose(props, [
        "isDisabled",
        "isFocusable",
        "id"
    ]);
    var _useAccordionContext = useAccordionContext(), getAccordionItemProps = _useAccordionContext.getAccordionItemProps, setFocusedIndex = _useAccordionContext.setFocusedIndex;
    var buttonRef = _react.useRef(null);
    /**
   * Generate unique ids for all accordion item components (button and panel)
   */ var _useIds = _hooks.useIds(id, "accordion-button", "accordion-panel"), buttonId = _useIds[0], panelId = _useIds[1];
    focusableNotDisabledWarning(props);
    /**
   * Think of this as a way to register this accordion item
   * with its parent `useAccordion`
   */ var _useAccordionDescenda = useAccordionDescendant({
        disabled: isDisabled && !isFocusable
    }), register = _useAccordionDescenda.register, index = _useAccordionDescenda.index, descendants = _useAccordionDescenda.descendants;
    var _getAccordionItemProp = getAccordionItemProps(index === -1 ? null : index), isOpen = _getAccordionItemProp.isOpen, onChange = _getAccordionItemProp.onChange;
    warnIfOpenAndDisabled({
        isOpen: isOpen,
        isDisabled: isDisabled
    });
    var onOpen = function onOpen1() {
        onChange == null || onChange(true);
    };
    var onClose = function onClose1() {
        onChange == null || onChange(false);
    };
    /**
   * Toggle the visibility of the accordion item
   */ var onClick = _react.useCallback(function() {
        onChange == null || onChange(!isOpen);
        setFocusedIndex(index);
    }, [
        index,
        setFocusedIndex,
        isOpen,
        onChange
    ]);
    /**
   * Manage keyboard navigation between accordion items.
   */ var onKeyDown = _react.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            ArrowDown: function ArrowDown() {
                var next = descendants.nextEnabled(index);
                if (next) _utils.focus(next.node);
            },
            ArrowUp: function ArrowUp() {
                var prev = descendants.prevEnabled(index);
                if (prev) _utils.focus(prev.node);
            },
            Home: function Home() {
                var first = descendants.firstEnabled();
                if (first) _utils.focus(first.node);
            },
            End: function End() {
                var last = descendants.lastEnabled();
                if (last) _utils.focus(last.node);
            }
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        descendants,
        index
    ]);
    /**
   * Since each accordion item's button still remains tabbable, let's
   * update the focusedIndex when it receives focus
   */ var onFocus = _react.useCallback(function() {
        setFocusedIndex(index);
    }, [
        setFocusedIndex,
        index
    ]);
    var getButtonProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            type: "button",
            ref: _reactUtils.mergeRefs(register, buttonRef, ref),
            id: buttonId,
            disabled: !!isDisabled,
            "aria-expanded": !!isOpen,
            "aria-controls": panelId,
            onClick: _utils.callAllHandlers(props1.onClick, onClick),
            onFocus: _utils.callAllHandlers(props1.onFocus, onFocus),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown)
        });
    }, [
        buttonId,
        isDisabled,
        isOpen,
        onClick,
        onFocus,
        onKeyDown,
        panelId,
        register
    ]);
    var getPanelProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            role: "region",
            id: panelId,
            "aria-labelledby": buttonId,
            hidden: !isOpen
        });
    }, [
        buttonId,
        isOpen,
        panelId
    ]);
    return {
        isOpen: isOpen,
        isDisabled: isDisabled,
        isFocusable: isFocusable,
        onOpen: onOpen,
        onClose: onClose,
        getButtonProps: getButtonProps,
        getPanelProps: getPanelProps,
        htmlProps: htmlProps
    };
}
/* -------------------------------------------------------------------------------------------------
 * Validate accordion and accordion item props, and emit warnings.
 * -----------------------------------------------------------------------------------------------*/ function allowMultipleWarning(props) {
    var index = props.index || props.defaultIndex;
    var condition = !_utils.isUndefined(index) && !_utils.isArray(index) && props.allowMultiple;
    _utils.warn({
        condition: !!condition,
        message: "If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: " + typeof index + ","
    });
}
function allowMultipleAndAllowToggleWarning(props) {
    _utils.warn({
        condition: !!(props.allowMultiple && props.allowToggle),
        message: "If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not"
    });
}
function focusableNotDisabledWarning(props) {
    _utils.warn({
        condition: !!(props.isFocusable && !props.isDisabled),
        message: "Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    "
    });
}
function warnIfOpenAndDisabled(props) {
    _utils.warn({
        condition: props.isOpen && !!props.isDisabled,
        message: "Cannot open a disabled accordion item"
    });
}

},{"@chakra-ui/descendant":"37ueY","@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z"}],"37ueY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.createDescendantContext = void 0;
var _useDescendant = require("./use-descendant");
exports.createDescendantContext = _useDescendant.createDescendantContext;
exports["default"] = _useDescendant.createDescendantContext;

},{"./use-descendant":"745d4"}],"745d4":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createDescendantContext = createDescendantContext;
var _reactUtils = require("@chakra-ui/react-utils");
var _react = require("react");
var _descendant = require("./descendant");
var _utils = require("./utils");
/**
 * @internal
 * React hook that initializes the DescendantsManager
 */ function useDescendants() {
    var _useState = _react.useState(function() {
        return new _descendant.DescendantsManager();
    }), descendants = _useState[0];
    _utils.useSafeLayoutEffect(function() {
        return function() {
            return descendants.destroy();
        };
    });
    return descendants;
}
/* -------------------------------------------------------------------------------------------------
 * Descendants context to be used in component-land.
  - Mount the `DescendantsContextProvider` at the root of the component
  - Call `useDescendantsContext` anywhere you need access to the descendants information

  NB:  I recommend using `createDescendantContext` below
 * -----------------------------------------------------------------------------------------------*/ var _createContext = _reactUtils.createContext({
    name: "DescendantsProvider",
    errorMessage: "useDescendantsContext must be used within DescendantsProvider"
}), DescendantsContextProvider = _createContext[0], useDescendantsContext = _createContext[1];
/**
 * @internal
 * This hook provides information a descendant such as:
 * - Its index compared to other descendants
 * - ref callback to register the descendant
 * - Its enabled index compared to other enabled descendants
 */ function useDescendant(options) {
    var descendants = useDescendantsContext();
    var _useState2 = _react.useState(-1), index = _useState2[0], setIndex = _useState2[1];
    var ref = _react.useRef(null);
    _utils.useSafeLayoutEffect(function() {
        return function() {
            if (!ref.current) return;
            descendants.unregister(ref.current);
        };
    }, []);
    _utils.useSafeLayoutEffect(function() {
        if (!ref.current) return;
        var dataIndex = Number(ref.current.dataset.index);
        if (index != dataIndex && !Number.isNaN(dataIndex)) setIndex(dataIndex);
    });
    var refCallback = options ? _utils.cast(descendants.register(options)) : _utils.cast(descendants.register);
    return {
        descendants: descendants,
        index: index,
        enabledIndex: descendants.enabledIndexOf(ref.current),
        register: _reactUtils.mergeRefs(refCallback, ref)
    };
}
/* -------------------------------------------------------------------------------------------------
 * Function that provides strongly typed versions of the context provider and hooks above.
   To be used in component-land
 * -----------------------------------------------------------------------------------------------*/ function createDescendantContext() {
    var ContextProvider = _utils.cast(DescendantsContextProvider);
    var _useDescendantsContext = function _useDescendantsContext1() {
        return _utils.cast(useDescendantsContext());
    };
    var _useDescendant = function _useDescendant1(options) {
        return useDescendant(options);
    };
    var _useDescendants = function _useDescendants1() {
        return useDescendants();
    };
    return [
        ContextProvider,
        _useDescendantsContext,
        _useDescendants,
        _useDescendant
    ];
}

},{"@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./descendant":"23kc7","./utils":"7bZlV"}],"23kc7":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.DescendantsManager = void 0;
var _utils = require("./utils");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
/**
 * @internal
 *
 * Class to manage descendants and their relative indices in the DOM.
 * It uses `node.compareDocumentPosition(...)` under the hood
 */ var DescendantsManager = function DescendantsManager1() {
    var _this = this;
    _defineProperty(this, "descendants", new Map());
    _defineProperty(this, "register", function(nodeOrOptions) {
        if (nodeOrOptions == null) return;
        if (_utils.isElement(nodeOrOptions)) return _this.registerNode(nodeOrOptions);
        return function(node) {
            _this.registerNode(node, nodeOrOptions);
        };
    });
    _defineProperty(this, "unregister", function(node) {
        _this.descendants["delete"](node);
        var sorted = _utils.sortNodes(Array.from(_this.descendants.keys()));
        _this.assignIndex(sorted);
    });
    _defineProperty(this, "destroy", function() {
        _this.descendants.clear();
    });
    _defineProperty(this, "assignIndex", function(descendants) {
        _this.descendants.forEach(function(descendant) {
            var index = descendants.indexOf(descendant.node);
            descendant.index = index;
            descendant.node.dataset.index = descendant.index.toString();
        });
    });
    _defineProperty(this, "count", function() {
        return _this.descendants.size;
    });
    _defineProperty(this, "enabledCount", function() {
        return _this.enabledValues().length;
    });
    _defineProperty(this, "values", function() {
        var values = Array.from(_this.descendants.values());
        return values.sort(function(a, b) {
            return a.index - b.index;
        });
    });
    _defineProperty(this, "enabledValues", function() {
        return _this.values().filter(function(descendant) {
            return !descendant.disabled;
        });
    });
    _defineProperty(this, "item", function(index) {
        if (_this.count() === 0) return undefined;
        return _this.values()[index];
    });
    _defineProperty(this, "enabledItem", function(index) {
        if (_this.enabledCount() === 0) return undefined;
        return _this.enabledValues()[index];
    });
    _defineProperty(this, "first", function() {
        return _this.item(0);
    });
    _defineProperty(this, "firstEnabled", function() {
        return _this.enabledItem(0);
    });
    _defineProperty(this, "last", function() {
        return _this.item(_this.descendants.size - 1);
    });
    _defineProperty(this, "lastEnabled", function() {
        var lastIndex = _this.enabledValues().length - 1;
        return _this.enabledItem(lastIndex);
    });
    _defineProperty(this, "indexOf", function(node) {
        var _this$descendants$get, _this$descendants$get2;
        if (!node) return -1;
        return (_this$descendants$get = (_this$descendants$get2 = _this.descendants.get(node)) == null ? void 0 : _this$descendants$get2.index) != null ? _this$descendants$get : -1;
    });
    _defineProperty(this, "enabledIndexOf", function(node) {
        if (node == null) return -1;
        return _this.enabledValues().findIndex(function(i) {
            return i.node.isSameNode(node);
        });
    });
    _defineProperty(this, "next", function(index, loop) {
        if (loop === void 0) loop = true;
        var next = _utils.getNextIndex(index, _this.count(), loop);
        return _this.item(next);
    });
    _defineProperty(this, "nextEnabled", function(index, loop) {
        if (loop === void 0) loop = true;
        var item = _this.item(index);
        if (!item) return;
        var enabledIndex = _this.enabledIndexOf(item.node);
        var nextEnabledIndex = _utils.getNextIndex(enabledIndex, _this.enabledCount(), loop);
        return _this.enabledItem(nextEnabledIndex);
    });
    _defineProperty(this, "prev", function(index, loop) {
        if (loop === void 0) loop = true;
        var prev = _utils.getPrevIndex(index, _this.count() - 1, loop);
        return _this.item(prev);
    });
    _defineProperty(this, "prevEnabled", function(index, loop) {
        if (loop === void 0) loop = true;
        var item = _this.item(index);
        if (!item) return;
        var enabledIndex = _this.enabledIndexOf(item.node);
        var prevEnabledIndex = _utils.getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);
        return _this.enabledItem(prevEnabledIndex);
    });
    _defineProperty(this, "registerNode", function(node, options) {
        if (!node || _this.descendants.has(node)) return;
        var keys = Array.from(_this.descendants.keys()).concat(node);
        var sorted = _utils.sortNodes(keys);
        if (options != null && options.disabled) options.disabled = !!options.disabled;
        var descendant = _extends({
            node: node,
            index: -1
        }, options);
        _this.descendants.set(node, descendant);
        _this.assignIndex(sorted);
    });
};
exports.DescendantsManager = DescendantsManager;

},{"./utils":"7bZlV"}],"7bZlV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.sortNodes = sortNodes;
exports.getNextIndex = getNextIndex;
exports.getPrevIndex = getPrevIndex;
exports.cast = exports.useSafeLayoutEffect = exports.isElement = void 0;
var _react = require("react");
/**
 * Sort an array of DOM nodes according to the HTML tree order
 * @see http://www.w3.org/TR/html5/infrastructure.html#tree-order
 */ function sortNodes(nodes) {
    return nodes.sort(function(a, b) {
        var compare = a.compareDocumentPosition(b);
        if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) // a < b
        return -1;
        if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) // a > b
        return 1;
        if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) throw Error("Cannot sort the given nodes.");
        else return 0;
    });
}
var isElement = function isElement1(el) {
    return typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
};
exports.isElement = isElement;
function getNextIndex(current, max, loop) {
    var next = current + 1;
    if (loop && next >= max) next = 0;
    return next;
}
function getPrevIndex(current, max, loop) {
    var next = current - 1;
    if (loop && next < 0) next = max;
    return next;
}
var useSafeLayoutEffect = typeof window !== "undefined" ? _react.useLayoutEffect : _react.useEffect;
exports.useSafeLayoutEffect = useSafeLayoutEffect;
var cast = function cast1(value) {
    return value;
};
exports.cast = cast;

},{"react":"3f97z"}],"5bEDe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _alert = require("./alert");
Object.keys(_alert).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _alert[key]) return;
    exports[key] = _alert[key];
});

},{"./alert":"2CScN"}],"2CScN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.AlertIcon = exports.AlertDescription = exports.AlertTitle = exports.Alert = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _icons = require("./icons");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var STATUSES = {
    info: {
        icon: _icons.InfoIcon,
        colorScheme: "blue"
    },
    warning: {
        icon: _icons.WarningIcon,
        colorScheme: "orange"
    },
    success: {
        icon: _icons.CheckIcon,
        colorScheme: "green"
    },
    error: {
        icon: _icons.WarningIcon,
        colorScheme: "red"
    }
};
var _createContext = _reactUtils.createContext({
    name: "AlertContext",
    errorMessage: "useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`"
}), AlertProvider = _createContext[0], useAlertContext = _createContext[1];
/**
 * Alert is used to communicate the state or status of a
 * page, feature or action
 */ var Alert = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$colorScheme;
    var _omitThemingProps = _system.omitThemingProps(props), _omitThemingProps$sta = _omitThemingProps.status, status = _omitThemingProps$sta === void 0 ? "info" : _omitThemingProps$sta, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "status"
    ]);
    var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;
    var styles = _system.useMultiStyleConfig("Alert", _extends({
    }, props, {
        colorScheme: colorScheme
    }));
    var alertStyles = _extends({
        width: "100%",
        display: "flex",
        alignItems: "center",
        position: "relative",
        overflow: "hidden"
    }, styles.container);
    return(/*#__PURE__*/ React.createElement(AlertProvider, {
        value: {
            status: status
        }
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        role: "alert",
        ref: ref
    }, rest, {
        className: _utils.cx("chakra-alert", props.className),
        __css: alertStyles
    })))));
});
exports.Alert = Alert;
var AlertTitle = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-alert__title", props.className),
        __css: styles.title
    })));
});
exports.AlertTitle = AlertTitle;
var AlertDescription = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    var descriptionStyles = _extends({
        display: "inline"
    }, styles.description);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-alert__desc", props.className),
        __css: descriptionStyles
    })));
});
exports.AlertDescription = AlertDescription;
var AlertIcon = function AlertIcon1(props) {
    var _useAlertContext = useAlertContext(), status = _useAlertContext.status;
    var BaseIcon = STATUSES[status].icon;
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        display: "inherit"
    }, props, {
        className: _utils.cx("chakra-alert__icon", props.className),
        __css: styles.icon
    }), /*#__PURE__*/ React.createElement(BaseIcon, {
        w: "100%",
        h: "100%"
    })));
};
exports.AlertIcon = AlertIcon;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./icons":"ln5Ec"}],"ln5Ec":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.WarningIcon = exports.InfoIcon = exports.CheckIcon = void 0;
var React = _interopRequireWildcard(require("react"));
var _icon = require("@chakra-ui/icon");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var CheckIcon = function CheckIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    })));
};
exports.CheckIcon = CheckIcon;
var InfoIcon = function InfoIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    })));
};
exports.InfoIcon = InfoIcon;
var WarningIcon = function WarningIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    })));
};
exports.WarningIcon = WarningIcon;

},{"react":"3f97z","@chakra-ui/icon":"2mBZX"}],"56Gbx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _avatar = require("./avatar");
Object.keys(_avatar).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _avatar[key]) return;
    exports[key] = _avatar[key];
});
var _avatarGroup = require("./avatar-group");
Object.keys(_avatarGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _avatarGroup[key]) return;
    exports[key] = _avatarGroup[key];
});

},{"./avatar":"6G4Oe","./avatar-group":"3W1b2"}],"6G4Oe":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Avatar = exports.baseStyle = exports.AvatarBadge = void 0;
var _image = require("@chakra-ui/image");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * AvatarBadge used to show extra badge to the top-right
 * or bottom-right corner of an avatar.
 */ var AvatarBadge = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    var badgeStyles = _extends({
        position: "absolute",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        insetEnd: "0",
        bottom: "0"
    }, styles.badge);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-avatar__badge", props.className),
        __css: badgeStyles
    })));
});
exports.AvatarBadge = AvatarBadge;
if (_utils.__DEV__) AvatarBadge.displayName = "AvatarBadge";
function initials(name) {
    var _name$split = name.split(" "), firstName = _name$split[0], lastName = _name$split[1];
    return firstName && lastName ? "" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);
}
/**
 * The avatar name container
 */ var AvatarName = function AvatarName1(props) {
    var name = props.name, getInitials = props.getInitials, rest = _objectWithoutPropertiesLoose(props, [
        "name",
        "getInitials"
    ]);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        role: "img",
        "aria-label": name
    }, rest, {
        __css: styles.label
    }), name ? getInitials == null ? void 0 : getInitials(name) : null));
};
/**
 * Fallback avatar react component.
 * This should be a generic svg used to represent an avatar
 */ var DefaultIcon = function DefaultIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.svg, _extends({
        viewBox: "0 0 128 128",
        color: "#fff",
        width: "100%",
        height: "100%",
        className: "chakra-avatar__svg"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
    }), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
    })));
};
var baseStyle = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    textTransform: "uppercase",
    fontWeight: "medium",
    position: "relative",
    flexShrink: 0
};
exports.baseStyle = baseStyle;
/**
 * Avatar component that renders an user avatar with
 * support for fallback avatar and name-only avatars
 */ var Avatar = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Avatar", props);
    var _omitThemingProps = _system.omitThemingProps(props), src = _omitThemingProps.src, name = _omitThemingProps.name, showBorder = _omitThemingProps.showBorder, _omitThemingProps$bor = _omitThemingProps.borderRadius, borderRadius = _omitThemingProps$bor === void 0 ? "full" : _omitThemingProps$bor, onError = _omitThemingProps.onError, _omitThemingProps$get = _omitThemingProps.getInitials, getInitials = _omitThemingProps$get === void 0 ? initials : _omitThemingProps$get, _omitThemingProps$ico = _omitThemingProps.icon, icon = _omitThemingProps$ico === void 0 ? /*#__PURE__*/ React.createElement(DefaultIcon, null) : _omitThemingProps$ico, _omitThemingProps$ico2 = _omitThemingProps.iconLabel, iconLabel = _omitThemingProps$ico2 === void 0 ? " avatar" : _omitThemingProps$ico2, loading = _omitThemingProps.loading, children = _omitThemingProps.children, borderColor = _omitThemingProps.borderColor, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "src",
        "name",
        "showBorder",
        "borderRadius",
        "onError",
        "getInitials",
        "icon",
        "iconLabel",
        "loading",
        "children",
        "borderColor"
    ]);
    var avatarStyles = _extends({
        borderRadius: borderRadius,
        borderWidth: showBorder ? "2px" : undefined
    }, baseStyle, styles.container);
    if (borderColor) avatarStyles.borderColor = borderColor;
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref
    }, rest, {
        className: _utils.cx("chakra-avatar", props.className),
        __css: avatarStyles
    }), /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(AvatarImage, {
        src: src,
        loading: loading,
        onError: onError,
        getInitials: getInitials,
        name: name,
        borderRadius: borderRadius,
        icon: icon,
        iconLabel: iconLabel
    }), children)));
});
exports.Avatar = Avatar;
if (_utils.__DEV__) Avatar.displayName = "Avatar";
var AvatarImage = function AvatarImage1(props) {
    var src = props.src, onError = props.onError, getInitials = props.getInitials, name = props.name, borderRadius = props.borderRadius, loading = props.loading, iconLabel = props.iconLabel, _props$icon = props.icon, icon = _props$icon === void 0 ? /*#__PURE__*/ React.createElement(DefaultIcon, null) : _props$icon;
    /**
   * use the image hook to only show the image when it has loaded
   */ var status = _image.useImage({
        src: src,
        onError: onError
    });
    var hasLoaded = status === "loaded";
    /**
   * Fallback avatar applies under 2 conditions:
   * - If `src` was passed and the image has not loaded or failed to load
   * - If `src` wasn't passed
   *
   * In this case, we'll show either the name avatar or default avatar
   */ var showFallback = !src || !hasLoaded;
    if (showFallback) return name ? /*#__PURE__*/ React.createElement(AvatarName, {
        className: "chakra-avatar__initials",
        getInitials: getInitials,
        name: name
    }) : /*#__PURE__*/ React.cloneElement(icon, {
        role: "img",
        "aria-label": iconLabel
    });
    /**
   * If `src` was passed and the image has loaded, we'll show it
   */ return(/*#__PURE__*/ React.createElement(_system.chakra.img, {
        src: src,
        alt: name,
        className: "chakra-avatar__img",
        loading: loading,
        __css: {
            width: "100%",
            height: "100%",
            objectFit: "cover",
            borderRadius: borderRadius
        }
    }));
};
if (_utils.__DEV__) AvatarImage.displayName = "AvatarImage";

},{"@chakra-ui/image":"nbAL9","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"nbAL9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _image = require("./image");
Object.keys(_image).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _image[key]) return;
    exports[key] = _image[key];
});
var _useImage = require("./use-image");
Object.keys(_useImage).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useImage[key]) return;
    exports[key] = _useImage[key];
});

},{"./image":"2t7vO","./use-image":"5Xr2s"}],"2t7vO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Img = exports.Image = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useImage = require("./use-image");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var NativeImage = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var htmlWidth = props.htmlWidth, htmlHeight = props.htmlHeight, alt = props.alt, rest = _objectWithoutPropertiesLoose(props, [
        "htmlWidth",
        "htmlHeight",
        "alt"
    ]);
    return(/*#__PURE__*/ React.createElement("img", _extends({
        width: htmlWidth,
        height: htmlHeight,
        ref: ref,
        alt: alt
    }, rest)));
});
/**
 * React component that renders an image with support
 * for fallbacks
 *
 * @see Docs https://chakra-ui.com/docs/data-display/image
 */ var Image1 = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var fallbackSrc = props.fallbackSrc, fallback = props.fallback, src = props.src, align = props.align, fit = props.fit, loading = props.loading, ignoreFallback = props.ignoreFallback, crossOrigin = props.crossOrigin, rest = _objectWithoutPropertiesLoose(props, [
        "fallbackSrc",
        "fallback",
        "src",
        "align",
        "fit",
        "loading",
        "ignoreFallback",
        "crossOrigin"
    ]);
    /**
   * Defer to native `img` tag if `loading` prop is passed
   * @see https://github.com/chakra-ui/chakra-ui/issues/1027
   */ var shouldIgnore = loading != null || ignoreFallback;
    var status = _useImage.useImage(_extends({
    }, props, {
        ignoreFallback: shouldIgnore
    }));
    var shared = _extends({
        ref: ref,
        objectFit: fit,
        objectPosition: align
    }, shouldIgnore ? rest : _utils.omit(rest, [
        "onError",
        "onLoad"
    ]));
    if (status !== "loaded") {
        /**
     * If user passed a custom fallback component,
     * let's render it here.
     */ if (fallback) return fallback;
        return(/*#__PURE__*/ React.createElement(_system.chakra.img, _extends({
            as: NativeImage,
            className: "chakra-image__placeholder",
            src: fallbackSrc
        }, shared)));
    }
    return(/*#__PURE__*/ React.createElement(_system.chakra.img, _extends({
        as: NativeImage,
        src: src,
        crossOrigin: crossOrigin,
        loading: loading,
        className: "chakra-image"
    }, shared)));
});
exports.Image = Image1;
/**
 * Fallback component for most SSR users who want to use the native `img` with
 * support for chakra props
 */ var Img = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.img, _extends({
        ref: ref,
        as: NativeImage,
        className: "chakra-image"
    }, props)));
});
exports.Img = Img;
if (_utils.__DEV__) Image1.displayName = "Image";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./use-image":"5Xr2s"}],"5Xr2s":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useImage = useImage;
var _hooks = require("@chakra-ui/hooks");
var _react = require("react");
/**
 * React hook that loads an image in the browser,
 * and let's us know the `status` so we can show image
 * fallback if it is still `pending`
 *
 * @returns the status of the image loading progress
 *
 * @example
 *
 * ```jsx
 * function App(){
 *   const status = useImage({ src: "image.png" })
 *   return status === "loaded" ? <img src="image.png" /> : <Placeholder />
 * }
 * ```
 */ function useImage(props) {
    var src = props.src, srcSet = props.srcSet, onLoad = props.onLoad, onError = props.onError, crossOrigin = props.crossOrigin, sizes = props.sizes, ignoreFallback = props.ignoreFallback;
    var _useState = _react.useState("pending"), status = _useState[0], setStatus = _useState[1];
    _react.useEffect(function() {
        setStatus(src ? "loading" : "pending");
    }, [
        src
    ]);
    var imageRef = _react.useRef();
    var load = _react.useCallback(function() {
        if (!src) return;
        flush();
        var img = new Image();
        img.src = src;
        if (crossOrigin) img.crossOrigin = crossOrigin;
        if (srcSet) img.srcset = srcSet;
        if (sizes) img.sizes = sizes;
        img.onload = function(event) {
            flush();
            setStatus("loaded");
            onLoad == null || onLoad(event);
        };
        img.onerror = function(error) {
            flush();
            setStatus("failed");
            onError == null || onError(error);
        };
        imageRef.current = img;
    }, [
        src,
        crossOrigin,
        srcSet,
        sizes,
        onLoad,
        onError
    ]);
    var flush = function flush1() {
        if (imageRef.current) {
            imageRef.current.onload = null;
            imageRef.current.onerror = null;
            imageRef.current = null;
        }
    };
    _hooks.useSafeLayoutEffect(function() {
        /**
     * If user opts out of the fallback/placeholder
     * logic, let's bail out.
     */ if (ignoreFallback) return undefined;
        if (status === "loading") load();
        return function() {
            flush();
        };
    }, [
        status,
        load,
        ignoreFallback
    ]);
    /**
   * If user opts out of the fallback/placeholder
   * logic, let's just return 'loaded'
   */ return ignoreFallback ? "loaded" : status;
}

},{"@chakra-ui/hooks":"ak6Dj","react":"3f97z"}],"3W1b2":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.AvatarGroup = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _avatar = require("./avatar");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * AvatarGroup displays a number of avatars grouped together in a stack.
 */ var AvatarGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Avatar", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, borderColor = _omitThemingProps.borderColor, max = _omitThemingProps.max, _omitThemingProps$spa = _omitThemingProps.spacing, spacing = _omitThemingProps$spa === void 0 ? "-0.75rem" : _omitThemingProps$spa, _omitThemingProps$bor = _omitThemingProps.borderRadius, borderRadius = _omitThemingProps$bor === void 0 ? "full" : _omitThemingProps$bor, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children",
        "borderColor",
        "max",
        "spacing",
        "borderRadius"
    ]);
    var validChildren = _reactUtils.getValidChildren(children);
    /**
   * get the avatars within the max
   */ var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;
    /**
   * get the remaining avatar count
   */ var excess = max != null && validChildren.length - max;
    /**
   * Reversing the children is a great way to avoid using zIndex
   * to overlap the avatars
   */ var reversedChildren = childrenWithinMax.reverse();
    var clones = reversedChildren.map(function(child, index) {
        var _child$props$borderCo;
        var isFirstAvatar = index === 0;
        var childProps = {
            marginEnd: isFirstAvatar ? 0 : spacing,
            size: props.size,
            borderColor: (_child$props$borderCo = child.props.borderColor) != null ? _child$props$borderCo : borderColor,
            showBorder: true
        };
        return(/*#__PURE__*/ React.cloneElement(child, _utils.filterUndefined(childProps)));
    });
    var groupStyles = {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        flexDirection: "row-reverse"
    };
    var excessStyles = _extends({
        borderRadius: borderRadius,
        marginStart: spacing
    }, _avatar.baseStyle, styles.excessLabel);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        role: "group",
        __css: groupStyles
    }, rest, {
        className: _utils.cx("chakra-avatar__group", props.className)
    }), excess > 0 && /*#__PURE__*/ React.createElement(_system.chakra.span, {
        className: "chakra-avatar__excess",
        __css: excessStyles
    }, "+" + excess), clones));
});
exports.AvatarGroup = AvatarGroup;
if (_utils.__DEV__) AvatarGroup.displayName = "AvatarGroup";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./avatar":"6G4Oe"}],"4FIWE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _breadcrumb = require("./breadcrumb");
Object.keys(_breadcrumb).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _breadcrumb[key]) return;
    exports[key] = _breadcrumb[key];
});

},{"./breadcrumb":"1dVWh"}],"1dVWh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Breadcrumb = exports.BreadcrumbItem = exports.BreadcrumbLink = exports.BreadcrumbSeparator = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component that separates each breadcrumb link
 */ var BreadcrumbSeparator = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var spacing = props.spacing, rest = _objectWithoutPropertiesLoose(props, [
        "spacing"
    ]);
    var styles = _system.useStyles();
    var separatorStyles = _extends({
        mx: spacing
    }, styles.separator);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref,
        role: "presentation"
    }, rest, {
        __css: separatorStyles
    })));
});
exports.BreadcrumbSeparator = BreadcrumbSeparator;
if (_utils.__DEV__) BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
/**
 * Breadcrumb link.
 *
 * It renders a `span` when it matches the current link. Otherwise,
 * it renders an anchor tag.
 */ var BreadcrumbLink = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var isCurrentPage = props.isCurrentPage, as = props.as, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "isCurrentPage",
        "as",
        "className"
    ]);
    var styles = _system.useStyles();
    var sharedProps = _extends({
        ref: ref,
        as: as,
        className: _utils.cx("chakra-breadcrumb__link", className)
    }, rest);
    if (isCurrentPage) return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        "aria-current": "page",
        __css: styles.link
    }, sharedProps)));
    return(/*#__PURE__*/ React.createElement(_system.chakra.a, _extends({
        __css: styles.link
    }, sharedProps)));
});
exports.BreadcrumbLink = BreadcrumbLink;
if (_utils.__DEV__) BreadcrumbLink.displayName = "BreadcrumbLink";
/**
 * BreadcrumbItem is used to group a breadcrumb link.
 * It renders a `li` element to denote it belongs to an order list of links.
 *
 * @see Docs https://chakra-ui.com/docs/components/breadcrumbs
 */ var BreadcrumbItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var isCurrentPage = props.isCurrentPage, separator = props.separator, isLastChild = props.isLastChild, spacing = props.spacing, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "isCurrentPage",
        "separator",
        "isLastChild",
        "spacing",
        "children",
        "className"
    ]);
    var validChildren = _reactUtils.getValidChildren(children);
    var clones = validChildren.map(function(child) {
        if (child.type === BreadcrumbLink) return(/*#__PURE__*/ React.cloneElement(child, {
            isCurrentPage: isCurrentPage
        }));
        if (child.type === BreadcrumbSeparator) return(/*#__PURE__*/ React.cloneElement(child, {
            spacing: spacing,
            children: child.props.children || separator
        }));
        return child;
    });
    var styles = _system.useStyles();
    var itemStyles = _extends({
        display: "inline-flex",
        alignItems: "center"
    }, styles.item);
    var _className = _utils.cx("chakra-breadcrumb__list-item", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.li, _extends({
        ref: ref,
        className: _className
    }, rest, {
        __css: itemStyles
    }), clones, !isLastChild && /*#__PURE__*/ React.createElement(BreadcrumbSeparator, {
        spacing: spacing
    }, separator)));
});
exports.BreadcrumbItem = BreadcrumbItem;
if (_utils.__DEV__) BreadcrumbItem.displayName = "BreadcrumbItem";
/**
 * Breadcrumb is used to render a breadcrumb navigation landmark.
 * It renders a `nav` element with `aria-label` set to `Breadcrumb`
 *
 * @see Docs https://chakra-ui.com/docs/components/breadcrumbs
 */ var Breadcrumb = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Breadcrumb", props);
    var ownProps = _system.omitThemingProps(props);
    var children = ownProps.children, _ownProps$spacing = ownProps.spacing, spacing = _ownProps$spacing === void 0 ? "0.5rem" : _ownProps$spacing, _ownProps$separator = ownProps.separator, separator = _ownProps$separator === void 0 ? "/" : _ownProps$separator, className = ownProps.className, rest = _objectWithoutPropertiesLoose(ownProps, [
        "children",
        "spacing",
        "separator",
        "className"
    ]);
    var validChildren = _reactUtils.getValidChildren(children);
    var count = validChildren.length;
    var clones = validChildren.map(function(child, index) {
        return(/*#__PURE__*/ React.cloneElement(child, {
            separator: separator,
            spacing: spacing,
            isLastChild: count === index + 1
        }));
    });
    var _className = _utils.cx("chakra-breadcrumb", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.nav, _extends({
        ref: ref,
        "aria-label": "breadcrumb",
        className: _className,
        __css: styles.container
    }, rest), /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.ol, {
        className: "chakra-breadcrumb__list"
    }, clones))));
});
exports.Breadcrumb = Breadcrumb;
if (_utils.__DEV__) Breadcrumb.displayName = "Breadcrumb";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"1HRR5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _button = require("./button");
Object.keys(_button).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _button[key]) return;
    exports[key] = _button[key];
});
var _buttonGroup = require("./button-group");
Object.keys(_buttonGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _buttonGroup[key]) return;
    exports[key] = _buttonGroup[key];
});
var _iconButton = require("./icon-button");
Object.keys(_iconButton).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _iconButton[key]) return;
    exports[key] = _iconButton[key];
});

},{"./button":"mPgzX","./button-group":"5zxIg","./icon-button":"21Rgo"}],"mPgzX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Button = void 0;
var _reactUtils = require("@chakra-ui/react-utils");
var _spinner = require("@chakra-ui/spinner");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _buttonGroup = require("./button-group");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var Button = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _styles$_focus;
    var group = _buttonGroup.useButtonGroup();
    var styles = _system.useStyleConfig("Button", _extends({
    }, group, props));
    var _omitThemingProps = _system.omitThemingProps(props), _omitThemingProps$isD = _omitThemingProps.isDisabled, isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD, isLoading = _omitThemingProps.isLoading, isActive = _omitThemingProps.isActive, isFullWidth = _omitThemingProps.isFullWidth, children = _omitThemingProps.children, leftIcon = _omitThemingProps.leftIcon, rightIcon = _omitThemingProps.rightIcon, loadingText = _omitThemingProps.loadingText, _omitThemingProps$ico = _omitThemingProps.iconSpacing, iconSpacing = _omitThemingProps$ico === void 0 ? "0.5rem" : _omitThemingProps$ico, type = _omitThemingProps.type, spinner = _omitThemingProps.spinner, _omitThemingProps$spi = _omitThemingProps.spinnerPlacement, spinnerPlacement = _omitThemingProps$spi === void 0 ? "start" : _omitThemingProps$spi, className = _omitThemingProps.className, as = _omitThemingProps.as, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "isDisabled",
        "isLoading",
        "isActive",
        "isFullWidth",
        "children",
        "leftIcon",
        "rightIcon",
        "loadingText",
        "iconSpacing",
        "type",
        "spinner",
        "spinnerPlacement",
        "className",
        "as"
    ]);
    /**
   * When button is used within ButtonGroup (i.e flushed with sibling buttons),
   * it is important to add a `zIndex` on focus.
   *
   * So let's read the component styles and then add `zIndex` to it.
   */ var _focus = _utils.mergeWith({
    }, (_styles$_focus = styles == null ? void 0 : styles["_focus"]) != null ? _styles$_focus : {
    }, {
        zIndex: 1
    });
    var buttonStyles = _extends({
        display: "inline-flex",
        appearance: "none",
        alignItems: "center",
        justifyContent: "center",
        transition: "all 250ms",
        userSelect: "none",
        position: "relative",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        outline: "none",
        width: isFullWidth ? "100%" : "auto"
    }, styles, !!group && {
        _focus: _focus
    });
    var _React$useState = React.useState(!as), isButton = _React$useState[0], setIsButton = _React$useState[1];
    var refCallback = React.useCallback(function(node) {
        if (!node) return;
        setIsButton(node.tagName === "BUTTON");
    }, []);
    var defaultType = isButton ? "button" : undefined;
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
        disabled: isDisabled || isLoading,
        ref: _reactUtils.mergeRefs(ref, refCallback),
        as: as,
        type: type != null ? type : defaultType,
        "data-active": _utils.dataAttr(isActive),
        "data-loading": _utils.dataAttr(isLoading),
        __css: buttonStyles,
        className: _utils.cx("chakra-button", className)
    }, rest), leftIcon && !isLoading && /*#__PURE__*/ React.createElement(ButtonIcon, {
        marginEnd: iconSpacing
    }, leftIcon), isLoading && spinnerPlacement === "start" && /*#__PURE__*/ React.createElement(ButtonSpinner, {
        label: loadingText,
        placement: "start"
    }, spinner), isLoading ? loadingText || /*#__PURE__*/ React.createElement(_system.chakra.span, {
        opacity: 0
    }, children) : children, isLoading && spinnerPlacement === "end" && /*#__PURE__*/ React.createElement(ButtonSpinner, {
        label: loadingText,
        placement: "end"
    }, spinner), rightIcon && !isLoading && /*#__PURE__*/ React.createElement(ButtonIcon, {
        marginStart: iconSpacing
    }, rightIcon)));
});
exports.Button = Button;
if (_utils.__DEV__) Button.displayName = "Button";
var ButtonIcon = function ButtonIcon1(props) {
    var children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "children",
        "className"
    ]);
    var _children = /*#__PURE__*/ React.isValidElement(children) ? /*#__PURE__*/ React.cloneElement(children, {
        "aria-hidden": true,
        focusable: false
    }) : children;
    var _className = _utils.cx("chakra-button__icon", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        display: "inline-flex",
        alignSelf: "center",
        flexShrink: 0
    }, rest, {
        className: _className
    }), _children));
};
if (_utils.__DEV__) ButtonIcon.displayName = "ButtonIcon";
var ButtonSpinner = function ButtonSpinner1(props) {
    var _extends2;
    var label = props.label, placement = props.placement, spacing = props.spacing, _props$children = props.children, children = _props$children === void 0 ? /*#__PURE__*/ React.createElement(_spinner.Spinner, {
        color: "currentColor",
        width: "1em",
        height: "1em"
    }) : _props$children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose(props, [
        "label",
        "placement",
        "spacing",
        "children",
        "className",
        "__css"
    ]);
    var _className = _utils.cx("chakra-button__spinner", className);
    var marginProp = placement === "start" ? "marginEnd" : "marginStart";
    var spinnerStyles = _extends((_extends2 = {
        display: "flex",
        alignItems: "center",
        position: label ? "relative" : "absolute"
    }, _extends2[marginProp] = label ? "0.5rem" : 0, _extends2.fontSize = "1em", _extends2.lineHeight = "normal", _extends2), __css);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _className
    }, rest, {
        __css: spinnerStyles
    }), children));
};
if (_utils.__DEV__) ButtonSpinner.displayName = "ButtonSpinner";

},{"@chakra-ui/react-utils":"5UBnZ","@chakra-ui/spinner":"6DuUT","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./button-group":"5zxIg"}],"6DuUT":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _spinner = require("./spinner");
Object.keys(_spinner).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _spinner[key]) return;
    exports[key] = _spinner[key];
});

},{"./spinner":"61pRR"}],"61pRR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Spinner = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var spin = _system.keyframes({
    "0%": {
        transform: "rotate(0deg)"
    },
    "100%": {
        transform: "rotate(360deg)"
    }
});
/**
 * Spinner is used to indicate the loading state of a page or a component,
 * It renders a `div` by default.
 *
 * @see Docs https://chakra-ui.com/docs/feedback/spinner
 */ var Spinner = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Spinner", props);
    var _omitThemingProps = _system.omitThemingProps(props), _omitThemingProps$lab = _omitThemingProps.label, label = _omitThemingProps$lab === void 0 ? "Loading..." : _omitThemingProps$lab, _omitThemingProps$thi = _omitThemingProps.thickness, thickness = _omitThemingProps$thi === void 0 ? "2px" : _omitThemingProps$thi, _omitThemingProps$spe = _omitThemingProps.speed, speed = _omitThemingProps$spe === void 0 ? "0.45s" : _omitThemingProps$spe, _omitThemingProps$emp = _omitThemingProps.emptyColor, emptyColor = _omitThemingProps$emp === void 0 ? "transparent" : _omitThemingProps$emp, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "label",
        "thickness",
        "speed",
        "emptyColor",
        "className"
    ]);
    var _className = _utils.cx("chakra-spinner", className);
    var spinnerStyles = _extends({
        display: "inline-block",
        borderColor: "currentColor",
        borderStyle: "solid",
        borderRadius: "99999px",
        borderWidth: thickness,
        borderBottomColor: emptyColor,
        borderLeftColor: emptyColor,
        animation: spin + " " + speed + " linear infinite"
    }, styles);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        __css: spinnerStyles,
        className: _className
    }, rest), label && /*#__PURE__*/ React.createElement(_visuallyHidden.VisuallyHidden, null, label)));
});
exports.Spinner = Spinner;
if (_utils.__DEV__) Spinner.displayName = "Spinner";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/visually-hidden":"77YGo","react":"3f97z"}],"77YGo":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
};
exports["default"] = void 0;
var _visuallyHidden = _interopRequireWildcard(require("./visually-hidden"));
exports["default"] = _visuallyHidden["default"];
Object.keys(_visuallyHidden).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _visuallyHidden[key]) return;
    exports[key] = _visuallyHidden[key];
});
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}

},{"./visually-hidden":"3IRzz"}],"3IRzz":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.VisuallyHiddenInput = exports.VisuallyHidden = exports.visuallyHiddenStyle = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
/**
 * Styles to visually hide an element
 * but make it accessible to screen-readers
 */ var visuallyHiddenStyle = {
    border: "0px",
    clip: "rect(0px, 0px, 0px, 0px)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
};
/**
 * Visually hidden component used to hide
 * elements on screen
 */ exports.visuallyHiddenStyle = visuallyHiddenStyle;
var VisuallyHidden = _system.chakra("span", {
    baseStyle: visuallyHiddenStyle
});
exports.VisuallyHidden = VisuallyHidden;
if (_utils.__DEV__) VisuallyHidden.displayName = "VisuallyHidden";
/**
 * Visually hidden input component for designing
 * custom input components using the html `input`
 * as a proxy
 */ var VisuallyHiddenInput = _system.chakra("input", {
    baseStyle: visuallyHiddenStyle
});
exports.VisuallyHiddenInput = VisuallyHiddenInput;
if (_utils.__DEV__) VisuallyHiddenInput.displayName = "VisuallyHiddenInput";
var _default = VisuallyHidden;
exports["default"] = _default;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O"}],"5zxIg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ButtonGroup = exports.useButtonGroup = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    strict: false,
    name: "ButtonGroupContext"
}), ButtonGroupProvider = _createContext[0], useButtonGroup = _createContext[1];
exports.useButtonGroup = useButtonGroup;
var ButtonGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var size = props.size, colorScheme = props.colorScheme, variant = props.variant, className = props.className, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, isAttached = props.isAttached, isDisabled = props.isDisabled, rest = _objectWithoutPropertiesLoose(props, [
        "size",
        "colorScheme",
        "variant",
        "className",
        "spacing",
        "isAttached",
        "isDisabled"
    ]);
    var _className = _utils.cx("chakra-button__group", className);
    var context = React.useMemo(function() {
        return {
            size: size,
            colorScheme: colorScheme,
            variant: variant,
            isDisabled: isDisabled
        };
    }, [
        size,
        colorScheme,
        variant,
        isDisabled
    ]);
    var groupStyles = {
        display: "inline-flex"
    };
    if (isAttached) groupStyles = _extends({
    }, groupStyles, {
        "> *:first-of-type:not(:last-of-type)": {
            borderEndRadius: 0
        },
        "> *:not(:first-of-type):not(:last-of-type)": {
            borderRadius: 0
        },
        "> *:not(:first-of-type):last-of-type": {
            borderStartRadius: 0
        }
    });
    else groupStyles = _extends({
    }, groupStyles, {
        "& > *:not(style) ~ *:not(style)": {
            marginStart: spacing
        }
    });
    return(/*#__PURE__*/ React.createElement(ButtonGroupProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        role: "group",
        __css: groupStyles,
        className: _className
    }, rest))));
});
exports.ButtonGroup = ButtonGroup;
if (_utils.__DEV__) ButtonGroup.displayName = "ButtonGroup";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"21Rgo":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.IconButton = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _button = require("./button");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var IconButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var icon = props.icon, children = props.children, isRound = props.isRound, ariaLabel = props["aria-label"], rest = _objectWithoutPropertiesLoose(props, [
        "icon",
        "children",
        "isRound",
        "aria-label"
    ]);
    /**
   * Passing the icon as prop or children should work
   */ var element = icon || children;
    var _children = /*#__PURE__*/ React.isValidElement(element) ? /*#__PURE__*/ React.cloneElement(element, {
        "aria-hidden": true,
        focusable: false
    }) : null;
    return(/*#__PURE__*/ React.createElement(_button.Button, _extends({
        padding: "0",
        borderRadius: isRound ? "full" : "md",
        ref: ref,
        "aria-label": ariaLabel
    }, rest), _children));
});
exports.IconButton = IconButton;
if (_utils.__DEV__) IconButton.displayName = "IconButton";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./button":"mPgzX"}],"4bxfc":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _checkboxGroup = require("./checkbox-group");
Object.keys(_checkboxGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _checkboxGroup[key]) return;
    exports[key] = _checkboxGroup[key];
});
var _checkbox = require("./checkbox");
Object.keys(_checkbox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _checkbox[key]) return;
    exports[key] = _checkbox[key];
});
var _useCheckbox = require("./use-checkbox");
Object.keys(_useCheckbox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useCheckbox[key]) return;
    exports[key] = _useCheckbox[key];
});
var _useCheckboxGroup = require("./use-checkbox-group");
Object.keys(_useCheckboxGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useCheckboxGroup[key]) return;
    exports[key] = _useCheckboxGroup[key];
});

},{"./checkbox-group":"1NaNH","./checkbox":"7kHmn","./use-checkbox":"4Fqgs","./use-checkbox-group":"6eO0x"}],"1NaNH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.CheckboxGroup = exports.useCheckboxGroupContext = void 0;
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useCheckboxGroup2 = require("./use-checkbox-group");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var _createContext = _reactUtils.createContext({
    name: "CheckboxGroupContext",
    strict: false
}), CheckboxGroupProvider = _createContext[0], useCheckboxGroupContext = _createContext[1];
exports.useCheckboxGroupContext = useCheckboxGroupContext;
/**
 * Used for multiple checkboxes which are bound in one group,
 * and it indicates whether one or more options are selected.
 *
 * @see Docs https://chakra-ui.com/docs/form/checkbox
 */ var CheckboxGroup = function CheckboxGroup1(props) {
    var colorScheme = props.colorScheme, size = props.size, variant = props.variant, children = props.children, isDisabled = props.isDisabled;
    var _useCheckboxGroup = _useCheckboxGroup2.useCheckboxGroup(props), value = _useCheckboxGroup.value, onChange = _useCheckboxGroup.onChange;
    var group = React.useMemo(function() {
        return {
            size: size,
            onChange: onChange,
            colorScheme: colorScheme,
            value: value,
            variant: variant,
            isDisabled: isDisabled
        };
    }, [
        size,
        onChange,
        colorScheme,
        value,
        variant,
        isDisabled
    ]);
    return(/*#__PURE__*/ React.createElement(CheckboxGroupProvider, {
        value: group
    }, children));
};
exports.CheckboxGroup = CheckboxGroup;
if (_utils.__DEV__) CheckboxGroup.displayName = "CheckboxGroup";

},{"@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-checkbox-group":"6eO0x"}],"6eO0x":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useCheckboxGroup = useCheckboxGroup;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * React hook that provides all the state management logic
 * for a group of checkboxes.
 *
 * It is consumed by the `CheckboxGroup` component
 */ function useCheckboxGroup(props) {
    if (props === void 0) props = {
    };
    var _props = props, defaultValue = _props.defaultValue, valueProp = _props.value, onChange = _props.onChange, isDisabled = _props.isDisabled, isNative = _props.isNative;
    var onChangeProp = _hooks.useCallbackRef(onChange);
    var _useControllableState = _hooks.useControllableState({
        value: valueProp,
        defaultValue: defaultValue || [],
        onChange: onChangeProp
    }), value = _useControllableState[0], setValue = _useControllableState[1];
    var handleChange = _react.useCallback(function(eventOrValue) {
        if (!value) return;
        var isChecked = _utils.isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
        var selectedValue = _utils.isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
        var nextValue = isChecked ? _utils.addItem(value, selectedValue) : _utils.removeItem(value, selectedValue);
        setValue(nextValue);
    }, [
        setValue,
        value
    ]);
    var getCheckboxProps = _react.useCallback(function(props1) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        var checkedKey = isNative ? "checked" : "isChecked";
        return _extends({
        }, props1, (_extends2 = {
        }, _extends2[checkedKey] = value.includes(props1.value), _extends2.onChange = handleChange, _extends2));
    }, [
        handleChange,
        isNative,
        value
    ]);
    return {
        value: value,
        isDisabled: isDisabled,
        onChange: handleChange,
        setValue: setValue,
        getCheckboxProps: getCheckboxProps
    };
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","react":"3f97z"}],"7kHmn":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Checkbox = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _checkboxGroup = require("./checkbox-group");
var _checkboxIcon = require("./checkbox-icon");
var _useCheckbox2 = require("./use-checkbox");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var CheckboxControl = _system.chakra("span", {
    baseStyle: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        verticalAlign: "top",
        userSelect: "none",
        flexShrink: 0
    }
});
var Label = _system.chakra("label", {
    baseStyle: {
        cursor: "pointer",
        display: "inline-flex",
        alignItems: "center",
        verticalAlign: "top",
        position: "relative",
        _disabled: {
            cursor: "not-allowed"
        }
    }
});
/**
 * Checkbox
 *
 * React component used in forms when a user needs to select
 * multiple values from several options.
 *
 * @see Docs https://chakra-ui.com/docs/form/checkbox
 */ var Checkbox = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var group = _checkboxGroup.useCheckboxGroupContext();
    var mergedProps = _extends({
    }, group, props);
    var styles = _system.useMultiStyleConfig("Checkbox", mergedProps);
    var ownProps = _system.omitThemingProps(props);
    var _ownProps$spacing = ownProps.spacing, spacing = _ownProps$spacing === void 0 ? "0.5rem" : _ownProps$spacing, className = ownProps.className, children = ownProps.children, iconColor = ownProps.iconColor, iconSize = ownProps.iconSize, _ownProps$icon = ownProps.icon, icon = _ownProps$icon === void 0 ? /*#__PURE__*/ React.createElement(_checkboxIcon.CheckboxIcon, null) : _ownProps$icon, isCheckedProp = ownProps.isChecked, _ownProps$isDisabled = ownProps.isDisabled, isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled, onChangeProp = ownProps.onChange, rest = _objectWithoutPropertiesLoose(ownProps, [
        "spacing",
        "className",
        "children",
        "iconColor",
        "iconSize",
        "icon",
        "isChecked",
        "isDisabled",
        "onChange"
    ]);
    var isChecked = isCheckedProp;
    if (group != null && group.value && ownProps.value) isChecked = group.value.includes(ownProps.value);
    var onChange = onChangeProp;
    if (group != null && group.onChange && ownProps.value) onChange = _utils.callAll(group.onChange, onChangeProp);
    var _useCheckbox = _useCheckbox2.useCheckbox(_extends({
    }, rest, {
        isDisabled: isDisabled,
        isChecked: isChecked,
        onChange: onChange
    })), state = _useCheckbox.state, getInputProps = _useCheckbox.getInputProps, getCheckboxProps = _useCheckbox.getCheckboxProps, getLabelProps = _useCheckbox.getLabelProps, getRootProps = _useCheckbox.getRootProps;
    var iconStyles = React.useMemo(function() {
        return _extends({
            opacity: state.isChecked || state.isIndeterminate ? 1 : 0,
            transform: state.isChecked || state.isIndeterminate ? "scale(1)" : "scale(0.95)",
            transition: "transform 200ms",
            fontSize: iconSize,
            color: iconColor
        }, styles.icon);
    }, [
        iconColor,
        iconSize,
        state.isChecked,
        state.isIndeterminate,
        styles.icon
    ]);
    var clonedIcon = /*#__PURE__*/ React.cloneElement(icon, {
        __css: iconStyles,
        isIndeterminate: state.isIndeterminate,
        isChecked: state.isChecked
    });
    return(/*#__PURE__*/ React.createElement(Label, _extends({
        __css: styles.container,
        className: _utils.cx("chakra-checkbox", className)
    }, getRootProps()), /*#__PURE__*/ React.createElement("input", _extends({
        className: "chakra-checkbox__input"
    }, getInputProps({
    }, ref))), /*#__PURE__*/ React.createElement(CheckboxControl, _extends({
        __css: styles.control,
        className: "chakra-checkbox__control"
    }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        className: "chakra-checkbox__label"
    }, getLabelProps(), {
        __css: _extends({
            marginStart: spacing
        }, styles.label)
    }), children)));
});
exports.Checkbox = Checkbox;
if (_utils.__DEV__) Checkbox.displayName = "Checkbox";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./checkbox-group":"1NaNH","./checkbox-icon":"3hbI3","./use-checkbox":"4Fqgs"}],"3hbI3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.CheckboxIcon = void 0;
var _system = require("@chakra-ui/system");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
// @future: only call `motion(chakra.svg)` when we drop framer-motion v3 support
var MotionSvg = "custom" in _framerMotion.motion ? _framerMotion.motion.custom(_system.chakra.svg) : _framerMotion.motion(_system.chakra.svg);
var CheckIcon = function CheckIcon1(props) {
    return(/*#__PURE__*/ React.createElement(MotionSvg, _extends({
        width: "1.2em",
        viewBox: "0 0 12 10",
        variants: {
            unchecked: {
                opacity: 0,
                strokeDashoffset: 16
            },
            checked: {
                opacity: 1,
                strokeDashoffset: 0,
                transition: {
                    duration: 0.2
                }
            }
        },
        style: {
            fill: "none",
            strokeWidth: 2,
            stroke: "currentColor",
            strokeDasharray: 16
        }
    }, props), /*#__PURE__*/ React.createElement("polyline", {
        points: "1.5 6 4.5 9 10.5 1"
    })));
};
var IndeterminateIcon = function IndeterminateIcon1(props) {
    return(/*#__PURE__*/ React.createElement(MotionSvg, _extends({
        width: "1.2em",
        viewBox: "0 0 24 24",
        variants: {
            unchecked: {
                scaleX: 0.65,
                opacity: 0
            },
            checked: {
                scaleX: 1,
                opacity: 1,
                transition: {
                    scaleX: {
                        duration: 0
                    },
                    opacity: {
                        duration: 0.02
                    }
                }
            }
        },
        style: {
            stroke: "currentColor",
            strokeWidth: 4
        }
    }, props), /*#__PURE__*/ React.createElement("line", {
        x1: "21",
        x2: "3",
        y1: "12",
        y2: "12"
    })));
};
var CheckboxTransition = function CheckboxTransition1(_ref) {
    var open = _ref.open, children = _ref.children;
    return(/*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
        initial: false
    }, open && /*#__PURE__*/ React.createElement(_framerMotion.motion.div, {
        variants: {
            unchecked: {
                scale: 0.5
            },
            checked: {
                scale: 1
            }
        },
        initial: "unchecked",
        animate: "checked",
        exit: "unchecked",
        style: {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            height: "100%"
        }
    }, children)));
};
/**
 * CheckboxIcon is used to visually indicate the checked or indeterminate
 * state of a checkbox.
 *
 * @todo allow users pass their own icon svgs
 */ var CheckboxIcon = function CheckboxIcon1(props) {
    var isIndeterminate = props.isIndeterminate, isChecked = props.isChecked, rest = _objectWithoutPropertiesLoose(props, [
        "isIndeterminate",
        "isChecked"
    ]);
    var IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon;
    return(/*#__PURE__*/ React.createElement(CheckboxTransition, {
        open: isChecked || isIndeterminate
    }, /*#__PURE__*/ React.createElement(IconEl, rest)));
};
exports.CheckboxIcon = CheckboxIcon;

},{"@chakra-ui/system":"4QBuE","framer-motion":"5ufJB","react":"3f97z"}],"4Fqgs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useCheckbox = useCheckbox;
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * useCheckbox that provides all the state and focus management logic
 * for a checkbox. It is consumed by the `Checkbox` component
 *
 * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks
 */ function useCheckbox(props) {
    if (props === void 0) props = {
    };
    var _props = props, defaultIsChecked = _props.defaultIsChecked, _props$defaultChecked = _props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked, checkedProp = _props.isChecked, isFocusable = _props.isFocusable, isDisabled = _props.isDisabled, isReadOnly = _props.isReadOnly, isRequired = _props.isRequired, onChange = _props.onChange, isIndeterminate = _props.isIndeterminate, isInvalid = _props.isInvalid, name = _props.name, value = _props.value, id = _props.id, onBlur = _props.onBlur, onFocus = _props.onFocus, ariaLabel = _props["aria-label"], ariaLabelledBy = _props["aria-labelledby"], ariaInvalid = _props["aria-invalid"], ariaDescribedBy = _props["aria-describedby"], htmlProps = _objectWithoutPropertiesLoose(_props, [
        "defaultIsChecked",
        "defaultChecked",
        "isChecked",
        "isFocusable",
        "isDisabled",
        "isReadOnly",
        "isRequired",
        "onChange",
        "isIndeterminate",
        "isInvalid",
        "name",
        "value",
        "id",
        "onBlur",
        "onFocus",
        "aria-label",
        "aria-labelledby",
        "aria-invalid",
        "aria-describedby"
    ]);
    var onChangeProp = _hooks.useCallbackRef(onChange);
    var onBlurProp = _hooks.useCallbackRef(onBlur);
    var onFocusProp = _hooks.useCallbackRef(onFocus);
    var _useBoolean = _hooks.useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
    var _useBoolean2 = _hooks.useBoolean(), isHovered = _useBoolean2[0], setHovered = _useBoolean2[1];
    var _useBoolean3 = _hooks.useBoolean(), isActive = _useBoolean3[0], setActive = _useBoolean3[1];
    var inputRef = _react.useRef(null);
    var _useState = _react.useState(true), rootIsLabelElement = _useState[0], setRootIsLabelElement = _useState[1];
    var _useState2 = _react.useState(!!defaultChecked), checkedState = _useState2[0], setCheckedState = _useState2[1];
    var _useControllableProp = _hooks.useControllableProp(checkedProp, checkedState), isControlled = _useControllableProp[0], isChecked = _useControllableProp[1];
    _utils.warn({
        condition: !!defaultIsChecked,
        message: "The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior."
    });
    var handleChange = _react.useCallback(function(event) {
        if (isReadOnly || isDisabled) {
            event.preventDefault();
            return;
        }
        if (!isControlled) {
            if (isChecked) setCheckedState(event.target.checked);
            else setCheckedState(isIndeterminate ? true : event.target.checked);
        }
        onChangeProp == null || onChangeProp(event);
    }, [
        isReadOnly,
        isDisabled,
        isChecked,
        isControlled,
        isIndeterminate,
        onChangeProp
    ]);
    _hooks.useSafeLayoutEffect(function() {
        if (inputRef.current) inputRef.current.indeterminate = Boolean(isIndeterminate);
    }, [
        isIndeterminate
    ]);
    var trulyDisabled = isDisabled && !isFocusable;
    var onKeyDown = _react.useCallback(function(event) {
        if (event.key === " ") setActive.on();
    }, [
        setActive
    ]);
    var onKeyUp = _react.useCallback(function(event) {
        if (event.key === " ") setActive.off();
    }, [
        setActive
    ]);
    /**
   * Sync state with uncontrolled form libraries like `react-hook-form`.
   *
   * These libraries set the checked value for input fields
   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.
   *
   * This means the `isChecked` state will get out of sync with `ref.current.checked`,
   * even though the input validation with work, the UI will not be up to date.
   *
   * Let's correct that by checking and syncing the state accordingly.
   */ _hooks.useSafeLayoutEffect(function() {
        if (!inputRef.current) return;
        var notInSync = inputRef.current.checked !== isChecked;
        if (notInSync) setCheckedState(inputRef.current.checked);
    }, [
        inputRef.current
    ]);
    var getCheckboxProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        var onPressDown = function onPressDown1(event) {
            // On mousedown, the input blurs and returns focus to the `body`,
            // we need to prevent this. Native checkboxes keeps focus on `input`
            event.preventDefault();
            setActive.on();
        };
        return _extends({
        }, props1, {
            ref: forwardedRef,
            "data-active": _utils.dataAttr(isActive),
            "data-hover": _utils.dataAttr(isHovered),
            "data-checked": _utils.dataAttr(isChecked),
            "data-focus": _utils.dataAttr(isFocused),
            "data-indeterminate": _utils.dataAttr(isIndeterminate),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(isInvalid),
            "data-readonly": _utils.dataAttr(isReadOnly),
            "aria-hidden": true,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, onPressDown),
            onMouseUp: _utils.callAllHandlers(props1.onMouseUp, setActive.off),
            onMouseEnter: _utils.callAllHandlers(props1.onMouseEnter, setHovered.on),
            onMouseLeave: _utils.callAllHandlers(props1.onMouseLeave, setHovered.off)
        });
    }, [
        isActive,
        isChecked,
        isDisabled,
        isFocused,
        isHovered,
        isIndeterminate,
        isInvalid,
        isReadOnly,
        setActive,
        setHovered.off,
        setHovered.on
    ]);
    var getRootProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, htmlProps, props1, {
            ref: _reactUtils.mergeRefs(forwardedRef, function(node) {
                if (!node) return;
                setRootIsLabelElement(node.tagName === "LABEL");
            }),
            onClick: _utils.callAllHandlers(props1.onClick, function() {
                /**
         * Accessibility:
         *
         * Ideally, `getRootProps` should be spread unto a `label` element.
         *
         * If the element was changed using the `as` prop or changing
         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger
         * click on the input when the element is clicked.
         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480
         */ if (!rootIsLabelElement) {
                    var _inputRef$current;
                    (_inputRef$current = inputRef.current) == null || _inputRef$current.click();
                    _utils.focus(inputRef.current, {
                        nextTick: true
                    });
                }
            }),
            "data-disabled": _utils.dataAttr(isDisabled)
        });
    }, [
        htmlProps,
        isDisabled,
        rootIsLabelElement
    ]);
    var getInputProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        var onFocus1 = function onFocus2() {
            _utils.scheduleMicrotask(setFocused.on);
        };
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(inputRef, forwardedRef),
            type: "checkbox",
            name: name,
            value: value,
            id: id,
            onChange: _utils.callAllHandlers(props1.onChange, handleChange),
            onBlur: _utils.callAllHandlers(props1.onBlur, onBlurProp, setFocused.off),
            onFocus: _utils.callAllHandlers(props1.onFocus, onFocusProp, onFocus1),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onKeyUp: _utils.callAllHandlers(props1.onKeyUp, onKeyUp),
            required: isRequired,
            checked: isChecked,
            disabled: trulyDisabled,
            readOnly: isReadOnly,
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
            "aria-describedby": ariaDescribedBy,
            "aria-disabled": isDisabled,
            style: _visuallyHidden.visuallyHiddenStyle
        });
    }, [
        name,
        value,
        id,
        handleChange,
        setFocused.off,
        setFocused.on,
        onBlurProp,
        onFocusProp,
        onKeyDown,
        onKeyUp,
        isRequired,
        isChecked,
        trulyDisabled,
        isReadOnly,
        ariaLabel,
        ariaLabelledBy,
        ariaInvalid,
        isInvalid,
        ariaDescribedBy,
        isDisabled
    ]);
    var getLabelProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, {
            ref: forwardedRef,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, stopEvent),
            onTouchStart: _utils.callAllHandlers(props1.onTouchStart, stopEvent),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-checked": _utils.dataAttr(isChecked),
            "data-invalid": _utils.dataAttr(isInvalid)
        });
    }, [
        isChecked,
        isDisabled,
        isInvalid
    ]);
    return {
        state: {
            isInvalid: isInvalid,
            isFocused: isFocused,
            isChecked: isChecked,
            isActive: isActive,
            isHovered: isHovered,
            isIndeterminate: isIndeterminate,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired
        },
        getRootProps: getRootProps,
        getCheckboxProps: getCheckboxProps,
        getInputProps: getInputProps,
        getLabelProps: getLabelProps,
        htmlProps: htmlProps
    };
}
/**
 * Prevent `onBlur` being fired when the checkbox label is touched
 */ function stopEvent(event) {
    event.preventDefault();
    event.stopPropagation();
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","@chakra-ui/visually-hidden":"77YGo","react":"3f97z"}],"6ZT8s":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _closeButton = require("./close-button");
Object.keys(_closeButton).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _closeButton[key]) return;
    exports[key] = _closeButton[key];
});

},{"./close-button":"6ATTs"}],"6ATTs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.CloseButton = void 0;
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var CloseIcon = function CloseIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        focusable: "false",
        "aria-hidden": true
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    })));
};
/**
 * A button with a close icon.
 *
 * It is used to handle the close functionality in feedback and overlay components
 * like Alerts, Toasts, Drawers and Modals.
 */ var CloseButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("CloseButton", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, isDisabled = _omitThemingProps.isDisabled, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children",
        "isDisabled",
        "__css"
    ]);
    var baseStyle = {
        outline: 0,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0
    };
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
        type: "button",
        "aria-label": "Close",
        ref: ref,
        disabled: isDisabled,
        __css: _extends({
        }, baseStyle, styles, __css)
    }, rest), children || /*#__PURE__*/ React.createElement(CloseIcon, {
        width: "1em",
        height: "1em"
    })));
});
exports.CloseButton = CloseButton;
if (_utils.__DEV__) CloseButton.displayName = "CloseButton";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"rA1l7":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _useCounter = require("./use-counter");
Object.keys(_useCounter).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useCounter[key]) return;
    exports[key] = _useCounter[key];
});

},{"./use-counter":"6VUkp"}],"6VUkp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useCounter = useCounter;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
function useCounter(props) {
    if (props === void 0) props = {
    };
    var _props = props, onChange = _props.onChange, precisionProp = _props.precision, defaultValue = _props.defaultValue, valueProp = _props.value, _props$step = _props.step, stepProp = _props$step === void 0 ? 1 : _props$step, _props$min = _props.min, min = _props$min === void 0 ? _utils.minSafeInteger : _props$min, _props$max = _props.max, max = _props$max === void 0 ? _utils.maxSafeInteger : _props$max, _props$keepWithinRang = _props.keepWithinRange, keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang;
    var onChangeProp = _hooks.useCallbackRef(onChange);
    var _useState = _react.useState(function() {
        var _cast;
        if (defaultValue == null) return "";
        return (_cast = cast(defaultValue, stepProp, precisionProp)) != null ? _cast : "";
    }), valueState = _useState[0], setValue = _useState[1];
    /**
   * Because the component that consumes this hook can be controlled or uncontrolled
   * we'll keep track of that
   */ var _useControllableProp = _hooks.useControllableProp(valueProp, valueState), isControlled = _useControllableProp[0], value = _useControllableProp[1];
    var decimalPlaces = getDecimalPlaces(parse(value), stepProp);
    var precision = precisionProp != null ? precisionProp : decimalPlaces;
    var update = _react.useCallback(function(next) {
        if (next === value) return;
        if (!isControlled) setValue(next.toString());
        onChangeProp == null || onChangeProp(next.toString(), parse(next));
    }, [
        onChangeProp,
        isControlled,
        value
    ]); // Function to clamp the value and round it to the precision
    var clamp = _react.useCallback(function(value1) {
        var nextValue = value1;
        if (keepWithinRange) nextValue = _utils.clampValue(nextValue, min, max);
        return _utils.toPrecision(nextValue, precision);
    }, [
        precision,
        keepWithinRange,
        max,
        min
    ]);
    var increment = _react.useCallback(function(step) {
        if (step === void 0) step = stepProp;
        var next;
        /**
     * Let's follow the native browser behavior for
     * scenarios where the input starts empty ("")
     */ if (value === "") /**
       * If `min` is set, native input, starts at the `min`.
       * Else, it starts at `step`
       */ next = parse(step);
        else next = parse(value) + step;
        next = clamp(next);
        update(next);
    }, [
        clamp,
        stepProp,
        update,
        value
    ]);
    var decrement = _react.useCallback(function(step) {
        if (step === void 0) step = stepProp;
        var next; // Same thing here. We'll follow native implementation
        if (value === "") next = parse(-step);
        else next = parse(value) - step;
        next = clamp(next);
        update(next);
    }, [
        clamp,
        stepProp,
        update,
        value
    ]);
    var reset = _react.useCallback(function() {
        var next;
        if (defaultValue == null) next = "";
        else {
            var _cast2;
            next = (_cast2 = cast(defaultValue, stepProp, precisionProp)) != null ? _cast2 : min;
        }
        update(next);
    }, [
        defaultValue,
        precisionProp,
        stepProp,
        update,
        min
    ]);
    var castValue = _react.useCallback(function(value1) {
        var _cast3;
        var nextValue = (_cast3 = cast(value1, stepProp, precision)) != null ? _cast3 : min;
        update(nextValue);
    }, [
        precision,
        stepProp,
        update,
        min
    ]);
    var valueAsNumber = parse(value);
    /**
   * Common range checks
   */ var isOutOfRange = valueAsNumber > max || valueAsNumber < min;
    var isAtMax = valueAsNumber === max;
    var isAtMin = valueAsNumber === min;
    return {
        isOutOfRange: isOutOfRange,
        isAtMax: isAtMax,
        isAtMin: isAtMin,
        precision: precision,
        value: value,
        valueAsNumber: valueAsNumber,
        update: update,
        reset: reset,
        increment: increment,
        decrement: decrement,
        clamp: clamp,
        cast: castValue,
        setValue: setValue
    };
}
function parse(value) {
    return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
    return Math.max(_utils.countDecimalPlaces(step), _utils.countDecimalPlaces(value));
}
function cast(value, step, precision) {
    var parsedValue = parse(value);
    if (Number.isNaN(parsedValue)) return undefined;
    var decimalPlaces = getDecimalPlaces(parsedValue, step);
    return _utils.toPrecision(parsedValue, precision != null ? precision : decimalPlaces);
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","react":"3f97z"}],"5gMGH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _editable = require("./editable");
Object.keys(_editable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _editable[key]) return;
    exports[key] = _editable[key];
});
var _useEditable = require("./use-editable");
Object.keys(_useEditable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useEditable[key]) return;
    exports[key] = _useEditable[key];
});

},{"./editable":"4j2Gu","./use-editable":"2M1NV"}],"4j2Gu":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEditableState = useEditableState;
exports.useEditableControls = useEditableControls;
exports.EditableInput = exports.EditablePreview = exports.Editable = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useEditable2 = require("./use-editable");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    name: "EditableContext",
    errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
}), EditableProvider = _createContext[0], useEditableContext = _createContext[1];
/**
 * Editable
 *
 * The wrapper that provides context and logic for all editable
 * components. It renders a `div`
 */ var Editable = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Editable", props);
    var ownProps = _system.omitThemingProps(props);
    var _useEditable = _useEditable2.useEditable(ownProps), htmlProps = _useEditable.htmlProps, context = _objectWithoutPropertiesLoose(_useEditable, [
        "htmlProps"
    ]);
    var isEditing = context.isEditing, onSubmit = context.onSubmit, onCancel = context.onCancel, onEdit = context.onEdit;
    var _className = _utils.cx("chakra-editable", props.className);
    var children = _utils.runIfFn(props.children, {
        isEditing: isEditing,
        onSubmit: onSubmit,
        onCancel: onCancel,
        onEdit: onEdit
    });
    return(/*#__PURE__*/ React.createElement(EditableProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, htmlProps, {
        className: _className
    }), children))));
});
exports.Editable = Editable;
if (_utils.__DEV__) Editable.displayName = "Editable";
var commonStyles = {
    fontSize: "inherit",
    fontWeight: "inherit",
    textAlign: "inherit",
    bg: "transparent"
};
/**
 * EditablePreview
 *
 * The `span` used to display the final value, in the `preview` mode
 */ var EditablePreview = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useEditableContext = useEditableContext(), getPreviewProps = _useEditableContext.getPreviewProps;
    var styles = _system.useStyles();
    var previewProps = getPreviewProps(props, ref);
    var _className = _utils.cx("chakra-editable__preview", props.className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
    }, previewProps, {
        __css: _extends({
            cursor: "text",
            display: "inline-block"
        }, commonStyles, styles.preview),
        className: _className
    })));
});
exports.EditablePreview = EditablePreview;
if (_utils.__DEV__) EditablePreview.displayName = "EditablePreview";
/**
 * EditableInput
 *
 * The input used in the `edit` mode
 */ var EditableInput = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useEditableContext2 = useEditableContext(), getInputProps = _useEditableContext2.getInputProps;
    var styles = _system.useStyles();
    var inputProps = getInputProps(props, ref);
    var _className = _utils.cx("chakra-editable__input", props.className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.input, _extends({
    }, inputProps, {
        __css: _extends({
            outline: 0
        }, commonStyles, styles.input),
        className: _className
    })));
});
exports.EditableInput = EditableInput;
if (_utils.__DEV__) EditableInput.displayName = "EditableInput";
/**
 * React hook use to gain access to the editable state and actions.
 */ function useEditableState() {
    var _useEditableContext3 = useEditableContext(), isEditing = _useEditableContext3.isEditing, onSubmit = _useEditableContext3.onSubmit, onCancel = _useEditableContext3.onCancel, onEdit = _useEditableContext3.onEdit, isDisabled = _useEditableContext3.isDisabled;
    return {
        isEditing: isEditing,
        onSubmit: onSubmit,
        onCancel: onCancel,
        onEdit: onEdit,
        isDisabled: isDisabled
    };
}
/**
 * React hook use to create controls for the editable component
 */ function useEditableControls() {
    var _useEditableContext4 = useEditableContext(), isEditing = _useEditableContext4.isEditing, getEditButtonProps = _useEditableContext4.getEditButtonProps, getCancelButtonProps = _useEditableContext4.getCancelButtonProps, getSubmitButtonProps = _useEditableContext4.getSubmitButtonProps;
    return {
        isEditing: isEditing,
        getEditButtonProps: getEditButtonProps,
        getCancelButtonProps: getCancelButtonProps,
        getSubmitButtonProps: getSubmitButtonProps
    };
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-editable":"2M1NV"}],"2M1NV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEditable = useEditable;
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook for managing the inline renaming of some text.
 *
 * @see Docs https://chakra-ui.com/docs/editable
 */ function useEditable(props) {
    if (props === void 0) props = {
    };
    var _props = props, onChangeProp = _props.onChange, onCancelProp = _props.onCancel, onSubmitProp = _props.onSubmit, valueProp = _props.value, isDisabled = _props.isDisabled, defaultValue = _props.defaultValue, startWithEditView = _props.startWithEditView, _props$isPreviewFocus = _props.isPreviewFocusable, isPreviewFocusable = _props$isPreviewFocus === void 0 ? true : _props$isPreviewFocus, _props$submitOnBlur = _props.submitOnBlur, submitOnBlur = _props$submitOnBlur === void 0 ? true : _props$submitOnBlur, _props$selectAllOnFoc = _props.selectAllOnFocus, selectAllOnFocus = _props$selectAllOnFoc === void 0 ? true : _props$selectAllOnFoc, placeholder = _props.placeholder, onEditProp = _props.onEdit, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "onChange",
        "onCancel",
        "onSubmit",
        "value",
        "isDisabled",
        "defaultValue",
        "startWithEditView",
        "isPreviewFocusable",
        "submitOnBlur",
        "selectAllOnFocus",
        "placeholder",
        "onEdit"
    ]);
    var defaultIsEditing = Boolean(startWithEditView && !isDisabled);
    var _useState = _react.useState(defaultIsEditing), isEditing = _useState[0], setIsEditing = _useState[1];
    var _useControllableState = _hooks.useControllableState({
        defaultValue: defaultValue || "",
        value: valueProp,
        onChange: onChangeProp
    }), value = _useControllableState[0], setValue = _useControllableState[1];
    /**
   * Keep track of the previous value, so if users
   * presses `cancel`, we can revert to it.
   */ var _useState2 = _react.useState(value), prevValue = _useState2[0], setPrevValue = _useState2[1];
    /**
   * Ref to help focus the input in edit mode
   */ var inputRef = _react.useRef(null);
    var previewRef = _react.useRef(null);
    var editButtonRef = _react.useRef(null);
    var cancelButtonRef = _react.useRef(null);
    var submitButtonRef = _react.useRef(null);
    _hooks.useFocusOnPointerDown({
        ref: inputRef,
        enabled: isEditing,
        elements: [
            cancelButtonRef,
            submitButtonRef
        ]
    });
    var isInteractive = !isEditing || !isDisabled;
    _hooks.useUpdateEffect(function() {
        if (!isEditing) {
            _utils.focus(editButtonRef.current);
            return;
        }
        _utils.focus(inputRef.current, {
            selectTextIfInput: selectAllOnFocus
        });
        onEditProp == null || onEditProp();
    }, [
        isEditing,
        onEditProp,
        selectAllOnFocus
    ]);
    var onEdit = _react.useCallback(function() {
        if (isInteractive) setIsEditing(true);
    }, [
        isInteractive
    ]);
    var onCancel = _react.useCallback(function() {
        setIsEditing(false);
        setValue(prevValue);
        onCancelProp == null || onCancelProp(prevValue);
    }, [
        onCancelProp,
        setValue,
        prevValue
    ]);
    var onSubmit = _react.useCallback(function() {
        setIsEditing(false);
        setPrevValue(value);
        onSubmitProp == null || onSubmitProp(value);
    }, [
        value,
        onSubmitProp
    ]);
    var onChange = _react.useCallback(function(event) {
        setValue(event.target.value);
    }, [
        setValue
    ]);
    var onKeyDown = _react.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            Escape: onCancel,
            Enter: function Enter(event1) {
                if (!event1.shiftKey && !event1.metaKey) onSubmit();
            }
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        onCancel,
        onSubmit
    ]);
    var isValueEmpty = _utils.isEmpty(value);
    var onBlur = _react.useCallback(function(event) {
        var relatedTarget = _utils.getRelatedTarget(event);
        var targetIsCancel = _utils.contains(cancelButtonRef.current, relatedTarget);
        var targetIsSubmit = _utils.contains(submitButtonRef.current, relatedTarget);
        var isValidBlur = !targetIsCancel && !targetIsSubmit;
        if (isValidBlur && submitOnBlur) onSubmit();
    }, [
        submitOnBlur,
        onSubmit
    ]);
    var getPreviewProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, previewRef),
            children: isValueEmpty ? placeholder : value,
            hidden: isEditing,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            tabIndex: tabIndex,
            onFocus: _utils.callAllHandlers(props1.onFocus, onEdit)
        });
    }, [
        isDisabled,
        isEditing,
        isInteractive,
        isPreviewFocusable,
        isValueEmpty,
        onEdit,
        placeholder,
        value
    ]);
    var getInputProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            hidden: !isEditing,
            placeholder: placeholder,
            ref: _reactUtils.mergeRefs(ref, inputRef),
            disabled: isDisabled,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            value: value,
            onBlur: _utils.callAllHandlers(props1.onBlur, onBlur),
            onChange: _utils.callAllHandlers(props1.onChange, onChange),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown)
        });
    }, [
        isDisabled,
        isEditing,
        onBlur,
        onChange,
        onKeyDown,
        placeholder,
        value
    ]);
    var getEditButtonProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
            "aria-label": "Edit"
        }, props1, {
            type: "button",
            onClick: _utils.callAllHandlers(props1.onClick, onEdit),
            ref: _reactUtils.mergeRefs(ref, editButtonRef)
        });
    }, [
        onEdit
    ]);
    var getSubmitButtonProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            "aria-label": "Submit",
            ref: _reactUtils.mergeRefs(submitButtonRef, ref),
            type: "button",
            onClick: _utils.callAllHandlers(props1.onClick, onSubmit)
        });
    }, [
        onSubmit
    ]);
    var getCancelButtonProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
            "aria-label": "Cancel",
            id: "cancel"
        }, props1, {
            ref: _reactUtils.mergeRefs(cancelButtonRef, ref),
            type: "button",
            onClick: _utils.callAllHandlers(props1.onClick, onCancel)
        });
    }, [
        onCancel
    ]);
    return {
        isEditing: isEditing,
        isDisabled: isDisabled,
        isValueEmpty: isValueEmpty,
        value: value,
        onEdit: onEdit,
        onCancel: onCancel,
        onSubmit: onSubmit,
        getPreviewProps: getPreviewProps,
        getInputProps: getInputProps,
        getEditButtonProps: getEditButtonProps,
        getSubmitButtonProps: getSubmitButtonProps,
        getCancelButtonProps: getCancelButtonProps,
        htmlProps: htmlProps
    };
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z"}],"1VzrL":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _formControl = require("./form-control");
Object.keys(_formControl).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _formControl[key]) return;
    exports[key] = _formControl[key];
});
var _useFormControl = require("./use-form-control");
Object.keys(_useFormControl).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useFormControl[key]) return;
    exports[key] = _useFormControl[key];
});
var _formError = require("./form-error");
Object.keys(_formError).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _formError[key]) return;
    exports[key] = _formError[key];
});
var _formLabel = require("./form-label");
Object.keys(_formLabel).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _formLabel[key]) return;
    exports[key] = _formLabel[key];
});

},{"./form-control":"3FTXi","./use-form-control":"bRZUO","./form-error":"6YRxX","./form-label":"142Hi"}],"3FTXi":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.FormHelperText = exports.FormControl = exports.useFormControlContext = void 0;
var _hooks = require("@chakra-ui/hooks");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    strict: false,
    name: "FormControlContext"
}), FormControlProvider = _createContext[0], useFormControlContext = _createContext[1];
exports.useFormControlContext = useFormControlContext;
function useFormControlProvider(props) {
    var idProp = props.id, isRequired = props.isRequired, isInvalid = props.isInvalid, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, htmlProps = _objectWithoutPropertiesLoose(props, [
        "id",
        "isRequired",
        "isInvalid",
        "isDisabled",
        "isReadOnly"
    ]); // Generate all the required ids
    var uuid = _hooks.useId();
    var id = idProp || "field-" + uuid;
    var labelId = id + "-label";
    var feedbackId = id + "-feedback";
    var helpTextId = id + "-helptext";
    /**
   * Track whether the `FormErrorMessage` has been rendered.
   * We use this to append its id the the `aria-describedby` of the `input`.
   */ var _React$useState = React.useState(false), hasFeedbackText = _React$useState[0], setHasFeedbackText = _React$useState[1];
    /**
   * Track whether the `FormHelperText` has been rendered.
   * We use this to append its id the the `aria-describedby` of the `input`.
   */ var _React$useState2 = React.useState(false), hasHelpText = _React$useState2[0], setHasHelpText = _React$useState2[1]; // Track whether the form element (e.g, `input`) has focus.
    var _useBoolean = _hooks.useBoolean(), isFocused = _useBoolean[0], setFocus = _useBoolean[1];
    var getHelpTextProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
            id: helpTextId
        }, props1, {
            /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */ ref: _reactUtils.mergeRefs(forwardedRef, function(node) {
                if (!node) return;
                setHasHelpText(true);
            })
        });
    }, [
        helpTextId
    ]);
    var getLabelProps = React.useCallback(function(props1, forwardedRef) {
        var _props$id, _props$htmlFor;
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, {
            ref: forwardedRef,
            "data-focus": _utils.dataAttr(isFocused),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(isInvalid),
            "data-readonly": _utils.dataAttr(isReadOnly),
            id: (_props$id = props1.id) != null ? _props$id : labelId,
            htmlFor: (_props$htmlFor = props1.htmlFor) != null ? _props$htmlFor : id
        });
    }, [
        id,
        isDisabled,
        isFocused,
        isInvalid,
        isReadOnly,
        labelId
    ]);
    var getErrorMessageProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
            id: feedbackId
        }, props1, {
            /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */ ref: _reactUtils.mergeRefs(forwardedRef, function(node) {
                if (!node) return;
                setHasFeedbackText(true);
            }),
            "aria-live": "polite"
        });
    }, [
        feedbackId
    ]);
    var getRootProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, htmlProps, {
            ref: forwardedRef,
            role: "group"
        });
    }, [
        htmlProps
    ]);
    var getRequiredIndicatorProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, {
            ref: forwardedRef,
            role: "presentation",
            "aria-hidden": true,
            children: props1.children || "*"
        });
    }, []);
    var onFocus = React.useCallback(function() {
        _utils.scheduleMicrotask(setFocus.on);
    }, [
        setFocus
    ]);
    return {
        isRequired: !!isRequired,
        isInvalid: !!isInvalid,
        isReadOnly: !!isReadOnly,
        isDisabled: !!isDisabled,
        isFocused: !!isFocused,
        onFocus: onFocus,
        onBlur: setFocus.off,
        hasFeedbackText: hasFeedbackText,
        setHasFeedbackText: setHasFeedbackText,
        hasHelpText: hasHelpText,
        setHasHelpText: setHasHelpText,
        id: id,
        labelId: labelId,
        feedbackId: feedbackId,
        helpTextId: helpTextId,
        htmlProps: htmlProps,
        getHelpTextProps: getHelpTextProps,
        getErrorMessageProps: getErrorMessageProps,
        getRootProps: getRootProps,
        getLabelProps: getLabelProps,
        getRequiredIndicatorProps: getRequiredIndicatorProps
    };
}
/**
 * FormControl provides context such as
 * `isInvalid`, `isDisabled`, and `isRequired` to form elements.
 *
 * This is commonly used in form elements such as `input`,
 * `select`, `textarea`, etc.
 */ var FormControl = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Form", props);
    var ownProps = _system.omitThemingProps(props);
    var _useFormControlProvid = useFormControlProvider(ownProps), getRootProps = _useFormControlProvid.getRootProps, _ = _useFormControlProvid.htmlProps, context = _objectWithoutPropertiesLoose(_useFormControlProvid, [
        "getRootProps",
        "htmlProps"
    ]);
    var className = _utils.cx("chakra-form-control", props.className);
    var contextValue = React.useMemo(function() {
        return context;
    }, [
        context
    ]);
    return(/*#__PURE__*/ React.createElement(FormControlProvider, {
        value: contextValue
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, getRootProps({
    }, ref), {
        className: className,
        __css: {
            width: "100%",
            position: "relative"
        }
    })))));
});
exports.FormControl = FormControl;
if (_utils.__DEV__) FormControl.displayName = "FormControl";
/**
 * FormHelperText
 *
 * Assistive component that conveys additional guidance
 * about the field, such as how it will be used and what
 * types in values should be provided.
 */ var FormHelperText = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var field = useFormControlContext();
    var styles = _system.useStyles();
    var className = _utils.cx("chakra-form__helper-text", props.className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, field == null ? void 0 : field.getHelpTextProps(props, ref), {
        __css: styles.helperText,
        className: className
    })));
});
exports.FormHelperText = FormHelperText;
if (_utils.__DEV__) FormHelperText.displayName = "FormHelperText";

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"bRZUO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useFormControl = useFormControl;
exports.useFormControlProps = useFormControlProps;
var _utils = require("@chakra-ui/utils");
var _formControl = require("./form-control");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook that provides the props that should be spread on to
 * input fields (`input`, `select`, `textarea`, etc.).
 *
 * It provides a convenient way to control a form fields, validation
 * and helper text.
 */ function useFormControl(props) {
    var _useFormControlProps = useFormControlProps(props), isDisabled = _useFormControlProps.isDisabled, isInvalid = _useFormControlProps.isInvalid, isReadOnly = _useFormControlProps.isReadOnly, isRequired = _useFormControlProps.isRequired, rest = _objectWithoutPropertiesLoose(_useFormControlProps, [
        "isDisabled",
        "isInvalid",
        "isReadOnly",
        "isRequired"
    ]);
    return _extends({
    }, rest, {
        disabled: isDisabled,
        readOnly: isReadOnly,
        required: isRequired,
        "aria-invalid": _utils.ariaAttr(isInvalid),
        "aria-required": _utils.ariaAttr(isRequired),
        "aria-readonly": _utils.ariaAttr(isReadOnly)
    });
}
function useFormControlProps(props) {
    var _ref, _ref2, _ref3;
    var field = _formControl.useFormControlContext();
    var id = props.id, disabled = props.disabled, readOnly = props.readOnly, required = props.required, isRequired = props.isRequired, isInvalid = props.isInvalid, isReadOnly = props.isReadOnly, isDisabled = props.isDisabled, onFocus = props.onFocus, onBlur = props.onBlur, rest = _objectWithoutPropertiesLoose(props, [
        "id",
        "disabled",
        "readOnly",
        "required",
        "isRequired",
        "isInvalid",
        "isReadOnly",
        "isDisabled",
        "onFocus",
        "onBlur"
    ]);
    var labelIds = []; // Error message must be described first in all scenarios.
    if (field != null && field.hasFeedbackText && field != null && field.isInvalid) labelIds.push(field.feedbackId);
    if (field != null && field.hasHelpText) labelIds.push(field.helpTextId);
    return _extends({
    }, rest, {
        "aria-describedby": labelIds.join(" ") || undefined,
        id: id != null ? id : field == null ? void 0 : field.id,
        isDisabled: (_ref = disabled != null ? disabled : isDisabled) != null ? _ref : field == null ? void 0 : field.isDisabled,
        isReadOnly: (_ref2 = readOnly != null ? readOnly : isReadOnly) != null ? _ref2 : field == null ? void 0 : field.isReadOnly,
        isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,
        isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
        onFocus: _utils.callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),
        onBlur: _utils.callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)
    });
}

},{"@chakra-ui/utils":"3364O","./form-control":"3FTXi"}],"6YRxX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.FormErrorIcon = exports.FormErrorMessage = void 0;
var _icon = _interopRequireDefault(require("@chakra-ui/icon"));
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _formControl = require("./form-control");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * Used to provide feedback about an invalid input,
 * and suggest clear instructions on how to fix it.
 */ var FormErrorMessage = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("FormError", props);
    var ownProps = _system.omitThemingProps(props);
    var field = _formControl.useFormControlContext();
    if (!(field != null && field.isInvalid)) return null;
    return(/*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref), {
        className: _utils.cx("chakra-form__error-message", props.className),
        __css: _extends({
            display: "flex",
            alignItems: "center"
        }, styles.text)
    }))));
});
exports.FormErrorMessage = FormErrorMessage;
if (_utils.__DEV__) FormErrorMessage.displayName = "FormErrorMessage";
/**
 * Used as the visual indicator that a field is invalid or
 * a field has incorrect values.
 */ var FormErrorIcon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    var field = _formControl.useFormControlContext();
    if (!(field != null && field.isInvalid)) return null;
    var _className = _utils.cx("chakra-form__error-icon", props.className);
    return(/*#__PURE__*/ React.createElement(_icon["default"], _extends({
        ref: ref,
        "aria-hidden": true
    }, props, {
        __css: styles.icon,
        className: _className
    }), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    })));
});
exports.FormErrorIcon = FormErrorIcon;
if (_utils.__DEV__) FormErrorIcon.displayName = "FormErrorIcon";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./form-control":"3FTXi"}],"142Hi":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.RequiredIndicator = exports.FormLabel = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _formControl = require("./form-control");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */ var FormLabel = /*#__PURE__*/ _system.forwardRef(function(passedProps, ref) {
    var _field$getLabelProps;
    var styles = _system.useStyleConfig("FormLabel", passedProps);
    var props = _system.omitThemingProps(passedProps);
    var className = props.className, children = props.children, _props$requiredIndica = props.requiredIndicator, requiredIndicator = _props$requiredIndica === void 0 ? /*#__PURE__*/ React.createElement(RequiredIndicator, null) : _props$requiredIndica, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "children",
        "requiredIndicator"
    ]);
    var field = _formControl.useFormControlContext();
    var ownProps = (_field$getLabelProps = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _field$getLabelProps : _extends({
        ref: ref
    }, rest);
    return(/*#__PURE__*/ React.createElement(_system.chakra.label, _extends({
    }, ownProps, {
        className: _utils.cx("chakra-form__label", props.className),
        __css: _extends({
            display: "block",
            textAlign: "start"
        }, styles)
    }), children, field != null && field.isRequired ? requiredIndicator : null));
});
exports.FormLabel = FormLabel;
if (_utils.__DEV__) FormLabel.displayName = "FormLabel";
/**
 * Used to show a "required" text or an asterisks (*) to indicate that
 * a field is required.
 */ var RequiredIndicator = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var field = _formControl.useFormControlContext();
    var styles = _system.useStyles();
    if (!(field != null && field.isRequired)) return null;
    var className = _utils.cx("chakra-form__required-indicator", props.className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
    }, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {
        __css: styles.requiredIndicator,
        className: className
    })));
});
exports.RequiredIndicator = RequiredIndicator;
if (_utils.__DEV__) RequiredIndicator.displayName = "RequiredIndicator";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./form-control":"3FTXi"}],"6HXEX":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _controlBox = require("./control-box");
Object.keys(_controlBox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _controlBox[key]) return;
    exports[key] = _controlBox[key];
});

},{"./control-box":"SiJE5"}],"SiJE5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.ControlBox = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var ControlBox = function ControlBox1(props) {
    var _extends2, _ref;
    var _props$type = props.type, type = _props$type === void 0 ? "checkbox" : _props$type, _hover = props._hover, _invalid = props._invalid, _disabled = props._disabled, _focus = props._focus, _checked = props._checked, _props$_child = props._child, _child = _props$_child === void 0 ? {
        opacity: 0
    } : _props$_child, _props$_checkedAndChi = props._checkedAndChild, _checkedAndChild = _props$_checkedAndChi === void 0 ? {
        opacity: 1
    } : _props$_checkedAndChi, _checkedAndDisabled = props._checkedAndDisabled, _checkedAndFocus = props._checkedAndFocus, _checkedAndHover = props._checkedAndHover, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "type",
        "_hover",
        "_invalid",
        "_disabled",
        "_focus",
        "_checked",
        "_child",
        "_checkedAndChild",
        "_checkedAndDisabled",
        "_checkedAndFocus",
        "_checkedAndHover",
        "children"
    ]);
    var checkedAndDisabled = "input[type=" + type + "]:checked:disabled + &";
    var checkedAndHover = "input[type=" + type + "]:checked:hover:not(:disabled) + &";
    var checkedAndFocus = "input[type=" + type + "]:checked:focus + &";
    var disabled = "input[type=" + type + "]:disabled + &";
    var focus = "input[type=" + type + "]:focus + &";
    var hover = "input[type=" + type + "]:hover:not(:disabled):not(:checked) + &";
    var checked = "input[type=" + type + "]:checked + &, input[type=" + type + "][aria-checked=mixed] + &";
    var invalid = "input[type=" + type + "][aria-invalid=true] + &";
    var child = "& > *";
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, rest, {
        "aria-hidden": true,
        __css: (_ref = {
            display: "inline-flex",
            alignItems: "center",
            justifyContent: "center",
            transition: "all 120ms",
            flexShrink: 0
        }, _ref[focus] = _focus, _ref[hover] = _hover, _ref[disabled] = _disabled, _ref[invalid] = _invalid, _ref[checkedAndDisabled] = _checkedAndDisabled, _ref[checkedAndFocus] = _checkedAndFocus, _ref[checkedAndHover] = _checkedAndHover, _ref[child] = _child, _ref[checked] = _extends({
        }, _checked, (_extends2 = {
        }, _extends2[child] = _checkedAndChild, _extends2)), _ref)
    }), children));
};
exports.ControlBox = ControlBox;
if (_utils.__DEV__) ControlBox.displayName = "ControlBox";
var _default = ControlBox;
exports["default"] = _default;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"2M9Yv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _input = require("./input");
Object.keys(_input).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _input[key]) return;
    exports[key] = _input[key];
});
var _inputAddon = require("./input-addon");
Object.keys(_inputAddon).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _inputAddon[key]) return;
    exports[key] = _inputAddon[key];
});
var _inputGroup = require("./input-group");
Object.keys(_inputGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _inputGroup[key]) return;
    exports[key] = _inputGroup[key];
});
var _inputElement = require("./input-element");
Object.keys(_inputElement).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _inputElement[key]) return;
    exports[key] = _inputElement[key];
});

},{"./input":"urD1A","./input-addon":"4xPSg","./input-group":"1lVN8","./input-element":"KJ69s"}],"urD1A":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Input = void 0;
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * Input
 *
 * Element that allows users enter single valued data.
 */ var Input = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Input", props);
    var ownProps = _system.omitThemingProps(props);
    var input = _formControl.useFormControl(ownProps);
    var _className = _utils.cx("chakra-input", props.className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.input, _extends({
    }, input, {
        __css: styles.field,
        ref: ref,
        className: _className
    })));
});
exports.Input = Input;
if (_utils.__DEV__) Input.displayName = "Input";
 // This is used in `input-group.tsx`
Input.id = "Input";

},{"@chakra-ui/form-control":"1VzrL","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"4xPSg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.InputRightAddon = exports.InputLeftAddon = exports.InputAddon = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var placements = {
    left: {
        marginEnd: "-1px",
        borderEndRadius: 0,
        borderEndColor: "transparent"
    },
    right: {
        marginStart: "-1px",
        borderStartRadius: 0,
        borderStartColor: "transparent"
    }
};
var StyledAddon = _system.chakra("div", {
    baseStyle: {
        flex: "0 0 auto",
        width: "auto",
        display: "flex",
        alignItems: "center",
        whiteSpace: "nowrap"
    }
});
/**
 * InputAddon
 *
 * Element to append or prepend to an input
 */ var InputAddon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _placements$placement;
    var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose(props, [
        "placement"
    ]);
    var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {
    };
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(StyledAddon, _extends({
        ref: ref
    }, rest, {
        __css: _extends({
        }, styles.addon, placementStyles)
    })));
});
exports.InputAddon = InputAddon;
if (_utils.__DEV__) InputAddon.displayName = "InputAddon";
/**
 * InputLeftAddon
 *
 * Element to append to the left of an input
 */ var InputLeftAddon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(InputAddon, _extends({
        ref: ref,
        placement: "left"
    }, props, {
        className: _utils.cx("chakra-input__left-addon", props.className)
    })));
});
exports.InputLeftAddon = InputLeftAddon;
if (_utils.__DEV__) InputLeftAddon.displayName = "InputLeftAddon";
 // This is used in `input-group.tsx`
InputLeftAddon.id = "InputLeftAddon";
/**
 * InputRightAddon
 *
 * Element to append to the right of an input
 */ var InputRightAddon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(InputAddon, _extends({
        ref: ref,
        placement: "right"
    }, props, {
        className: _utils.cx("chakra-input__right-addon", props.className)
    })));
});
exports.InputRightAddon = InputRightAddon;
if (_utils.__DEV__) InputRightAddon.displayName = "InputRightAddon";
 // This is used in `input-group.tsx`
InputRightAddon.id = "InputRightAddon";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"1lVN8":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.InputGroup = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var InputGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Input", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children",
        "className"
    ]);
    var _className = _utils.cx("chakra-input__group", className);
    var groupStyles = {
    };
    var validChildren = _reactUtils.getValidChildren(children);
    var input = styles.field;
    validChildren.forEach(function(child) {
        if (!styles) return;
        if (input && child.type.id === "InputLeftElement") {
            var _input$height;
            groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;
        }
        if (input && child.type.id === "InputRightElement") {
            var _input$height2;
            groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;
        }
        if (child.type.id === "InputRightAddon") groupStyles.borderEndRadius = 0;
        if (child.type.id === "InputLeftAddon") groupStyles.borderStartRadius = 0;
    });
    var clones = validChildren.map(function(child) {
        var _child$props, _child$props2;
        /**
     * Make it possible to override the size and variant from `Input`
     */ var theming = {
            size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,
            variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant
        };
        return child.type.id !== "Input" ? /*#__PURE__*/ React.cloneElement(child, theming) : /*#__PURE__*/ React.cloneElement(child, Object.assign(theming, groupStyles, child.props));
    });
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _className,
        ref: ref,
        __css: {
            width: "100%",
            display: "flex",
            position: "relative"
        }
    }, rest), /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, clones)));
});
exports.InputGroup = InputGroup;
if (_utils.__DEV__) InputGroup.displayName = "InputGroup";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"KJ69s":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.InputRightElement = exports.InputLeftElement = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var StyledElement = _system.chakra("div", {
    baseStyle: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        top: "0",
        zIndex: 2
    }
});
var InputElement = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _input$height, _input$height2, _elementStyles;
    var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose(props, [
        "placement"
    ]);
    var styles = _system.useStyles();
    var input = styles.field;
    var attr = placement === "left" ? "insetStart" : "insetEnd";
    var elementStyles = (_elementStyles = {
    }, _elementStyles[attr] = "0", _elementStyles.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _elementStyles.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _elementStyles.fontSize = input == null ? void 0 : input.fontSize, _elementStyles);
    return(/*#__PURE__*/ React.createElement(StyledElement, _extends({
        ref: ref,
        __css: elementStyles
    }, rest)));
}); // This is used in `input-group.tsx`
InputElement.id = "InputElement";
if (_utils.__DEV__) InputElement.displayName = "InputElement";
var InputLeftElement = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var _className = _utils.cx("chakra-input__left-element", className);
    return(/*#__PURE__*/ React.createElement(InputElement, _extends({
        ref: ref,
        placement: "left",
        className: _className
    }, rest)));
}); // This is used in `input-group.tsx`
exports.InputLeftElement = InputLeftElement;
InputLeftElement.id = "InputLeftElement";
if (_utils.__DEV__) InputLeftElement.displayName = "InputLeftElement";
var InputRightElement = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var _className = _utils.cx("chakra-input__right-element", className);
    return(/*#__PURE__*/ React.createElement(InputElement, _extends({
        ref: ref,
        placement: "right",
        className: _className
    }, rest)));
}); // This is used in `input-group.tsx`
exports.InputRightElement = InputRightElement;
InputRightElement.id = "InputRightElement";
if (_utils.__DEV__) InputRightElement.displayName = "InputRightElement";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"3GzMo":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _aspectRatio = require("./aspect-ratio");
Object.keys(_aspectRatio).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _aspectRatio[key]) return;
    exports[key] = _aspectRatio[key];
});
var _badge = require("./badge");
Object.keys(_badge).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _badge[key]) return;
    exports[key] = _badge[key];
});
var _box = require("./box");
Object.keys(_box).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _box[key]) return;
    exports[key] = _box[key];
});
var _center = require("./center");
Object.keys(_center).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _center[key]) return;
    exports[key] = _center[key];
});
var _code = require("./code");
Object.keys(_code).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _code[key]) return;
    exports[key] = _code[key];
});
var _container = require("./container");
Object.keys(_container).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _container[key]) return;
    exports[key] = _container[key];
});
var _divider = require("./divider");
Object.keys(_divider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _divider[key]) return;
    exports[key] = _divider[key];
});
var _flex = require("./flex");
Object.keys(_flex).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _flex[key]) return;
    exports[key] = _flex[key];
});
var _grid = require("./grid");
Object.keys(_grid).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _grid[key]) return;
    exports[key] = _grid[key];
});
var _heading = require("./heading");
Object.keys(_heading).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _heading[key]) return;
    exports[key] = _heading[key];
});
var _kbd = require("./kbd");
Object.keys(_kbd).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _kbd[key]) return;
    exports[key] = _kbd[key];
});
var _link = require("./link");
Object.keys(_link).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _link[key]) return;
    exports[key] = _link[key];
});
var _list = require("./list");
Object.keys(_list).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _list[key]) return;
    exports[key] = _list[key];
});
var _simpleGrid = require("./simple-grid");
Object.keys(_simpleGrid).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _simpleGrid[key]) return;
    exports[key] = _simpleGrid[key];
});
var _spacer = require("./spacer");
Object.keys(_spacer).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _spacer[key]) return;
    exports[key] = _spacer[key];
});
var _stack = require("./stack");
Object.keys(_stack).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _stack[key]) return;
    exports[key] = _stack[key];
});
var _text = require("./text");
Object.keys(_text).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _text[key]) return;
    exports[key] = _text[key];
});
var _wrap = require("./wrap");
Object.keys(_wrap).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _wrap[key]) return;
    exports[key] = _wrap[key];
});
var _linkBox = require("./link-box");
Object.keys(_linkBox).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _linkBox[key]) return;
    exports[key] = _linkBox[key];
});

},{"./aspect-ratio":"4HndK","./badge":"5808a","./box":"6RYhr","./center":"3Irac","./code":"2YfSq","./container":"38amM","./divider":"6ah1d","./flex":"7mw9t","./grid":"10eaT","./heading":"5xS3B","./kbd":"3uQvH","./link":"5mo4p","./list":"1fp7g","./simple-grid":"6gldr","./spacer":"vIaEW","./stack":"1yAGq","./text":"32SaE","./wrap":"65pTk","./link-box":"7aZns"}],"4HndK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.AspectRatio = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component used to cropping media (videos, images and maps)
 * to a desired aspect ratio.
 *
 * @see Docs https://chakra-ui.com/docs/layout/aspect-ratio
 */ var AspectRatio = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$ratio = props.ratio, ratio = _props$ratio === void 0 ? 4 / 3 : _props$ratio, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "ratio",
        "children",
        "className"
    ]); // enforce single child
    var child = React.Children.only(children);
    var _className = _utils.cx("chakra-aspect-ratio", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        position: "relative",
        className: _className,
        _before: {
            height: 0,
            content: "\"\"",
            display: "block",
            paddingBottom: _utils.mapResponsive(ratio, function(r) {
                return 1 / r * 100 + "%";
            })
        },
        __css: {
            "& > *:not(style)": {
                overflow: "hidden",
                position: "absolute",
                top: "0",
                right: "0",
                bottom: "0",
                left: "0",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%"
            },
            "& > img, & > video": {
                objectFit: "cover"
            }
        }
    }, rest), child));
});
exports.AspectRatio = AspectRatio;
if (_utils.__DEV__) AspectRatio.displayName = "AspectRatio";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"5808a":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Badge = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component used to display notifications, messages, or
 * statuses in different shapes and sizes.
 *
 * @see Docs https://chakra-ui.com/docs/data-display/badge
 */ var Badge = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Badge", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref,
        className: _utils.cx("chakra-badge", props.className)
    }, rest, {
        __css: _extends({
            display: "inline-block",
            whiteSpace: "nowrap",
            verticalAlign: "middle"
        }, styles)
    })));
});
exports.Badge = Badge;
if (_utils.__DEV__) Badge.displayName = "Badge";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"6RYhr":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Circle = exports.Square = exports.Box = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Box is the most abstract component on top of which other chakra
 * components are built. It renders a `div` element by default.
 *
 * @see Docs https://chakra-ui.com/docs/layout/box
 */ var Box = _system.chakra("div");
exports.Box = Box;
if (_utils.__DEV__) Box.displayName = "Box";
/**
 * As a constraint, you can't pass size related props
 * Only `size` would be allowed
 */ var Square = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var size = props.size, _props$centerContent = props.centerContent, centerContent = _props$centerContent === void 0 ? true : _props$centerContent, rest = _objectWithoutPropertiesLoose(props, [
        "size",
        "centerContent"
    ]);
    var styles = centerContent ? {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
    } : {
    };
    return(/*#__PURE__*/ React.createElement(Box, _extends({
        ref: ref,
        boxSize: size,
        __css: _extends({
        }, styles, {
            flexShrink: 0,
            flexGrow: 0
        })
    }, rest)));
});
exports.Square = Square;
if (_utils.__DEV__) Square.displayName = "Square";
var Circle = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var size = props.size, rest = _objectWithoutPropertiesLoose(props, [
        "size"
    ]);
    return(/*#__PURE__*/ React.createElement(Square, _extends({
        size: size,
        ref: ref,
        borderRadius: "9999px"
    }, rest)));
});
exports.Circle = Circle;
if (_utils.__DEV__) Circle.displayName = "Circle";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"3Irac":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.AbsoluteCenter = exports.Center = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component used to horizontally and vertically center its child.
 * It uses the popular `display: flex` centering technique.
 *
 * @see Docs https://chakra-ui.com/docs/layout/center
 */ var Center = _system.chakra("div", {
    baseStyle: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
    }
});
exports.Center = Center;
if (_utils.__DEV__) Center.displayName = "Center";
var centerStyles = {
    horizontal: {
        insetStart: "50%",
        transform: "translateX(-50%)"
    },
    vertical: {
        top: "50%",
        transform: "translateY(-50%)"
    },
    both: {
        insetStart: "50%",
        top: "50%",
        transform: "translate(-50%, -50%)"
    }
};
/**
 * React component used to horizontally and vertically center an element
 * relative to its parent dimensions.
 *
 * It uses the `position: absolute` strategy.
 *
 * @see Docs https://chakra-ui.com/docs/layout/center
 * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop
 */ var AbsoluteCenter = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$axis = props.axis, axis = _props$axis === void 0 ? "both" : _props$axis, rest = _objectWithoutPropertiesLoose(props, [
        "axis"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        __css: centerStyles[axis]
    }, rest, {
        position: "absolute"
    })));
});
exports.AbsoluteCenter = AbsoluteCenter;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"2YfSq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Code = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component to render inline code snippets.
 *
 * @see Docs https://chakra-ui.com/docs/data-display/code
 */ var Code = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Code", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.code, _extends({
        ref: ref,
        className: _utils.cx("chakra-code", props.className)
    }, rest, {
        __css: _extends({
            display: "inline-block"
        }, styles)
    })));
});
exports.Code = Code;
if (_utils.__DEV__) Code.displayName = "Code";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"38amM":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Container = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Layout component used to wrap app or website content
 *
 * It sets `margin-left` and `margin-right` to `auto`,
 * to keep its content centered.
 *
 * It also sets a default max-width of `60ch` (60 characters).
 */ var Container = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, centerContent = _omitThemingProps.centerContent, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "centerContent"
    ]);
    var styles = _system.useStyleConfig("Container", props);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-container", className)
    }, rest, {
        __css: _extends({
        }, styles, centerContent && {
            display: "flex",
            flexDirection: "column",
            alignItems: "center"
        })
    })));
});
exports.Container = Container;
if (_utils.__DEV__) Container.displayName = "Container";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"6ah1d":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Divider = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Layout component used to visually separate content in a list or group.
 * It display a thin horizontal or vertical line, and renders a `hr` tag.
 *
 * @see Docs https://chakra-ui.com/docs/data-display/divider
 */ var Divider = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useStyleConfig = _system.useStyleConfig("Divider", props), borderLeftWidth = _useStyleConfig.borderLeftWidth, borderBottomWidth = _useStyleConfig.borderBottomWidth, borderTopWidth = _useStyleConfig.borderTopWidth, borderRightWidth = _useStyleConfig.borderRightWidth, borderWidth = _useStyleConfig.borderWidth, borderStyle = _useStyleConfig.borderStyle, borderColor = _useStyleConfig.borderColor, styles = _objectWithoutPropertiesLoose(_useStyleConfig, [
        "borderLeftWidth",
        "borderBottomWidth",
        "borderTopWidth",
        "borderRightWidth",
        "borderWidth",
        "borderStyle",
        "borderColor"
    ]);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, _omitThemingProps$ori = _omitThemingProps.orientation, orientation = _omitThemingProps$ori === void 0 ? "horizontal" : _omitThemingProps$ori, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "orientation",
        "__css"
    ]);
    var dividerStyles = {
        vertical: {
            borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
            height: "100%"
        },
        horizontal: {
            borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
            width: "100%"
        }
    };
    return(/*#__PURE__*/ React.createElement(_system.chakra.hr, _extends({
        ref: ref,
        "aria-orientation": orientation
    }, rest, {
        __css: _extends({
        }, styles, {
            border: "0",
            borderColor: borderColor,
            borderStyle: borderStyle
        }, dividerStyles[orientation], __css),
        className: _utils.cx("chakra-divider", className)
    })));
});
exports.Divider = Divider;
if (_utils.__DEV__) Divider.displayName = "Divider";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"7mw9t":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Flex = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component used to create flexbox layouts.
 *
 * It renders a `div` with `display: flex` and
 * comes with helpful style shorthand.
 *
 * @see Docs https://chakra-ui.com/docs/layout/flex
 */ var Flex = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var direction = props.direction, align = props.align, justify = props.justify, wrap = props.wrap, basis = props.basis, grow = props.grow, shrink = props.shrink, rest = _objectWithoutPropertiesLoose(props, [
        "direction",
        "align",
        "justify",
        "wrap",
        "basis",
        "grow",
        "shrink"
    ]);
    var styles = {
        display: "flex",
        flexDirection: direction,
        alignItems: align,
        justifyContent: justify,
        flexWrap: wrap,
        flexBasis: basis,
        flexGrow: grow,
        flexShrink: shrink
    };
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        __css: styles
    }, rest)));
});
exports.Flex = Flex;
if (_utils.__DEV__) Flex.displayName = "Flex";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"10eaT":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.GridItem = exports.Grid = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React component used to create grid layouts.
 *
 * It renders a `div` with `display: grid` and
 * comes with helpful style shorthand.
 *
 * @see Docs https://chakra-ui.com/docs/layout/grid
 */ var Grid = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var area = props.area, templateAreas = props.templateAreas, gap = props.gap, rowGap = props.rowGap, columnGap = props.columnGap, column = props.column, row = props.row, autoFlow = props.autoFlow, autoRows = props.autoRows, templateRows = props.templateRows, autoColumns = props.autoColumns, templateColumns = props.templateColumns, rest = _objectWithoutPropertiesLoose(props, [
        "area",
        "templateAreas",
        "gap",
        "rowGap",
        "columnGap",
        "column",
        "row",
        "autoFlow",
        "autoRows",
        "templateRows",
        "autoColumns",
        "templateColumns"
    ]);
    var styles = {
        display: "grid",
        gridArea: area,
        gridTemplateAreas: templateAreas,
        gridGap: gap,
        gridRowGap: rowGap,
        gridColumnGap: columnGap,
        gridAutoColumns: autoColumns,
        gridColumn: column,
        gridRow: row,
        gridAutoFlow: autoFlow,
        gridAutoRows: autoRows,
        gridTemplateRows: templateRows,
        gridTemplateColumns: templateColumns
    };
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        __css: styles
    }, rest)));
});
exports.Grid = Grid;
if (_utils.__DEV__) Grid.displayName = "Grid";
function spanFn(span) {
    return _utils.mapResponsive(span, function(value) {
        return value === "auto" ? "auto" : "span " + value + "/span " + value;
    });
}
var GridItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var colSpan = props.colSpan, colStart = props.colStart, colEnd = props.colEnd, rowEnd = props.rowEnd, rowSpan = props.rowSpan, rowStart = props.rowStart, rest = _objectWithoutPropertiesLoose(props, [
        "colSpan",
        "colStart",
        "colEnd",
        "rowEnd",
        "rowSpan",
        "rowStart"
    ]);
    var styles = _utils.filterUndefined({
        gridColumn: spanFn(colSpan),
        gridRow: spanFn(rowSpan),
        gridColumnStart: colStart,
        gridColumnEnd: colEnd,
        gridRowStart: rowStart,
        gridRowEnd: rowEnd
    });
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        __css: styles
    }, rest)));
});
exports.GridItem = GridItem;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"5xS3B":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Heading = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var Heading = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Heading", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.h2, _extends({
        ref: ref,
        className: _utils.cx("chakra-heading", props.className)
    }, rest, {
        __css: styles
    })));
});
exports.Heading = Heading;
if (_utils.__DEV__) Heading.displayName = "Heading";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"3uQvH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Kbd = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Semantic component to render a keyboard shortcut
 * within an application.
 *
 * @example
 *
 * ```jsx
 * <Kbd>⌘ + T</Kbd>
 * ```
 *
 * @see Docs https://chakra-ui.com/docs/data-display/kbd
 */ var Kbd = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Kbd", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.kbd, _extends({
        ref: ref,
        className: _utils.cx("chakra-kbd", className)
    }, rest, {
        __css: _extends({
            fontFamily: "mono"
        }, styles)
    })));
});
exports.Kbd = Kbd;
if (_utils.__DEV__) Kbd.displayName = "Kbd";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"5mo4p":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Link = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Links are accessible elements used primarily for navigation.
 *
 * It integrates well with other routing libraries like
 * React Router, Reach Router and Next.js Link.
 *
 * @example
 *
 * ```jsx
 * <Link as={ReactRouterLink} to="/home">Home</Link>
 * ```
 *
 * @see Docs https://chakra-ui.com/docs/layout/link
 */ var Link = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Link", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, isExternal = _omitThemingProps.isExternal, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "isExternal"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.a, _extends({
        target: isExternal ? "_blank" : undefined,
        rel: isExternal ? "noopener noreferrer" : undefined,
        ref: ref,
        className: _utils.cx("chakra-link", className)
    }, rest, {
        __css: styles
    })));
});
exports.Link = Link;
if (_utils.__DEV__) Link.displayName = "Link";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"1fp7g":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ListIcon = exports.ListItem = exports.UnorderedList = exports.OrderedList = exports.List = void 0;
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * List is used to display list items, it renders a `<ul>` by default.
 *
 * @see Docs https://chakra-ui.com/docs/data-display/list
 */ var List = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _ref;
    var styles = _system.useMultiStyleConfig("List", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, _omitThemingProps$sty = _omitThemingProps.styleType, styleType = _omitThemingProps$sty === void 0 ? "none" : _omitThemingProps$sty, stylePosition = _omitThemingProps.stylePosition, spacing = _omitThemingProps.spacing, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children",
        "styleType",
        "stylePosition",
        "spacing"
    ]);
    var validChildren = _reactUtils.getValidChildren(children);
    var selector = "& > *:not(style) ~ *:not(style)";
    var spacingStyle = spacing ? (_ref = {
    }, _ref[selector] = {
        mt: spacing
    }, _ref) : {
    };
    return(/*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.ul, _extends({
        ref: ref,
        listStyleType: styleType,
        listStylePosition: stylePosition,
        role: "list",
        __css: _extends({
        }, styles.container, spacingStyle)
    }, rest), validChildren)));
});
exports.List = List;
if (_utils.__DEV__) List.displayName = "List";
var OrderedList = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var as = props.as, rest = _objectWithoutPropertiesLoose(props, [
        "as"
    ]);
    return(/*#__PURE__*/ React.createElement(List, _extends({
        ref: ref,
        as: "ol",
        styleType: "decimal",
        marginStart: "1em"
    }, rest)));
});
exports.OrderedList = OrderedList;
if (_utils.__DEV__) OrderedList.displayName = "OrderedList";
var UnorderedList = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var as = props.as, rest = _objectWithoutPropertiesLoose(props, [
        "as"
    ]);
    return(/*#__PURE__*/ React.createElement(List, _extends({
        ref: ref,
        as: "ul",
        styleType: "initial",
        marginStart: "1em"
    }, rest)));
});
exports.UnorderedList = UnorderedList;
if (_utils.__DEV__) UnorderedList.displayName = "UnorderedList";
/**
 * ListItem
 *
 * Used to render a list item
 */ var ListItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.li, _extends({
        ref: ref
    }, props, {
        __css: styles.item
    })));
});
exports.ListItem = ListItem;
if (_utils.__DEV__) ListItem.displayName = "ListItem";
/**
 * ListIcon
 *
 * Used to render an icon beside the list item text
 */ var ListIcon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        ref: ref,
        role: "presentation"
    }, props, {
        __css: styles.icon
    })));
});
exports.ListIcon = ListIcon;
if (_utils.__DEV__) ListIcon.displayName = "ListIcon";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"6gldr":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.SimpleGrid = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _grid = require("./grid");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * SimpleGrid
 *
 * React component make that providers a simpler interface, and
 * make its easy to create responsive grid layouts.
 *
 * @see Docs https://chakra-ui.com/docs/layout/simple-grid
 */ var SimpleGrid = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var columns = props.columns, spacingX = props.spacingX, spacingY = props.spacingY, spacing = props.spacing, minChildWidth = props.minChildWidth, rest = _objectWithoutPropertiesLoose(props, [
        "columns",
        "spacingX",
        "spacingY",
        "spacing",
        "minChildWidth"
    ]);
    var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);
    return(/*#__PURE__*/ React.createElement(_grid.Grid, _extends({
        ref: ref,
        gap: spacing,
        columnGap: spacingX,
        rowGap: spacingY,
        templateColumns: templateColumns
    }, rest)));
});
exports.SimpleGrid = SimpleGrid;
if (_utils.__DEV__) SimpleGrid.displayName = "SimpleGrid";
function toPx(n) {
    return _utils.isNumber(n) ? n + "px" : n;
}
function widthToColumns(width) {
    return _utils.mapResponsive(width, function(value) {
        return _utils.isNull(value) ? null : "repeat(auto-fit, minmax(" + toPx(value) + ", 1fr))";
    });
}
function countToColumns(count) {
    return _utils.mapResponsive(count, function(value) {
        return _utils.isNull(value) ? null : "repeat(" + value + ", minmax(0, 1fr))";
    });
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./grid":"10eaT"}],"vIaEW":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Spacer = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
/**
 * A flexible flex spacer that expands along the major axis of its containing flex layout.
 * It renders a `div` by default, and takes up any available space.
 *
 * @see Docs https://chakra-ui.com/docs/layout/flex#using-the-spacer
 */ var Spacer = _system.chakra("div", {
    baseStyle: {
        flex: 1,
        justifySelf: "stretch",
        alignSelf: "stretch"
    }
});
exports.Spacer = Spacer;
if (_utils.__DEV__) Spacer.displayName = "Spacer";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O"}],"1yAGq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.VStack = exports.HStack = exports.Stack = exports.StackItem = exports.StackDivider = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _stack = require("./stack.utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var StackDivider = function StackDivider1(props) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: "chakra-stack__divider"
    }, props, {
        __css: _extends({
        }, props["__css"], {
            borderWidth: 0,
            alignSelf: "stretch",
            borderColor: "inherit",
            width: "auto",
            height: "auto"
        })
    })));
};
exports.StackDivider = StackDivider;
var StackItem = function StackItem1(props) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: "chakra-stack__item"
    }, props, {
        __css: _extends({
            display: "inline-block",
            flex: "0 0 auto",
            minWidth: 0
        }, props["__css"])
    })));
};
exports.StackItem = StackItem;
/**
 * Stacks help you easily create flexible and automatically distributed layouts
 *
 * You can stack elements in the horizontal or vertical direction,
 * and apply a space or/and divider between each element.
 *
 * It uses `display: flex` internally and renders a `div`.
 *
 * @see Docs https://chakra-ui.com/docs/layout/stack
 *
 */ var Stack = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _ref;
    var isInline = props.isInline, directionProp = props.direction, align = props.align, justify = props.justify, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, wrap = props.wrap, children = props.children, divider = props.divider, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose(props, [
        "isInline",
        "direction",
        "align",
        "justify",
        "spacing",
        "wrap",
        "children",
        "divider",
        "className",
        "shouldWrapChildren"
    ]);
    var direction = isInline ? "row" : directionProp != null ? directionProp : "column";
    var styles = React.useMemo(function() {
        return _stack.getStackStyles({
            direction: direction,
            spacing: spacing
        });
    }, [
        direction,
        spacing
    ]);
    var dividerStyle = React.useMemo(function() {
        return _stack.getDividerStyles({
            spacing: spacing,
            direction: direction
        });
    }, [
        spacing,
        direction
    ]);
    var hasDivider = !!divider;
    var shouldUseChildren = !shouldWrapChildren && !hasDivider;
    var validChildren = _reactUtils.getValidChildren(children);
    var clones = shouldUseChildren ? validChildren : validChildren.map(function(child, index) {
        var isLast = index + 1 === validChildren.length;
        var wrappedChild = /*#__PURE__*/ React.createElement(StackItem, {
            key: index
        }, child);
        var _child = shouldWrapChildren ? wrappedChild : child;
        if (!hasDivider) return _child;
        var clonedDivider = /*#__PURE__*/ React.cloneElement(divider, {
            __css: dividerStyle
        });
        var _divider = isLast ? null : clonedDivider;
        return(/*#__PURE__*/ React.createElement(React.Fragment, {
            key: index
        }, _child, _divider));
    });
    var _className = _utils.cx("chakra-stack", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        display: "flex",
        alignItems: align,
        justifyContent: justify,
        flexDirection: styles.flexDirection,
        flexWrap: wrap,
        className: _className,
        __css: hasDivider ? {
        } : (_ref = {
        }, _ref[_stack.selector] = styles[_stack.selector], _ref)
    }, rest), clones));
});
exports.Stack = Stack;
if (_utils.__DEV__) Stack.displayName = "Stack";
/**
 * A view that arranges its children in a horizontal line.
 */ var HStack = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(Stack, _extends({
        align: "center"
    }, props, {
        direction: "row",
        ref: ref
    })));
});
exports.HStack = HStack;
if (_utils.__DEV__) HStack.displayName = "HStack";
/**
 * A view that arranges its children in a vertical line.
 */ var VStack = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(Stack, _extends({
        align: "center"
    }, props, {
        direction: "column",
        ref: ref
    })));
});
exports.VStack = VStack;
if (_utils.__DEV__) VStack.displayName = "VStack";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./stack.utils":"9wNjN"}],"9wNjN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getStackStyles = getStackStyles;
exports.getDividerStyles = getDividerStyles;
exports.selector = void 0;
var _utils = require("@chakra-ui/utils");
/**
 * If we ever run into SSR issues with this, check this post to find a fix for it:
 * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c
 */ var selector = "& > *:not(style) ~ *:not(style)";
exports.selector = selector;
function getStackStyles(options) {
    var _ref;
    var spacing = options.spacing, direction = options.direction;
    var directionStyles = {
        column: {
            marginTop: spacing,
            marginEnd: 0,
            marginBottom: 0,
            marginStart: 0
        },
        row: {
            marginTop: 0,
            marginEnd: 0,
            marginBottom: 0,
            marginStart: spacing
        },
        "column-reverse": {
            marginTop: 0,
            marginEnd: 0,
            marginBottom: spacing,
            marginStart: 0
        },
        "row-reverse": {
            marginTop: 0,
            marginEnd: spacing,
            marginBottom: 0,
            marginStart: 0
        }
    };
    return _ref = {
        flexDirection: direction
    }, _ref[selector] = _utils.mapResponsive(direction, function(value) {
        return directionStyles[value];
    }), _ref;
}
function getDividerStyles(options) {
    var spacing = options.spacing, direction = options.direction;
    var dividerStyles = {
        column: {
            my: spacing,
            mx: 0,
            borderLeftWidth: 0,
            borderBottomWidth: "1px"
        },
        "column-reverse": {
            my: spacing,
            mx: 0,
            borderLeftWidth: 0,
            borderBottomWidth: "1px"
        },
        row: {
            mx: spacing,
            my: 0,
            borderLeftWidth: "1px",
            borderBottomWidth: 0
        },
        "row-reverse": {
            mx: spacing,
            my: 0,
            borderLeftWidth: "1px",
            borderBottomWidth: 0
        }
    };
    return {
        "&": _utils.mapResponsive(direction, function(value) {
            return dividerStyles[value];
        })
    };
}

},{"@chakra-ui/utils":"3364O"}],"32SaE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Text = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Used to render texts or paragraphs.
 *
 * @see Docs https://chakra-ui.com/docs/typography/text
 */ var Text1 = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Text", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, align = _omitThemingProps.align, decoration = _omitThemingProps.decoration, casing = _omitThemingProps.casing, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "align",
        "decoration",
        "casing"
    ]);
    var aliasedProps = _utils.filterUndefined({
        textAlign: props.align,
        textDecoration: props.decoration,
        textTransform: props.casing
    });
    return(/*#__PURE__*/ React.createElement(_system.chakra.p, _extends({
        ref: ref,
        className: _utils.cx("chakra-text", props.className)
    }, aliasedProps, rest, {
        __css: styles
    })));
});
exports.Text = Text1;
if (_utils.__DEV__) Text1.displayName = "Text";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"65pTk":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.WrapItem = exports.Wrap = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Layout component used to stack elements that differ in length
 * and are liable to wrap.
 *
 * Common use cases:
 * - Buttons that appear together at the end of forms
 * - Lists of tags and chips
 *
 * @see Docs https://chakra-ui.com/docs/layout/wrap
 */ var Wrap = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, children = props.children, justify = props.justify, direction = props.direction, align = props.align, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose(props, [
        "spacing",
        "children",
        "justify",
        "direction",
        "align",
        "className",
        "shouldWrapChildren"
    ]);
    var styles = React.useMemo(function() {
        return {
            "--chakra-wrap-spacing": function chakraWrapSpacing(theme) {
                return _utils.mapResponsive(spacing, function(value) {
                    return _system.tokenToCSSVar("space", value)(theme);
                });
            },
            "--wrap-spacing": "calc(var(--chakra-wrap-spacing) / 2)",
            display: "flex",
            flexWrap: "wrap",
            justifyContent: justify,
            alignItems: align,
            flexDirection: direction,
            listStyleType: "none",
            padding: "0",
            margin: "calc(var(--wrap-spacing) * -1)",
            "& > *:not(style)": {
                margin: "var(--wrap-spacing)"
            }
        };
    }, [
        spacing,
        justify,
        align,
        direction
    ]);
    var childrenToRender = shouldWrapChildren ? React.Children.map(children, function(child, index) {
        return(/*#__PURE__*/ React.createElement(WrapItem, {
            key: index
        }, child));
    }) : children;
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-wrap", className)
    }, rest), /*#__PURE__*/ React.createElement(_system.chakra.ul, {
        className: "chakra-wrap__list",
        __css: styles
    }, childrenToRender)));
});
exports.Wrap = Wrap;
if (_utils.__DEV__) Wrap.displayName = "Wrap";
var WrapItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.li, _extends({
        ref: ref,
        __css: {
            display: "flex",
            alignItems: "flex-start"
        },
        className: _utils.cx("chakra-wrap__listitem", className)
    }, rest)));
});
exports.WrapItem = WrapItem;
if (_utils.__DEV__) WrapItem.displayName = "WrapItem";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"7aZns":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.LinkBox = exports.LinkOverlay = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var LinkOverlay = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var isExternal = props.isExternal, target = props.target, rel = props.rel, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "isExternal",
        "target",
        "rel",
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.a, _extends({
    }, rest, {
        ref: ref,
        className: _utils.cx("chakra-linkbox__overlay", className),
        rel: isExternal ? "noopener noreferrer" : rel,
        target: isExternal ? "_blank" : target,
        __css: {
            position: "static",
            "&::before": {
                content: "''",
                cursor: "inherit",
                display: "block",
                position: "absolute",
                top: 0,
                left: 0,
                zIndex: 0,
                width: "100%",
                height: "100%"
            }
        }
    })));
});
exports.LinkOverlay = LinkOverlay;
/**
 * `LinkBox` is used to wrap content areas within a link while ensuring semantic html
 *
 * @see Docs https://www.chakra-ui.com/docs/link-overlay
 * @see Resources https://www.sarasoueidan.com/blog/nested-links
 */ var LinkBox = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        position: "relative"
    }, rest, {
        className: _utils.cx("chakra-linkbox", className),
        __css: {
            /* Elevate the links and abbreviations up */ "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
                position: "relative",
                zIndex: 1
            }
        }
    })));
});
exports.LinkBox = LinkBox;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"4NQXd":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _mediaQuery = require("./media-query");
Object.keys(_mediaQuery).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _mediaQuery[key]) return;
    exports[key] = _mediaQuery[key];
});
var _mediaQuery2 = require("./media-query.hook");
Object.keys(_mediaQuery2).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _mediaQuery2[key]) return;
    exports[key] = _mediaQuery2[key];
});
var _useBreakpoint = require("./use-breakpoint");
Object.keys(_useBreakpoint).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useBreakpoint[key]) return;
    exports[key] = _useBreakpoint[key];
});
var _useMediaQuery = require("./use-media-query");
Object.keys(_useMediaQuery).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useMediaQuery[key]) return;
    exports[key] = _useMediaQuery[key];
});
var _useBreakpointValue = require("./use-breakpoint-value");
Object.keys(_useBreakpointValue).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useBreakpointValue[key]) return;
    exports[key] = _useBreakpointValue[key];
});

},{"./media-query":"iET25","./media-query.hook":"5SXab","./use-breakpoint":"1blaZ","./use-media-query":"2WuOH","./use-breakpoint-value":"2wnG5"}],"iET25":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useQuery = useQuery;
exports.Show = exports.Hide = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useMediaQuery2 = require("./use-media-query");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
/**
 * Visibility
 *
 * React component to control the visibility of its
 * children based on the current breakpoint
 */ var Visibility = function Visibility1(props) {
    var breakpoint = props.breakpoint, hide = props.hide, children = props.children;
    var _useMediaQuery = _useMediaQuery2.useMediaQuery(breakpoint), show = _useMediaQuery[0];
    var isVisible = hide ? !show : show;
    var rendered = isVisible ? children : null;
    return rendered;
};
var Hide = function Hide1(props) {
    var children = props.children;
    var query = useQuery(props);
    return(/*#__PURE__*/ React.createElement(Visibility, {
        breakpoint: query,
        hide: true
    }, children));
};
exports.Hide = Hide;
if (_utils.__DEV__) Hide.displayName = "Hide";
var Show = function Show1(props) {
    var children = props.children;
    var query = useQuery(props);
    return(/*#__PURE__*/ React.createElement(Visibility, {
        breakpoint: query
    }, children));
};
exports.Show = Show;
if (_utils.__DEV__) Show.displayName = "Show";
var getBreakpoint = function getBreakpoint1(theme, value) {
    return _utils.memoizedGet(theme, "breakpoints." + value, value);
};
function useQuery(props) {
    var _props$breakpoint = props.breakpoint, breakpoint = _props$breakpoint === void 0 ? "" : _props$breakpoint, below = props.below, above = props.above;
    var theme = _system.useTheme();
    var bpBelow = getBreakpoint(theme, below);
    var bpAbove = getBreakpoint(theme, above);
    var query = breakpoint;
    if (bpBelow) query = "(max-width: " + bpBelow + ")";
    else if (bpAbove) query = "(min-width: " + bpAbove + ")";
    return query;
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./use-media-query":"2WuOH"}],"2WuOH":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useMediaQuery = useMediaQuery;
var _reactEnv = require("@chakra-ui/react-env");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var useSafeLayoutEffect = _utils.isBrowser ? React.useLayoutEffect : React.useEffect;
/**
 * React hook that tracks state of a CSS media query
 *
 * @param query the media query to match
 */ function useMediaQuery(query) {
    var env = _reactEnv.useEnvironment();
    var queries = Array.isArray(query) ? query : [
        query
    ];
    var isSupported = _utils.isBrowser && "matchMedia" in env.window;
    var _React$useState = React.useState(queries.map(function(query1) {
        return isSupported ? !!env.window.matchMedia(query1).matches : false;
    })), matches = _React$useState[0], setMatches = _React$useState[1];
    useSafeLayoutEffect(function() {
        if (!isSupported) return undefined;
        var mediaQueryList = queries.map(function(query1) {
            return env.window.matchMedia(query1);
        });
        var listenerList = mediaQueryList.map(function(mediaQuery, index) {
            var listener = function listener1() {
                return setMatches(function(prev) {
                    return prev.map(function(prevValue, idx) {
                        return index === idx ? !!mediaQuery.matches : prevValue;
                    });
                });
            };
            mediaQuery.addListener(listener);
            return listener;
        });
        return function() {
            mediaQueryList.forEach(function(mediaQuery, index) {
                mediaQuery.removeListener(listenerList[index]);
            });
        };
    }, [
        query
    ]);
    return matches;
}

},{"@chakra-ui/react-env":"327HV","@chakra-ui/utils":"3364O","react":"3f97z"}],"5SXab":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePrefersReducedMotion = usePrefersReducedMotion;
exports.useColorModePreference = useColorModePreference;
var _useMediaQuery3 = require("./use-media-query");
/**
 * React hook used to get the user's animation preference.
 */ function usePrefersReducedMotion() {
    var _useMediaQuery = _useMediaQuery3.useMediaQuery("(prefers-reduced-motion: reduce)"), prefersReducedMotion = _useMediaQuery[0];
    return prefersReducedMotion;
}
/**
 * React hook for getting the user's color mode preference.
 */ function useColorModePreference() {
    var _useMediaQuery2 = _useMediaQuery3.useMediaQuery([
        "(prefers-color-scheme: light)",
        "(prefers-color-scheme: dark)"
    ]), isDark = _useMediaQuery2[0], isLight = _useMediaQuery2[1];
    if (isLight) return "light";
    if (isDark) return "dark";
    return undefined;
}

},{"./use-media-query":"2WuOH"}],"1blaZ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useBreakpoint = useBreakpoint;
var _reactEnv = require("@chakra-ui/react-env");
var _system = require("@chakra-ui/system");
var _react = _interopRequireDefault(require("react"));
var _createMediaQuery = _interopRequireDefault(require("./create-media-query"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * React hook used to get the current responsive media breakpoint.
 *
 * @param defaultBreakpoint default breakpoint name
 * (in non-window environments like SSR)
 *
 * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)
 * to get the default breakpoint value from the user-agent
 */ function useBreakpoint(defaultBreakpoint) {
    var _useTheme = _system.useTheme(), breakpoints = _useTheme.breakpoints;
    var env = _reactEnv.useEnvironment();
    var mediaQueries = _react["default"].useMemo(function() {
        return _createMediaQuery["default"](_extends({
            base: "0px"
        }, breakpoints));
    }, [
        breakpoints
    ]);
    var _React$useState = _react["default"].useState(function() {
        if (!defaultBreakpoint) return undefined;
        var mediaQuery = mediaQueries.find(function(_ref) {
            var breakpoint = _ref.breakpoint;
            return breakpoint === defaultBreakpoint;
        });
        if (mediaQuery) {
            var query = mediaQuery.query, breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [
                "query"
            ]);
            return breakpoint;
        }
        return undefined;
    }), currentBreakpoint = _React$useState[0], setCurrentBreakpoint = _React$useState[1];
    var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;
    var update = _react["default"].useCallback(function(query, breakpoint) {
        if (query.matches && current !== breakpoint.breakpoint) setCurrentBreakpoint(breakpoint);
    }, [
        current
    ]);
    _react["default"].useEffect(function() {
        var listeners = new Set();
        mediaQueries.forEach(function(_ref2) {
            var query = _ref2.query, breakpoint = _objectWithoutPropertiesLoose(_ref2, [
                "query"
            ]);
            var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query
            update(mediaQuery, breakpoint);
            var handleChange = function handleChange1() {
                update(mediaQuery, breakpoint);
            }; // add media query-listener
            mediaQuery.addListener(handleChange); // push the media query list handleChange
            // so we can use it to remove Listener
            listeners.add({
                mediaQuery: mediaQuery,
                handleChange: handleChange
            });
            return function() {
                // clean up 1
                mediaQuery.removeListener(handleChange);
            };
        });
        return function() {
            // clean up 2: for safety
            listeners.forEach(function(_ref3) {
                var mediaQuery = _ref3.mediaQuery, handleChange = _ref3.handleChange;
                mediaQuery.removeListener(handleChange);
            });
            listeners.clear();
        };
    }, [
        mediaQueries,
        breakpoints,
        update,
        env.window
    ]);
    return current;
}

},{"@chakra-ui/react-env":"327HV","@chakra-ui/system":"4QBuE","react":"3f97z","./create-media-query":"5sJGQ"}],"5sJGQ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = createMediaQueries;
var _utils = require("@chakra-ui/utils");
function createMediaQueries(breakpoints) {
    return Object.entries(breakpoints)// in the correct order and reference to each other correctly aswell
    .sort(function(a, b) {
        return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;
    }).map(function(_ref, index, arr) {
        var breakpoint = _ref[0], minWidth = _ref[1];
        // given a following breakpoint
        var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next
        var maxWidth = next ? next[1] : undefined;
        var query = createMediaQueryString(minWidth, maxWidth);
        return {
            minWidth: minWidth,
            maxWidth: maxWidth,
            breakpoint: breakpoint,
            query: query
        };
    });
}
/**
 * Create a media query string from the breakpoints,
 * using a combination of `min-width` and `max-width`.
 */ function createMediaQueryString(minWidth, maxWidth) {
    var hasMinWidth = parseInt(minWidth, 10) >= 0;
    if (!hasMinWidth && !maxWidth) return "";
    var query = "(min-width: " + toMediaString(minWidth) + ")";
    if (!maxWidth) return query;
    if (query) query += " and ";
    query += "(max-width: " + toMediaString(subtract(maxWidth)) + ")";
    return query;
}
var measurementRegex = /([0-9]+\.?[0-9]*)/;
var calculateMeasurement = function calculateMeasurement1(value, modifier) {
    if (typeof value === "number") return "" + (value + modifier);
    return value.replace(measurementRegex, function(match) {
        return "" + (parseFloat(match) + modifier);
    });
};
/**
 * 0.01 and 0.1 are too small of a difference for `px` breakpoint values
 *
 * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785
 */ function subtract(value) {
    return calculateMeasurement(value, value.endsWith("px") ? -1 : -0.01);
}
/**
 * Convert media query value to string
 */ function toMediaString(value) {
    return _utils.isNumber(value) ? value + "px" : value;
}

},{"@chakra-ui/utils":"3364O"}],"2wnG5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useBreakpointValue = useBreakpointValue;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _mediaQuery = require("./media-query.utils");
var _useBreakpoint = require("./use-breakpoint");
/**
 * React hook for getting the value for the current breakpoint from the
 * provided responsive values object.
 *
 * @example
 * const width = useBreakpointValue({ base: '150px', md: '250px' })
 */ function useBreakpointValue(values) {
    var breakpoint = _useBreakpoint.useBreakpoint();
    var theme = _system.useTheme();
    if (!breakpoint) return undefined;
    /**
   * Get the non-number breakpoint keys from the provided breakpoints
   */ var breakpoints = Object.keys(theme.breakpoints);
    var obj = _utils.isArray(values) ? _utils.fromEntries(Object.entries(_utils.arrayToObjectNotation(values, breakpoints)).map(function(_ref) {
        var key = _ref[0], value = _ref[1];
        return [
            key,
            value
        ];
    })) : values;
    return _mediaQuery.getClosestValue(obj, breakpoint, breakpoints);
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","./media-query.utils":"3G0RN","./use-breakpoint":"1blaZ"}],"3G0RN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getClosestValue = getClosestValue;
var _utils = require("@chakra-ui/utils");
function getClosestValue(values, breakpoint, breakpoints) {
    if (breakpoints === void 0) breakpoints = _utils.breakpoints;
    var index = Object.keys(values).indexOf(breakpoint);
    if (index !== -1) return values[breakpoint];
    var stopIndex = breakpoints.indexOf(breakpoint);
    while(stopIndex >= 0){
        var key = breakpoints[stopIndex];
        if (values[key] != null) {
            index = stopIndex;
            break;
        }
        stopIndex -= 1;
    }
    if (index !== -1) {
        var _key = breakpoints[index];
        return values[_key];
    }
    return undefined;
}

},{"@chakra-ui/utils":"3364O"}],"2cjKt":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _table = require("./table");
Object.keys(_table).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _table[key]) return;
    exports[key] = _table[key];
});

},{"./table":"ceJ4e"}],"ceJ4e":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Td = exports.Tr = exports.Th = exports.Tfoot = exports.Tbody = exports.Thead = exports.TableCaption = exports.Table = exports.TableContainer = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var TableContainer = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _ref;
    var overflow = props.overflow, overflowX = props.overflowX, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "overflow",
        "overflowX",
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        className: _utils.cx("chakra-table__container", className)
    }, rest, {
        __css: {
            display: "block",
            whiteSpace: "nowrap",
            WebkitOverflowScrolling: "touch",
            overflowX: (_ref = overflow != null ? overflow : overflowX) != null ? _ref : "auto",
            overflowY: "hidden",
            maxWidth: "100%"
        }
    })));
});
exports.TableContainer = TableContainer;
var Table = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Table", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, tableProps = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.table, _extends({
        role: "table",
        ref: ref,
        __css: styles.table,
        className: _utils.cx("chakra-table", className)
    }, tableProps))));
});
exports.Table = Table;
if (_utils.__DEV__) Table.displayName = "Table";
var TableCaption = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$placement = props.placement, placement = _props$placement === void 0 ? "bottom" : _props$placement, rest = _objectWithoutPropertiesLoose(props, [
        "placement"
    ]);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.caption, _extends({
    }, rest, {
        ref: ref,
        __css: _extends({
        }, styles.caption, {
            captionSide: placement
        })
    })));
});
exports.TableCaption = TableCaption;
if (_utils.__DEV__) TableCaption.displayName = "TableCaption";
var Thead = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.thead, _extends({
    }, props, {
        ref: ref,
        __css: styles.thead
    })));
});
exports.Thead = Thead;
var Tbody = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.tbody, _extends({
    }, props, {
        ref: ref,
        __css: styles.tbody
    })));
});
exports.Tbody = Tbody;
var Tfoot = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.tfoot, _extends({
    }, props, {
        ref: ref,
        __css: styles.tfoot
    })));
});
exports.Tfoot = Tfoot;
var Th = /*#__PURE__*/ _system.forwardRef(function(_ref2, ref) {
    var isNumeric = _ref2.isNumeric, rest = _objectWithoutPropertiesLoose(_ref2, [
        "isNumeric"
    ]);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.th, _extends({
    }, rest, {
        ref: ref,
        __css: styles.th,
        "data-is-numeric": isNumeric
    })));
});
exports.Th = Th;
var Tr = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.tr, _extends({
        role: "row"
    }, props, {
        ref: ref,
        __css: styles.tr
    })));
});
exports.Tr = Tr;
var Td = /*#__PURE__*/ _system.forwardRef(function(_ref3, ref) {
    var isNumeric = _ref3.isNumeric, rest = _objectWithoutPropertiesLoose(_ref3, [
        "isNumeric"
    ]);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.td, _extends({
        role: "gridcell"
    }, rest, {
        ref: ref,
        __css: styles.td,
        "data-is-numeric": isNumeric
    })));
});
exports.Td = Td;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"6hshx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _menu = require("./menu");
Object.keys(_menu).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _menu[key]) return;
    exports[key] = _menu[key];
});
var _useMenu = require("./use-menu");
Object.keys(_useMenu).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useMenu[key]) return;
    exports[key] = _useMenu[key];
});

},{"./menu":"38ouV","./use-menu":"Y00Ux"}],"38ouV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.MenuDivider = exports.MenuIcon = exports.MenuCommand = exports.MenuGroup = exports.MenuOptionGroup = exports.MenuItemOption = exports.MenuItem = exports.MenuList = exports.MenuButton = exports.Menu = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _useMenu2 = require("./use-menu");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Menu provides context, state, and focus management
 * to its sub-components. It doesn't render any DOM node.
 */ var Menu = function Menu1(props) {
    var children = props.children;
    var styles = _system.useMultiStyleConfig("Menu", props);
    var ownProps = _system.omitThemingProps(props);
    var _useMenu = _useMenu2.useMenu(ownProps), descendants = _useMenu.descendants, ctx = _objectWithoutPropertiesLoose(_useMenu, [
        "descendants"
    ]);
    var context = React.useMemo(function() {
        return ctx;
    }, [
        ctx
    ]);
    var isOpen = context.isOpen, onClose = context.onClose, forceUpdate = context.forceUpdate;
    return(/*#__PURE__*/ React.createElement(_useMenu2.MenuDescendantsProvider, {
        value: descendants
    }, /*#__PURE__*/ React.createElement(_useMenu2.MenuProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, _utils.runIfFn(children, {
        isOpen: isOpen,
        onClose: onClose,
        forceUpdate: forceUpdate
    })))));
};
exports.Menu = Menu;
if (_utils.__DEV__) Menu.displayName = "Menu";
var StyledMenuButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
        ref: ref
    }, props, {
        __css: _extends({
            display: "inline-flex",
            appearance: "none",
            alignItems: "center",
            outline: 0,
            transition: "all 250ms"
        }, styles.button)
    })));
});
/**
 * The trigger for the menu list. Must be a direct child of `Menu`.
 */ var MenuButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var children = props.children, As = props.as, rest = _objectWithoutPropertiesLoose(props, [
        "children",
        "as"
    ]);
    var buttonProps = _useMenu2.useMenuButton(rest, ref);
    var Element1 = As || StyledMenuButton;
    return(/*#__PURE__*/ React.createElement(Element1, _extends({
    }, buttonProps, {
        className: _utils.cx("chakra-menu__menu-button", props.className)
    }), /*#__PURE__*/ React.createElement(_system.chakra.span, {
        __css: {
            pointerEvents: "none",
            flex: "1 1 auto",
            minW: 0
        }
    }, props.children)));
});
exports.MenuButton = MenuButton;
if (_utils.__DEV__) MenuButton.displayName = "MenuButton";
var motionVariants = {
    enter: {
        visibility: "visible",
        opacity: 1,
        scale: 1,
        transition: {
            duration: 0.2,
            ease: [
                0.4,
                0,
                0.2,
                1
            ]
        }
    },
    exit: {
        transitionEnd: {
            visibility: "hidden"
        },
        opacity: 0,
        scale: 0.8,
        transition: {
            duration: 0.1,
            easings: "easeOut"
        }
    }
}; // @future: only call `motion(chakra.div)` when we drop framer-motion v3 support
var MotionDiv = "custom" in _framerMotion.motion ? _framerMotion.motion.custom(_system.chakra.div) : _framerMotion.motion(_system.chakra.div);
var MenuList = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$zIndex, _styles$list;
    var rootProps = props.rootProps, rest = _objectWithoutPropertiesLoose(props, [
        "rootProps"
    ]);
    var _useMenuContext = _useMenu2.useMenuContext(), isOpen = _useMenuContext.isOpen, onTransitionEnd = _useMenuContext.onTransitionEnd;
    var menulistProps = _useMenu2.useMenuList(rest, ref);
    var positionerProps = _useMenu2.useMenuPositioner(rootProps);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, positionerProps, {
        __css: {
            zIndex: (_props$zIndex = props.zIndex) != null ? _props$zIndex : (_styles$list = styles.list) == null ? void 0 : _styles$list.zIndex
        }
    }), /*#__PURE__*/ React.createElement(MotionDiv, _extends({
    }, menulistProps, {
        /**
     * We could call this on either `onAnimationComplete` or `onUpdate`.
     * It seems the re-focusing works better with the `onUpdate`
     */ onUpdate: onTransitionEnd,
        className: _utils.cx("chakra-menu__menu-list", menulistProps.className),
        variants: motionVariants,
        initial: false,
        animate: isOpen ? "enter" : "exit",
        __css: _extends({
            outline: 0
        }, styles.list)
    }))));
});
exports.MenuList = MenuList;
if (_utils.__DEV__) MenuList.displayName = "MenuList";
var StyledMenuItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var type = props.type, rest = _objectWithoutPropertiesLoose(props, [
        "type"
    ]);
    var styles = _system.useStyles();
    /**
   * Given another component, use its type if present
   * Else, use no type to avoid invalid html, e.g. <a type="button" />
   * Else, fall back to "button"
   */ var btnType = rest.as ? type != null ? type : undefined : "button";
    var buttonStyles = _extends({
        textDecoration: "none",
        color: "inherit",
        userSelect: "none",
        display: "flex",
        width: "100%",
        alignItems: "center",
        textAlign: "start",
        flex: "0 0 auto",
        outline: 0
    }, styles.item);
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
        ref: ref,
        type: btnType
    }, rest, {
        __css: buttonStyles
    })));
});
var MenuItem = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var icon = props.icon, _props$iconSpacing = props.iconSpacing, iconSpacing = _props$iconSpacing === void 0 ? "0.75rem" : _props$iconSpacing, command = props.command, _props$commandSpacing = props.commandSpacing, commandSpacing = _props$commandSpacing === void 0 ? "0.75rem" : _props$commandSpacing, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "icon",
        "iconSpacing",
        "command",
        "commandSpacing",
        "children"
    ]);
    var menuitemProps = _useMenu2.useMenuItem(rest, ref);
    var shouldWrap = icon || command;
    var _children = shouldWrap ? /*#__PURE__*/ React.createElement("span", {
        style: {
            pointerEvents: "none",
            flex: 1
        }
    }, children) : children;
    return(/*#__PURE__*/ React.createElement(StyledMenuItem, _extends({
    }, menuitemProps, {
        className: _utils.cx("chakra-menu__menuitem", menuitemProps.className)
    }), icon && /*#__PURE__*/ React.createElement(MenuIcon, {
        fontSize: "0.8em",
        marginEnd: iconSpacing
    }, icon), _children, command && /*#__PURE__*/ React.createElement(MenuCommand, {
        marginStart: commandSpacing
    }, command)));
});
exports.MenuItem = MenuItem;
if (_utils.__DEV__) MenuItem.displayName = "MenuItem";
var CheckIcon = function CheckIcon1(props) {
    return(/*#__PURE__*/ React.createElement("svg", _extends({
        viewBox: "0 0 14 14",
        width: "1em",
        height: "1em"
    }, props), /*#__PURE__*/ React.createElement("polygon", {
        fill: "currentColor",
        points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
    })));
};
var MenuItemOption = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var icon = props.icon, _props$iconSpacing2 = props.iconSpacing, iconSpacing = _props$iconSpacing2 === void 0 ? "0.75rem" : _props$iconSpacing2, rest = _objectWithoutPropertiesLoose(props, [
        "icon",
        "iconSpacing"
    ]);
    var optionProps = _useMenu2.useMenuOption(rest, ref);
    return(/*#__PURE__*/ React.createElement(StyledMenuItem, _extends({
    }, optionProps, {
        className: _utils.cx("chakra-menu__menuitem-option", rest.className)
    }), /*#__PURE__*/ React.createElement(MenuIcon, {
        fontSize: "0.8em",
        marginEnd: iconSpacing,
        opacity: props.isChecked ? 1 : 0
    }, icon || /*#__PURE__*/ React.createElement(CheckIcon, null)), /*#__PURE__*/ React.createElement("span", {
        style: {
            flex: 1
        }
    }, optionProps.children)));
});
exports.MenuItemOption = MenuItemOption;
MenuItemOption.id = "MenuItemOption";
if (_utils.__DEV__) MenuItemOption.displayName = "MenuItemOption";
var MenuOptionGroup = function MenuOptionGroup1(props) {
    var className = props.className, title = props.title, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "title"
    ]);
    var ownProps = _useMenu2.useMenuOptionGroup(rest);
    return(/*#__PURE__*/ React.createElement(MenuGroup, _extends({
        title: title,
        className: _utils.cx("chakra-menu__option-group", className)
    }, ownProps)));
};
exports.MenuOptionGroup = MenuOptionGroup;
if (_utils.__DEV__) MenuOptionGroup.displayName = "MenuOptionGroup";
var MenuGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var title = props.title, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "title",
        "children",
        "className"
    ]);
    var _className = _utils.cx("chakra-menu__group__title", className);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement("div", {
        ref: ref,
        className: "chakra-menu__group",
        role: "group"
    }, title && /*#__PURE__*/ React.createElement(_system.chakra.p, _extends({
        className: _className
    }, rest, {
        __css: styles.groupTitle
    }), title), children));
});
exports.MenuGroup = MenuGroup;
if (_utils.__DEV__) MenuGroup.displayName = "MenuGroup";
var MenuCommand = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref
    }, props, {
        __css: styles.command,
        className: "chakra-menu__command"
    })));
});
exports.MenuCommand = MenuCommand;
if (_utils.__DEV__) MenuCommand.displayName = "MenuCommand";
var MenuIcon = function MenuIcon1(props) {
    var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "children"
    ]);
    var child = React.Children.only(children);
    var clone = /*#__PURE__*/ React.isValidElement(child) ? /*#__PURE__*/ React.cloneElement(child, {
        focusable: "false",
        "aria-hidden": true,
        className: _utils.cx("chakra-menu__icon", child.props.className)
    }) : null;
    var _className = _utils.cx("chakra-menu__icon-wrapper", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        className: _className
    }, rest, {
        __css: {
            flexShrink: 0
        }
    }), clone));
};
exports.MenuIcon = MenuIcon;
if (_utils.__DEV__) MenuIcon.displayName = "MenuIcon";
var MenuDivider = function MenuDivider1(props) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.hr, _extends({
        role: "separator",
        "aria-orientation": "horizontal",
        className: _utils.cx("chakra-menu__divider", className)
    }, rest, {
        __css: styles.divider
    })));
};
exports.MenuDivider = MenuDivider;
if (_utils.__DEV__) MenuDivider.displayName = "MenuDivider";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./use-menu":"Y00Ux"}],"Y00Ux":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useMenu = useMenu;
exports.useMenuButton = useMenuButton;
exports.useMenuList = useMenuList;
exports.useMenuPositioner = useMenuPositioner;
exports.useMenuItem = useMenuItem;
exports.useMenuOption = useMenuOption;
exports.useMenuOptionGroup = useMenuOptionGroup;
exports.useMenuState = useMenuState;
exports.useMenuContext = exports.MenuProvider = exports.useMenuDescendant = exports.useMenuDescendants = exports.useMenuDescendantsContext = exports.MenuDescendantsProvider = void 0;
var _clickable = require("@chakra-ui/clickable");
var _descendant = require("@chakra-ui/descendant");
var _hooks = require("@chakra-ui/hooks");
var _popper = require("@chakra-ui/popper");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/ var _createDescendantCont = _descendant.createDescendantContext(), MenuDescendantsProvider = _createDescendantCont[0], useMenuDescendantsContext = _createDescendantCont[1], useMenuDescendants = _createDescendantCont[2], useMenuDescendant = _createDescendantCont[3];
/* -------------------------------------------------------------------------------------------------
 * Create context to track menu state and logic
 * -----------------------------------------------------------------------------------------------*/ exports.useMenuDescendant = useMenuDescendant;
exports.useMenuDescendants = useMenuDescendants;
exports.useMenuDescendantsContext = useMenuDescendantsContext;
exports.MenuDescendantsProvider = MenuDescendantsProvider;
var _createContext = _reactUtils.createContext({
    strict: false,
    name: "MenuContext"
}), MenuProvider = _createContext[0], useMenuContext = _createContext[1];
/* -------------------------------------------------------------------------------------------------
 * useMenu hook
 * -----------------------------------------------------------------------------------------------*/ exports.useMenuContext = useMenuContext;
exports.MenuProvider = MenuProvider;
/**
 * React Hook to manage a menu
 *
 * It provides the logic and will be used with react context
 * to propagate its return value to all children
 */ function useMenu(props) {
    if (props === void 0) props = {
    };
    var _props = props, id = _props.id, _props$closeOnSelect = _props.closeOnSelect, closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect, _props$closeOnBlur = _props.closeOnBlur, closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur, _props$autoSelect = _props.autoSelect, autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect, isLazy = _props.isLazy, isOpenProp = _props.isOpen, defaultIsOpen = _props.defaultIsOpen, onCloseProp = _props.onClose, onOpenProp = _props.onOpen, _props$placement = _props.placement, placement = _props$placement === void 0 ? "bottom-start" : _props$placement, _props$lazyBehavior = _props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, popperProps = _objectWithoutPropertiesLoose(_props, [
        "id",
        "closeOnSelect",
        "closeOnBlur",
        "autoSelect",
        "isLazy",
        "isOpen",
        "defaultIsOpen",
        "onClose",
        "onOpen",
        "placement",
        "lazyBehavior"
    ]);
    var _useDisclosure = _hooks.useDisclosure({
        isOpen: isOpenProp,
        defaultIsOpen: defaultIsOpen,
        onClose: onCloseProp,
        onOpen: onOpenProp
    }), isOpen = _useDisclosure.isOpen, onOpen = _useDisclosure.onOpen, onClose = _useDisclosure.onClose, onToggle = _useDisclosure.onToggle;
    /**
   * Prepare the reference to the menu and disclosure
   */ var menuRef = React.useRef(null);
    var buttonRef = React.useRef(null);
    _hooks.useOutsideClick({
        ref: menuRef,
        handler: function handler(event) {
            var _buttonRef$current;
            if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) onClose();
        }
    });
    /**
   * Add some popper.js for dynamic positioning
   */ var popper = _popper.usePopper(_extends({
    }, popperProps, {
        enabled: isOpen,
        placement: placement
    }));
    var _React$useState = React.useState(-1), focusedIndex = _React$useState[0], setFocusedIndex = _React$useState[1];
    /**
   * Context to register all menu item nodes
   */ var descendants = useMenuDescendants();
    /**
   * Focus the button when we close the menu
   */ _hooks.useUpdateEffect(function() {
        if (!isOpen) setFocusedIndex(-1);
    }, [
        isOpen
    ]);
    _hooks.useFocusOnHide(menuRef, {
        focusRef: buttonRef,
        visible: isOpen,
        shouldFocus: true
    });
    /**
   * Generate unique ids for menu's list and button
   */ var _useIds = _hooks.useIds(id, "menu-button", "menu-list"), buttonId = _useIds[0], menuId = _useIds[1];
    var openAndFocusMenu = React.useCallback(function() {
        onOpen();
        _utils.focus(menuRef.current, {
            nextTick: true,
            selectTextIfInput: false
        });
    }, [
        onOpen,
        menuRef
    ]);
    var timeoutIds = React.useRef(new Set([]));
    _hooks.useUnmountEffect(function() {
        timeoutIds.current.forEach(function(id1) {
            return clearTimeout(id1);
        });
        timeoutIds.current.clear();
    });
    var openAndFocusFirstItem = React.useCallback(function() {
        onOpen();
        var id1 = setTimeout(function() {
            var first = descendants.firstEnabled();
            if (first) setFocusedIndex(first.index);
        });
        timeoutIds.current.add(id1);
    }, [
        onOpen,
        setFocusedIndex,
        descendants
    ]);
    var openAndFocusLastItem = React.useCallback(function() {
        onOpen();
        var id1 = setTimeout(function() {
            var last = descendants.lastEnabled();
            if (last) setFocusedIndex(last.index);
        });
        timeoutIds.current.add(id1);
    }, [
        onOpen,
        setFocusedIndex,
        descendants
    ]);
    var refocus = React.useCallback(function() {
        var _menuRef$current, _descendants$item;
        var doc = _utils.getOwnerDocument(menuRef.current);
        var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);
        var shouldRefocus = isOpen && !hasFocusWithin;
        if (!shouldRefocus) return;
        var node = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;
        if (node) _utils.focus(node, {
            selectTextIfInput: false
        });
    }, [
        isOpen,
        focusedIndex,
        descendants
    ]);
    return {
        openAndFocusMenu: openAndFocusMenu,
        openAndFocusFirstItem: openAndFocusFirstItem,
        openAndFocusLastItem: openAndFocusLastItem,
        onTransitionEnd: refocus,
        descendants: descendants,
        popper: popper,
        buttonId: buttonId,
        menuId: menuId,
        forceUpdate: popper.forceUpdate,
        orientation: "vertical",
        isOpen: isOpen,
        onToggle: onToggle,
        onOpen: onOpen,
        onClose: onClose,
        menuRef: menuRef,
        buttonRef: buttonRef,
        focusedIndex: focusedIndex,
        closeOnSelect: closeOnSelect,
        closeOnBlur: closeOnBlur,
        autoSelect: autoSelect,
        setFocusedIndex: setFocusedIndex,
        isLazy: isLazy,
        lazyBehavior: lazyBehavior
    };
}
/**
 * React Hook to manage a menu button.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and its return value
 * is passed as `context` to this hook.
 */ function useMenuButton(props, externalRef) {
    if (props === void 0) props = {
    };
    if (externalRef === void 0) externalRef = null;
    var menu = useMenuContext();
    var isOpen = menu.isOpen, onClose = menu.onClose, autoSelect = menu.autoSelect, popper = menu.popper, openAndFocusFirstItem = menu.openAndFocusFirstItem, openAndFocusLastItem = menu.openAndFocusLastItem, openAndFocusMenu = menu.openAndFocusMenu;
    var onClick = React.useCallback(function() {
        if (isOpen) onClose();
        else {
            var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;
            action();
        }
    }, [
        autoSelect,
        isOpen,
        onClose,
        openAndFocusFirstItem,
        openAndFocusMenu
    ]);
    var onKeyDown = React.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            Enter: openAndFocusFirstItem,
            ArrowDown: openAndFocusFirstItem,
            ArrowUp: openAndFocusLastItem
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
        }
    }, [
        openAndFocusFirstItem,
        openAndFocusLastItem
    ]);
    return _extends({
    }, props, {
        ref: _reactUtils.mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),
        id: menu.buttonId,
        "data-active": _utils.dataAttr(menu.isOpen),
        "aria-expanded": menu.isOpen,
        "aria-haspopup": "menu",
        "aria-controls": menu.menuId,
        onClick: _utils.callAllHandlers(props.onClick, onClick),
        onKeyDown: _utils.callAllHandlers(props.onKeyDown, onKeyDown)
    });
}
function isTargetMenuItem(event) {
    var _target$getAttribute;
    var target = event.target; // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`
    return !!((_target$getAttribute = target.getAttribute("role")) != null && _target$getAttribute.startsWith("menuitem"));
}
/* -------------------------------------------------------------------------------------------------
 * useMenuList
 * -----------------------------------------------------------------------------------------------*/ /**
 * React Hook to manage a menu list.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and its return value
 * is passed as `context` to this hook.
 */ function useMenuList(props, ref) {
    if (props === void 0) props = {
    };
    if (ref === void 0) ref = null;
    var menu = useMenuContext();
    if (!menu) throw new Error("useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>");
    var focusedIndex = menu.focusedIndex, setFocusedIndex = menu.setFocusedIndex, menuRef = menu.menuRef, isOpen = menu.isOpen, onClose = menu.onClose, menuId = menu.menuId, isLazy = menu.isLazy, lazyBehavior = menu.lazyBehavior;
    var descendants = useMenuDescendantsContext();
    /**
   * Hook that creates a keydown event handler that listens
   * to printable keyboard character press
   */ var createTypeaheadHandler = _hooks.useShortcut({
        preventDefault: function preventDefault(event) {
            return event.key !== " " && isTargetMenuItem(event);
        }
    });
    var onKeyDown = React.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            Tab: function Tab(event1) {
                return event1.preventDefault();
            },
            Escape: onClose,
            ArrowDown: function ArrowDown() {
                var next = descendants.nextEnabled(focusedIndex);
                if (next) setFocusedIndex(next.index);
            },
            ArrowUp: function ArrowUp() {
                var prev = descendants.prevEnabled(focusedIndex);
                if (prev) setFocusedIndex(prev.index);
            }
        };
        var fn = keyMap[eventKey];
        if (fn) {
            event.preventDefault();
            fn(event);
            return;
        }
        /**
     * Typeahead: Based on current character pressed,
     * find the next item to be selected
     */ var onTypeahead = createTypeaheadHandler(function(character) {
            var nextItem = _utils.getNextItemFromSearch(descendants.values(), character, function(item) {
                var _item$node$textConten, _item$node;
                return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : "";
            }, descendants.item(focusedIndex));
            if (nextItem) {
                var index = descendants.indexOf(nextItem.node);
                setFocusedIndex(index);
            }
        });
        if (isTargetMenuItem(event)) onTypeahead(event);
    }, [
        descendants,
        focusedIndex,
        createTypeaheadHandler,
        onClose,
        setFocusedIndex
    ]);
    var hasBeenOpened = React.useRef(false);
    if (isOpen) hasBeenOpened.current = true;
    var shouldRenderChildren = _utils.determineLazyBehavior({
        hasBeenSelected: hasBeenOpened.current,
        isLazy: isLazy,
        lazyBehavior: lazyBehavior,
        isSelected: isOpen
    });
    return _extends({
    }, props, {
        ref: _reactUtils.mergeRefs(menuRef, ref),
        children: shouldRenderChildren ? props.children : null,
        tabIndex: -1,
        role: "menu",
        id: menuId,
        style: _extends({
        }, props.style, {
            transformOrigin: "var(--popper-transform-origin)"
        }),
        "aria-orientation": "vertical",
        onKeyDown: _utils.callAllHandlers(props.onKeyDown, onKeyDown)
    });
}
/* -------------------------------------------------------------------------------------------------
 * useMenuPosition: Composes usePopper to position the menu
 * -----------------------------------------------------------------------------------------------*/ function useMenuPositioner(props) {
    if (props === void 0) props = {
    };
    var _useMenuContext = useMenuContext(), popper = _useMenuContext.popper, isOpen = _useMenuContext.isOpen;
    return popper.getPopperProps(_extends({
    }, props, {
        style: _extends({
            visibility: isOpen ? "visible" : "hidden"
        }, props.style)
    }));
}
/* -------------------------------------------------------------------------------------------------
 * useMenuItem: Hook for each menu item within the menu list.
   We also use it in `useMenuItemOption`
 * -----------------------------------------------------------------------------------------------*/ function useMenuItem(props, externalRef) {
    if (props === void 0) props = {
    };
    if (externalRef === void 0) externalRef = null;
    var _props2 = props, onMouseEnterProp = _props2.onMouseEnter, onMouseMoveProp = _props2.onMouseMove, onMouseLeaveProp = _props2.onMouseLeave, onClickProp = _props2.onClick, isDisabled = _props2.isDisabled, isFocusable = _props2.isFocusable, closeOnSelect = _props2.closeOnSelect, htmlProps = _objectWithoutPropertiesLoose(_props2, [
        "onMouseEnter",
        "onMouseMove",
        "onMouseLeave",
        "onClick",
        "isDisabled",
        "isFocusable",
        "closeOnSelect"
    ]);
    var menu = useMenuContext();
    var setFocusedIndex = menu.setFocusedIndex, focusedIndex = menu.focusedIndex, menuCloseOnSelect = menu.closeOnSelect, onClose = menu.onClose, menuRef = menu.menuRef, isOpen = menu.isOpen, menuId = menu.menuId;
    var ref = React.useRef(null);
    var id = menuId + "-menuitem-" + _hooks.useId();
    /**
   * Register the menuitem's node into the domContext
   */ var _useMenuDescendant = useMenuDescendant({
        disabled: isDisabled && !isFocusable
    }), index = _useMenuDescendant.index, register = _useMenuDescendant.register;
    var onMouseEnter = React.useCallback(function(event) {
        onMouseEnterProp == null || onMouseEnterProp(event);
        if (isDisabled) return;
        setFocusedIndex(index);
    }, [
        setFocusedIndex,
        index,
        isDisabled,
        onMouseEnterProp
    ]);
    var onMouseMove = React.useCallback(function(event) {
        onMouseMoveProp == null || onMouseMoveProp(event);
        if (ref.current && !_utils.isActiveElement(ref.current)) onMouseEnter(event);
    }, [
        onMouseEnter,
        onMouseMoveProp
    ]);
    var onMouseLeave = React.useCallback(function(event) {
        onMouseLeaveProp == null || onMouseLeaveProp(event);
        if (isDisabled) return;
        setFocusedIndex(-1);
    }, [
        setFocusedIndex,
        isDisabled,
        onMouseLeaveProp
    ]);
    var onClick = React.useCallback(function(event) {
        onClickProp == null || onClickProp(event);
        if (!isTargetMenuItem(event)) return;
        /**
     * Close menu and parent menus, allowing the MenuItem
     * to override its parent menu's `closeOnSelect` prop.
     */ if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) onClose();
    }, [
        onClose,
        onClickProp,
        menuCloseOnSelect,
        closeOnSelect
    ]);
    var isFocused = index === focusedIndex;
    var trulyDisabled = isDisabled && !isFocusable;
    _hooks.useUpdateEffect(function() {
        if (!isOpen) return;
        if (isFocused && !trulyDisabled && ref.current) _utils.focus(ref.current, {
            nextTick: true,
            selectTextIfInput: false
        });
        else if (menuRef.current && !_utils.isActiveElement(menuRef.current)) _utils.focus(menuRef.current);
    }, [
        isFocused,
        trulyDisabled,
        menuRef,
        isOpen
    ]);
    var clickableProps = _clickable.useClickable({
        onClick: onClick,
        onMouseEnter: onMouseEnter,
        onMouseMove: onMouseMove,
        onMouseLeave: onMouseLeave,
        ref: _reactUtils.mergeRefs(register, ref, externalRef),
        isDisabled: isDisabled,
        isFocusable: isFocusable
    });
    return _extends({
    }, htmlProps, clickableProps, {
        id: id,
        role: "menuitem",
        tabIndex: isFocused ? 0 : -1
    });
}
/* -------------------------------------------------------------------------------------------------
 * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item
 * -----------------------------------------------------------------------------------------------*/ function useMenuOption(props, ref) {
    if (props === void 0) props = {
    };
    if (ref === void 0) ref = null;
    var _props3 = props, _props3$type = _props3.type, type = _props3$type === void 0 ? "radio" : _props3$type, isChecked = _props3.isChecked, rest = _objectWithoutPropertiesLoose(_props3, [
        "type",
        "isChecked"
    ]);
    var ownProps = useMenuItem(rest, ref);
    return _extends({
    }, ownProps, {
        role: "menuitem" + type,
        "aria-checked": isChecked
    });
}
/* -------------------------------------------------------------------------------------------------
 * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option
 * -----------------------------------------------------------------------------------------------*/ function useMenuOptionGroup(props) {
    if (props === void 0) props = {
    };
    var _props4 = props, children = _props4.children, _props4$type = _props4.type, type = _props4$type === void 0 ? "radio" : _props4$type, valueProp = _props4.value, defaultValue = _props4.defaultValue, onChangeProp = _props4.onChange, htmlProps = _objectWithoutPropertiesLoose(_props4, [
        "children",
        "type",
        "value",
        "defaultValue",
        "onChange"
    ]);
    var isRadio = type === "radio";
    var fallback = isRadio ? "" : [];
    var _useControllableState = _hooks.useControllableState({
        defaultValue: defaultValue != null ? defaultValue : fallback,
        value: valueProp,
        onChange: onChangeProp
    }), value = _useControllableState[0], setValue = _useControllableState[1];
    var onChange = React.useCallback(function(selectedValue) {
        if (type === "radio" && _utils.isString(value)) setValue(selectedValue);
        if (type === "checkbox" && _utils.isArray(value)) {
            var nextValue = value.includes(selectedValue) ? _utils.removeItem(value, selectedValue) : _utils.addItem(value, selectedValue);
            setValue(nextValue);
        }
    }, [
        value,
        setValue,
        type
    ]);
    var validChildren = _reactUtils.getValidChildren(children);
    var clones = validChildren.map(function(child) {
        /**
     * We've added an internal `id` to each `MenuItemOption`,
     * let's use that for type-checking.
     *
     * We can't rely on displayName or the element's type since
     * they can be changed by the user.
     */ if (child.type.id !== "MenuItemOption") return child;
        var onClick = function onClick1(event) {
            onChange(child.props.value);
            child.props.onClick == null || child.props.onClick(event);
        };
        var isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
        return(/*#__PURE__*/ React.cloneElement(child, {
            type: type,
            onClick: onClick,
            isChecked: isChecked
        }));
    });
    return _extends({
    }, htmlProps, {
        children: clones
    });
}
function useMenuState() {
    var _useMenuContext2 = useMenuContext(), isOpen = _useMenuContext2.isOpen, onClose = _useMenuContext2.onClose;
    return {
        isOpen: isOpen,
        onClose: onClose
    };
}

},{"@chakra-ui/clickable":"7hdLN","@chakra-ui/descendant":"37ueY","@chakra-ui/hooks":"ak6Dj","@chakra-ui/popper":"5zSIv","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z"}],"7hdLN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _useClickable = require("./use-clickable");
Object.keys(_useClickable).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useClickable[key]) return;
    exports[key] = _useClickable[key];
});

},{"./use-clickable":"2DbH3"}],"2DbH3":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useClickable = useClickable;
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useEventListeners = require("./use-event-listeners");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isValidElement(event) {
    var element = event.target;
    var tagName = element.tagName, isContentEditable = element.isContentEditable;
    return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true;
}
/**
 * useClickable implements all the interactions of a native `button`
 * component with support for making it focusable even if it is disabled.
 *
 * It can be used with both native button elements or other elements (like `div`).
 */ function useClickable(props) {
    if (props === void 0) props = {
    };
    var _props = props, htmlRef = _props.ref, isDisabled = _props.isDisabled, isFocusable = _props.isFocusable, _props$clickOnEnter = _props.clickOnEnter, clickOnEnter = _props$clickOnEnter === void 0 ? true : _props$clickOnEnter, _props$clickOnSpace = _props.clickOnSpace, clickOnSpace = _props$clickOnSpace === void 0 ? true : _props$clickOnSpace, onMouseDown = _props.onMouseDown, onMouseUp = _props.onMouseUp, onClick = _props.onClick, onKeyDown = _props.onKeyDown, onKeyUp = _props.onKeyUp, tabIndexProp = _props.tabIndex, onMouseOver = _props.onMouseOver, onMouseLeave = _props.onMouseLeave, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "ref",
        "isDisabled",
        "isFocusable",
        "clickOnEnter",
        "clickOnSpace",
        "onMouseDown",
        "onMouseUp",
        "onClick",
        "onKeyDown",
        "onKeyUp",
        "tabIndex",
        "onMouseOver",
        "onMouseLeave"
    ]);
    /**
   * We'll use this to track if the element is a button element
   */ var _React$useState = React.useState(true), isButton = _React$useState[0], setIsButton = _React$useState[1];
    /**
   * For custom button implementation, we'll use this to track when
   * we mouse down on the button, to enable use style its ":active" style
   */ var _React$useState2 = React.useState(false), isPressed = _React$useState2[0], setIsPressed = _React$useState2[1];
    var listeners = _useEventListeners.useEventListeners();
    /**
   * The ref callback that fires as soon as the dom node is ready
   */ var refCallback = function refCallback1(node) {
        if (!node) return;
        if (node.tagName !== "BUTTON") setIsButton(false);
    };
    var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
    var trulyDisabled = isDisabled && !isFocusable;
    var handleClick = React.useCallback(function(event) {
        if (isDisabled) {
            event.stopPropagation();
            event.preventDefault();
            return;
        }
        var self = event.currentTarget;
        self.focus();
        onClick == null || onClick(event);
    }, [
        isDisabled,
        onClick
    ]);
    var onDocumentKeyUp = React.useCallback(function(e) {
        if (isPressed && isValidElement(e)) {
            e.preventDefault();
            e.stopPropagation();
            setIsPressed(false); // eslint-disable-next-line @typescript-eslint/no-unused-vars
            listeners.remove(document, "keyup", onDocumentKeyUp, false);
        }
    }, [
        isPressed,
        listeners
    ]);
    var handleKeyDown = React.useCallback(function(event) {
        onKeyDown == null || onKeyDown(event);
        if (isDisabled || event.defaultPrevented || event.metaKey) return;
        if (!isValidElement(event.nativeEvent) || isButton) return;
        var shouldClickOnEnter = clickOnEnter && event.key === "Enter";
        var shouldClickOnSpace = clickOnSpace && event.key === " ";
        if (shouldClickOnSpace) {
            event.preventDefault();
            setIsPressed(true);
        }
        if (shouldClickOnEnter) {
            event.preventDefault();
            var self = event.currentTarget;
            self.click();
        }
        listeners.add(document, "keyup", onDocumentKeyUp, false);
    }, [
        isDisabled,
        isButton,
        onKeyDown,
        clickOnEnter,
        clickOnSpace,
        listeners,
        onDocumentKeyUp
    ]);
    var handleKeyUp = React.useCallback(function(event) {
        onKeyUp == null || onKeyUp(event);
        if (isDisabled || event.defaultPrevented || event.metaKey) return;
        if (!isValidElement(event.nativeEvent) || isButton) return;
        var shouldClickOnSpace = clickOnSpace && event.key === " ";
        if (shouldClickOnSpace) {
            event.preventDefault();
            setIsPressed(false);
            var self = event.currentTarget;
            self.click();
        }
    }, [
        clickOnSpace,
        isButton,
        isDisabled,
        onKeyUp
    ]);
    var onDocumentMouseUp = React.useCallback(function(event) {
        if (event.button !== 0) return;
        setIsPressed(false);
        listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    }, [
        listeners
    ]);
    var handleMouseDown = React.useCallback(function(event) {
        if (_utils.isRightClick(event)) return;
        if (isDisabled) {
            event.stopPropagation();
            event.preventDefault();
            return;
        }
        if (!isButton) setIsPressed(true);
        var target = event.currentTarget;
        target.focus({
            preventScroll: true
        });
        listeners.add(document, "mouseup", onDocumentMouseUp, false);
        onMouseDown == null || onMouseDown(event);
    }, [
        isDisabled,
        isButton,
        onMouseDown,
        listeners,
        onDocumentMouseUp
    ]);
    var handleMouseUp = React.useCallback(function(event) {
        if (_utils.isRightClick(event)) return;
        if (!isButton) setIsPressed(false);
        onMouseUp == null || onMouseUp(event);
    }, [
        onMouseUp,
        isButton
    ]);
    var handleMouseOver = React.useCallback(function(event) {
        if (isDisabled) {
            event.preventDefault();
            return;
        }
        onMouseOver == null || onMouseOver(event);
    }, [
        isDisabled,
        onMouseOver
    ]);
    var handleMouseLeave = React.useCallback(function(event) {
        if (isPressed) {
            event.preventDefault();
            setIsPressed(false);
        }
        onMouseLeave == null || onMouseLeave(event);
    }, [
        isPressed,
        onMouseLeave
    ]);
    var ref = _reactUtils.mergeRefs(htmlRef, refCallback);
    if (isButton) return _extends({
    }, htmlProps, {
        ref: ref,
        type: "button",
        "aria-disabled": trulyDisabled ? undefined : isDisabled,
        disabled: trulyDisabled,
        onClick: handleClick,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onKeyUp: onKeyUp,
        onKeyDown: onKeyDown,
        onMouseOver: onMouseOver,
        onMouseLeave: onMouseLeave
    });
    return _extends({
    }, htmlProps, {
        ref: ref,
        role: "button",
        "data-active": _utils.dataAttr(isPressed),
        "aria-disabled": isDisabled ? "true" : undefined,
        tabIndex: trulyDisabled ? undefined : tabIndex,
        onClick: handleClick,
        onMouseDown: handleMouseDown,
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        onMouseOver: handleMouseOver,
        onMouseLeave: handleMouseLeave
    });
}

},{"@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-event-listeners":"54DIF"}],"54DIF":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useEventListeners = useEventListeners;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function useEventListeners() {
    var listeners = React.useRef(new Map());
    var currentListeners = listeners.current;
    var add = React.useCallback(function(el, type, listener, options) {
        listeners.current.set(listener, {
            type: type,
            el: el,
            options: options
        });
        el.addEventListener(type, listener, options);
    }, []);
    var remove = React.useCallback(function(el, type, listener, options) {
        el.removeEventListener(type, listener, options);
        listeners.current["delete"](listener);
    }, []);
    React.useEffect(function() {
        return function() {
            currentListeners.forEach(function(value, key) {
                remove(value.el, value.type, key, value.options);
            });
        };
    }, [
        remove,
        currentListeners
    ]);
    return {
        add: add,
        remove: remove
    };
}

},{"react":"3f97z"}],"5zSIv":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    popperCSSVars: true
};
exports.popperCSSVars = void 0;
var _usePopper = require("./use-popper");
Object.keys(_usePopper).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _usePopper[key]) return;
    exports[key] = _usePopper[key];
});
var _utils = require("./utils");
exports.popperCSSVars = _utils.cssVars;

},{"./use-popper":"35YK4","./utils":"4R3Iy"}],"35YK4":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePopper = usePopper;
var _reactUtils = require("@chakra-ui/react-utils");
var _core = require("@popperjs/core");
var _react = require("react");
var customModifiers = _interopRequireWildcard(require("./modifiers"));
var _utils = require("./utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function usePopper(props) {
    var _instance$current2, _instance$current3;
    if (props === void 0) props = {
    };
    var _props = props, _props$enabled = _props.enabled, enabled = _props$enabled === void 0 ? true : _props$enabled, _props$modifiers = _props.modifiers, modifiers = _props$modifiers === void 0 ? [] : _props$modifiers, _props$placement = _props.placement, placementProp = _props$placement === void 0 ? "bottom" : _props$placement, _props$strategy = _props.strategy, strategy = _props$strategy === void 0 ? "absolute" : _props$strategy, _props$arrowPadding = _props.arrowPadding, arrowPadding = _props$arrowPadding === void 0 ? 8 : _props$arrowPadding, _props$eventListeners = _props.eventListeners, eventListeners = _props$eventListeners === void 0 ? true : _props$eventListeners, offset = _props.offset, _props$gutter = _props.gutter, gutter = _props$gutter === void 0 ? 8 : _props$gutter, _props$flip = _props.flip, flip = _props$flip === void 0 ? true : _props$flip, _props$boundary = _props.boundary, boundary = _props$boundary === void 0 ? "clippingParents" : _props$boundary, _props$preventOverflo = _props.preventOverflow, preventOverflow = _props$preventOverflo === void 0 ? true : _props$preventOverflo, matchWidth = _props.matchWidth;
    var reference = _react.useRef(null);
    var popper = _react.useRef(null);
    var instance = _react.useRef(null);
    var cleanup = _react.useRef(function() {
    });
    var setupPopper = _react.useCallback(function() {
        if (!enabled || !reference.current || !popper.current) return; // If popper instance exists, destroy it so we can create a new one
        cleanup.current == null || cleanup.current();
        instance.current = _core.createPopper(reference.current, popper.current, {
            placement: placementProp,
            modifiers: [
                customModifiers.innerArrow,
                customModifiers.positionArrow,
                customModifiers.transformOrigin,
                _extends({
                }, customModifiers.matchWidth, {
                    enabled: !!matchWidth
                }),
                _extends({
                    name: "eventListeners"
                }, _utils.getEventListenerOptions(eventListeners)),
                {
                    name: "arrow",
                    options: {
                        padding: arrowPadding
                    }
                },
                {
                    name: "offset",
                    options: {
                        offset: offset != null ? offset : [
                            0,
                            gutter
                        ]
                    }
                },
                {
                    name: "flip",
                    enabled: !!flip,
                    options: {
                        padding: 8
                    }
                },
                {
                    name: "preventOverflow",
                    enabled: !!preventOverflow,
                    options: {
                        boundary: boundary
                    }
                }
            ].concat(modifiers),
            strategy: strategy
        }); // force update one-time to fix any positioning issues
        instance.current.forceUpdate();
        cleanup.current = instance.current.destroy;
    }, [
        enabled,
        placementProp,
        modifiers,
        matchWidth,
        eventListeners,
        arrowPadding,
        offset,
        gutter,
        flip,
        preventOverflow,
        boundary,
        strategy
    ]);
    _react.useEffect(function() {
        return function() {
            /**
       * Fast refresh might call this function and tear down the popper
       * even if the reference still exists. This checks against that
       */ if (!reference.current && !popper.current) {
                var _instance$current;
                (_instance$current = instance.current) == null || _instance$current.destroy();
                instance.current = null;
            }
        };
    }, []);
    var referenceRef = _react.useCallback(function(node) {
        reference.current = node;
        setupPopper();
    }, [
        setupPopper
    ]);
    var getReferenceProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(referenceRef, ref)
        });
    }, [
        referenceRef
    ]);
    var popperRef = _react.useCallback(function(node) {
        popper.current = node;
        setupPopper();
    }, [
        setupPopper
    ]);
    var getPopperProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(popperRef, ref),
            style: _extends({
            }, props1.style, {
                position: strategy,
                minWidth: "max-content"
            })
        });
    }, [
        strategy,
        popperRef
    ]);
    var getArrowProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var _props2 = props1, size = _props2.size, shadowColor = _props2.shadowColor, bg = _props2.bg, style = _props2.style, rest = _objectWithoutPropertiesLoose(_props2, [
            "size",
            "shadowColor",
            "bg",
            "style"
        ]);
        return _extends({
        }, rest, {
            ref: ref,
            "data-popper-arrow": "",
            style: getArrowStyle(props1)
        });
    }, []);
    var getArrowInnerProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            "data-popper-arrow-inner": ""
        });
    }, []);
    return {
        update: (_instance$current2 = instance.current) == null ? void 0 : _instance$current2.update,
        forceUpdate: (_instance$current3 = instance.current) == null ? void 0 : _instance$current3.forceUpdate,
        transformOrigin: _utils.cssVars.transformOrigin.varRef,
        referenceRef: referenceRef,
        popperRef: popperRef,
        getPopperProps: getPopperProps,
        getArrowProps: getArrowProps,
        getArrowInnerProps: getArrowInnerProps,
        getReferenceProps: getReferenceProps
    };
}
function getArrowStyle(props) {
    var size = props.size, shadowColor = props.shadowColor, bg = props.bg, style = props.style;
    var computedStyle = _extends({
    }, style, {
        position: "absolute"
    });
    if (size) computedStyle["--popper-arrow-size"] = size;
    if (shadowColor) computedStyle["--popper-arrow-shadow-color"] = shadowColor;
    if (bg) computedStyle["--popper-arrow-bg"] = bg;
    return computedStyle;
}

},{"@chakra-ui/react-utils":"5UBnZ","@popperjs/core":"3b7Fs","react":"3f97z","./modifiers":"6rKWq","./utils":"4R3Iy"}],"3b7Fs":[function(require,module,exports) {
/**
 * @popperjs/core v2.4.4 - MIT License
 */ 'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function getBoundingClientRect(element) {
    var rect = element.getBoundingClientRect();
    return {
        width: rect.width,
        height: rect.height,
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        y: rect.top
    };
}
/*:: import type { Window } from '../types'; */ /*:: declare function getWindow(node: Node | Window): Window; */ function getWindow(node) {
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView : window;
    }
    return node;
}
function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */ function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */ function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) return getWindowScroll(node);
    else return getHTMLElementScroll(node);
}
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
function getDocumentElement(element) {
    // $FlowFixMe: assume body is always available
    return (isElement(element) ? element.ownerDocument : element.document).documentElement;
}
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
}
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
// Composite means it takes into account transforms as well as layout.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement);
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || isScrollParent(documentElement)) scroll = getNodeScroll(offsetParent);
        if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = getWindowScrollBarX(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
// Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.
function getLayoutRect(element) {
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: element.offsetWidth,
        height: element.offsetHeight
    };
}
function getParentNode(element) {
    if (getNodeName(element) === 'html') return element;
    return element.assignedSlot || element.parentNode || // $FlowFixMe: need a better way to handle this...
    element.host || // $FlowFixMe: HTMLElement is a Node
    getDocumentElement(element);
}
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(getNodeName(node)) >= 0) // $FlowFixMe: assume body is always available
    return node.ownerDocument.body;
    if (isHTMLElement(node) && isScrollParent(node)) return node;
    return getScrollParent(getParentNode(node));
}
/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the 
reference element's position.
*/ function listScrollParents(element, list) {
    if (list === void 0) list = [];
    var scrollParent = getScrollParent(element);
    var isBody = getNodeName(scrollParent) === 'body';
    var win = getWindow(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(getNodeName(element)) >= 0;
}
function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') return null;
    var offsetParent = element.offsetParent;
    if (offsetParent) {
        var html = getDocumentElement(offsetParent);
        if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') return html;
    }
    return offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var currentNode = getParentNode(element);
    while(isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(getNodeName(currentNode)) < 0){
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') return window;
    return offsetParent || getContainingBlock(element) || window;
}
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        Object.keys(modifier).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                case 'phase':
                    if (modifierPhases.indexOf(modifier.phase) < 0) console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (typeof modifier.effect !== 'function') console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (!Array.isArray(modifier.requires)) console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged1, current) {
        var existing = merged1[current.name];
        merged1[current.name] = existing ? Object.assign(Object.assign(Object.assign({
        }, existing), current), {
        }, {
            options: Object.assign(Object.assign({
            }, existing.options), current.options),
            data: Object.assign(Object.assign({
            }, existing.data), current.data)
        }) : current;
        return merged1;
    }, {
    }); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}
function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
    };
}
// of the `<html>` and `<body>` rect bounds if horizontally scrollable
function getDocumentRect(element) {
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = element.ownerDocument.body;
    var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === 'rtl') x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
function contains(parent, child) {
    // $FlowFixMe: hasOwnProperty doesn't seem to work in tests
    var isShadow = Boolean(child.getRootNode && child.getRootNode().host); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (isShadow) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
function rectToClientRect(rect) {
    return Object.assign(Object.assign({
    }, rect), {
    }, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents1 = listScrollParents(getParentNode(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) return [];
     // $FlowFixMe: https://github.com/facebook/flow/issues/1414
    return clippingParents1.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents1 = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents1[0];
    var clippingRect = clippingParents1.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = Math.max(rect.top, accRect.top);
        accRect.right = Math.min(rect.right, accRect.right);
        accRect.bottom = Math.min(rect.bottom, accRect.bottom);
        accRect.left = Math.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
function getVariation(placement) {
    return placement.split('-')[1];
}
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
function computeOffsets(_ref) {
    var reference1 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference1.x + reference1.width / 2 - element.width / 2;
    var commonY = reference1.y + reference1.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case top:
            offsets = {
                x: commonX,
                y: reference1.y - element.height
            };
            break;
        case bottom:
            offsets = {
                x: commonX,
                y: reference1.y + reference1.height
            };
            break;
        case right:
            offsets = {
                x: reference1.x + reference1.width,
                y: commonY
            };
            break;
        case left:
            offsets = {
                x: reference1.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference1.x,
                y: reference1.y
            };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case start:
                offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference1[len] / 2 - element[len] / 2);
                break;
            case end:
                offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference1[len] / 2 - element[len] / 2);
                break;
        }
    }
    return offsets;
}
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
function mergePaddingObject(paddingObject) {
    return Object.assign(Object.assign({
    }, getFreshSideObject()), paddingObject);
}
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var referenceElement = state.elements.reference;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(referenceElement);
    var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign(Object.assign({
    }, popperRect), popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                right,
                bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                top,
                bottom
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference1, popper1, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign(Object.assign({
            }, DEFAULT_OPTIONS), defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference1,
                popper: popper1
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(options1) {
                cleanupModifierEffects();
                state.options = Object.assign(Object.assign(Object.assign({
                }, defaultOptions), state.options), options1);
                state.scrollParents = {
                    reference: isElement(reference1) ? listScrollParents(reference1) : reference1.contextElement ? listScrollParents(reference1.contextElement) : [],
                    popper: listScrollParents(popper1)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                validateModifiers(modifiers);
                if (getBasePlacement(state.options.placement) === auto) {
                    var flipModifier = state.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = getComputedStyle(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference2 = _state$elements.reference, popper2 = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference2, popper2)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: getCompositeRect(reference2, getOffsetParent(popper2), state.options.strategy === 'fixed'),
                    popper: getLayoutRect(popper2)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference1, popper1)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options).then(function(state1) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state1);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options1 = _ref3$options === void 0 ? {
                } : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options1
                    });
                    var noopFn = function noopFn1() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {
    },
    effect: effect,
    data: {
    }
};
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {
    }
};
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsets(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: Math.round(x * dpr) / dpr || 0,
        y: Math.round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper1 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive;
    var _roundOffsets = roundOffsets(offsets), x = _roundOffsets.x, y = _roundOffsets.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
        var offsetParent = getOffsetParent(popper1);
        if (offsetParent === getWindow(popper1)) offsetParent = getDocumentElement(popper1);
         // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        /*:: offsetParent = (offsetParent: Element); */ if (placement === top) {
            sideY = bottom;
            y -= offsetParent.clientHeight - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left) {
            sideX = right;
            x -= offsetParent.clientWidth - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign(Object.assign({
        }, commonStyles), {
        }, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign(Object.assign({
    }, commonStyles), {
    }, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref3) {
    var state = _ref3.state, options = _ref3.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive;
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: getBasePlacement(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign(Object.assign({
    }, state.styles.popper), mapToStyles(Object.assign(Object.assign({
    }, commonStyles), {
    }, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign(Object.assign({
    }, state.styles.arrow), mapToStyles(Object.assign(Object.assign({
    }, commonStyles), {
    }, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false
    })));
    state.attributes.popper = Object.assign(Object.assign({
    }, state.attributes.popper), {
    }, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {
    }
};
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {
        };
        var attributes = state.attributes[name] || {
        };
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!isHTMLElement(element) || !getNodeName(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name1) {
            var value = attributes[name1];
            if (value === false) element.removeAttribute(name1);
            else element.setAttribute(name1, value === true ? '' : value);
        });
    });
}
function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {
        }
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {
            };
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style1, property) {
                style1[property] = '';
                return style1;
            }, {
            }); // arrow is optional + virtual elements
            if (!isHTMLElement(element) || !getNodeName(element)) return;
             // Flow doesn't support to extend this property, but it's the most
            // effective way to apply styles to an HTMLElement
            // $FlowFixMe
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: [
        'computeStyles'
    ]
};
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [
        left,
        top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({
    }, rects), {
    }, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        left,
        right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset1 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset1);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
var hash$1 = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash$1[matched];
    });
}
/*:: type OverflowsMap = { [ComputedPlacement]: number }; */ /*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */ function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement1) {
        return getVariation(placement1) === variation;
    }) : basePlacements; // $FlowFixMe
    var allowedPlacements = placements$1.filter(function(placement1) {
        return allowedAutoPlacements.indexOf(placement1) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement1) {
        acc[placement1] = detectOverflow(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[getBasePlacement(placement1)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) return [];
    var oppositePlacement = getOppositePlacement(placement);
    return [
        getOppositeVariationPlacement(placement),
        oppositePlacement,
        getOppositeVariationPlacement(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        getOppositePlacement(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements1 = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements1[0];
    for(var i = 0; i < placements1.length; i++){
        var placement = placements1[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [
            top,
            bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = getOppositePlacement(mainVariationSide);
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop1(_i) {
            var fittingPlacement = placements1.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
function within(min, value, max) {
    return Math.max(min, Math.min(value, max));
}
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets1 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({
    }, state.rects), {
    }, {
        placement: state.placement
    })) : tetherOffset;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets1) return;
    if (checkMainAxis) {
        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset1 = popperOffsets1[mainAxis];
        var min = popperOffsets1[mainAxis] + overflow[mainSide];
        var max = popperOffsets1[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets1[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets1[mainAxis] + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset1, tether ? Math.max(max, tetherMax) : max);
        popperOffsets1[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset1;
    }
    if (checkAltAxis) {
        var _mainSide = mainAxis === 'x' ? top : left;
        var _altSide = mainAxis === 'x' ? bottom : right;
        var _offset = popperOffsets1[altAxis];
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var _preventedOffset = within(_min, _offset, _max);
        popperOffsets1[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name;
    var arrowElement = state.elements.arrow;
    var popperOffsets1 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [
        left,
        right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets1) return;
    var paddingObject = state.modifiersData[name + "#persistent"].padding;
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets1[axis] - state.rects.popper[len];
    var startDiff = popperOffsets1[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$2(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element, _options$padding = options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!contains(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
    state.modifiersData[name + "#persistent"] = {
        padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))
    };
} // eslint-disable-next-line import/no-unused-modules
var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$2,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        top,
        right,
        bottom,
        left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign(Object.assign({
    }, state.attributes.popper), {
    }, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};
var defaultModifiers = [
    eventListeners,
    popperOffsets$1,
    computeStyles$1,
    applyStyles$1,
    offset$1,
    flip$1,
    preventOverflow$1,
    arrow$1,
    hide$1
];
var createPopper = /*#__PURE__*/ popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules
exports.createPopper = createPopper;
exports.defaultModifiers = defaultModifiers;
exports.detectOverflow = detectOverflow;
exports.popperGenerator = popperGenerator;

},{}],"6rKWq":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.innerArrow = exports.positionArrow = exports.transformOrigin = exports.matchWidth = void 0;
var _utils = require("./utils");
/* -------------------------------------------------------------------------------------------------
 The match width modifier sets the popper width to match the reference.
 It us useful for custom selects, autocomplete, etc.
* -----------------------------------------------------------------------------------------------*/ var matchWidth = {
    name: "matchWidth",
    enabled: true,
    phase: "beforeWrite",
    requires: [
        "computeStyles"
    ],
    fn: function fn(_ref) {
        var state = _ref.state;
        state.styles.popper.width = state.rects.reference.width + "px";
    },
    effect: function effect(_ref2) {
        var state = _ref2.state;
        return function() {
            var reference = state.elements.reference;
            state.elements.popper.style.width = reference.offsetWidth + "px";
        };
    }
};
/* -------------------------------------------------------------------------------------------------
  The transform origin modifier sets the css `transformOrigin` value of the popper
  based on the dynamic placement state of the popper.
  
  Useful when we need to animate/transition the popper.
* -----------------------------------------------------------------------------------------------*/ exports.matchWidth = matchWidth;
var transformOrigin = {
    name: "transformOrigin",
    enabled: true,
    phase: "write",
    fn: function fn(_ref3) {
        var state = _ref3.state;
        setTransformOrigin(state);
    },
    effect: function effect(_ref4) {
        var state = _ref4.state;
        return function() {
            setTransformOrigin(state);
        };
    }
};
exports.transformOrigin = transformOrigin;
var setTransformOrigin = function setTransformOrigin1(state) {
    state.elements.popper.style.setProperty(_utils.cssVars.transformOrigin["var"], _utils.toTransformOrigin(state.placement));
};
/* -------------------------------------------------------------------------------------------------
  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`
  styles generated by popper.js to properly position the arrow
* -----------------------------------------------------------------------------------------------*/ var positionArrow = {
    name: "positionArrow",
    enabled: true,
    phase: "afterWrite",
    fn: function fn(_ref5) {
        var state = _ref5.state;
        setArrowStyles(state);
    }
};
exports.positionArrow = positionArrow;
var setArrowStyles = function setArrowStyles1(state) {
    var _state$elements;
    if (!state.placement) return;
    var overrides = getArrowStyle(state.placement);
    if ((_state$elements = state.elements) != null && _state$elements.arrow && overrides) {
        var _Object$assign, _vars;
        Object.assign(state.elements.arrow.style, (_Object$assign = {
        }, _Object$assign[overrides.property] = overrides.value, _Object$assign.width = _utils.cssVars.arrowSize.varRef, _Object$assign.height = _utils.cssVars.arrowSize.varRef, _Object$assign.zIndex = -1, _Object$assign));
        var vars = (_vars = {
        }, _vars[_utils.cssVars.arrowSizeHalf["var"]] = "calc(" + _utils.cssVars.arrowSize.varRef + " / 2)", _vars[_utils.cssVars.arrowOffset["var"]] = "calc(" + _utils.cssVars.arrowSizeHalf.varRef + " * -1)", _vars);
        for(var property in vars)state.elements.arrow.style.setProperty(property, vars[property]);
    }
};
var getArrowStyle = function getArrowStyle1(placement) {
    if (placement.startsWith("top")) return {
        property: "bottom",
        value: _utils.cssVars.arrowOffset.varRef
    };
    if (placement.startsWith("bottom")) return {
        property: "top",
        value: _utils.cssVars.arrowOffset.varRef
    };
    if (placement.startsWith("left")) return {
        property: "right",
        value: _utils.cssVars.arrowOffset.varRef
    };
    if (placement.startsWith("right")) return {
        property: "left",
        value: _utils.cssVars.arrowOffset.varRef
    };
};
/* -------------------------------------------------------------------------------------------------
  The inner arrow modifier, sets the placement styles for the inner arrow that forms
  the popper arrow tip.
* -----------------------------------------------------------------------------------------------*/ var innerArrow = {
    name: "innerArrow",
    enabled: true,
    phase: "main",
    requires: [
        "arrow"
    ],
    fn: function fn(_ref6) {
        var state = _ref6.state;
        setInnerArrowStyles(state);
    },
    effect: function effect(_ref7) {
        var state = _ref7.state;
        return function() {
            setInnerArrowStyles(state);
        };
    }
};
exports.innerArrow = innerArrow;
var setInnerArrowStyles = function setInnerArrowStyles1(state) {
    if (!state.elements.arrow) return;
    var inner = state.elements.arrow.querySelector("[data-popper-arrow-inner]");
    if (!inner) return;
    Object.assign(inner.style, {
        transform: "rotate(45deg)",
        background: _utils.cssVars.arrowBg.varRef,
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        position: "absolute",
        zIndex: "inherit",
        boxShadow: _utils.getBoxShadow(state.placement)
    });
};

},{"./utils":"4R3Iy"}],"4R3Iy":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getBoxShadow = getBoxShadow;
exports.getEventListenerOptions = getEventListenerOptions;
exports.toTransformOrigin = exports.cssVars = void 0;
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var toVar = function toVar1(value, fallback) {
    return {
        "var": value,
        varRef: fallback ? "var(" + value + ", " + fallback + ")" : "var(" + value + ")"
    };
};
var cssVars = {
    arrowShadowColor: toVar("--popper-arrow-shadow-color"),
    arrowSize: toVar("--popper-arrow-size", "8px"),
    arrowSizeHalf: toVar("--popper-arrow-size-half"),
    arrowBg: toVar("--popper-arrow-bg"),
    transformOrigin: toVar("--popper-transform-origin"),
    arrowOffset: toVar("--popper-arrow-offset")
};
exports.cssVars = cssVars;
function getBoxShadow(placement) {
    if (placement.includes("top")) return "1px 1px 1px 0 var(--popper-arrow-shadow-color)";
    if (placement.includes("bottom")) return "-1px -1px 1px 0 var(--popper-arrow-shadow-color)";
    if (placement.includes("right")) return "-1px 1px 1px 0 var(--popper-arrow-shadow-color)";
    if (placement.includes("left")) return "1px -1px 1px 0 var(--popper-arrow-shadow-color)";
}
var transforms = {
    top: "bottom center",
    "top-start": "bottom left",
    "top-end": "bottom right",
    bottom: "top center",
    "bottom-start": "top left",
    "bottom-end": "top right",
    left: "right center",
    "left-start": "right top",
    "left-end": "right bottom",
    right: "left center",
    "right-start": "left top",
    "right-end": "left bottom"
};
var toTransformOrigin = function toTransformOrigin1(placement) {
    return transforms[placement];
};
exports.toTransformOrigin = toTransformOrigin;
var defaultEventListeners = {
    scroll: true,
    resize: true
};
function getEventListenerOptions(value) {
    var eventListeners;
    if (typeof value === "object") eventListeners = {
        enabled: true,
        options: _extends({
        }, defaultEventListeners, value)
    };
    else eventListeners = {
        enabled: value,
        options: defaultEventListeners
    };
    return eventListeners;
}

},{}],"Npfcs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _modal = require("./modal");
Object.keys(_modal).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _modal[key]) return;
    exports[key] = _modal[key];
});
var _useModal = require("./use-modal");
Object.keys(_useModal).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useModal[key]) return;
    exports[key] = _useModal[key];
});
var _alertDialog = require("./alert-dialog");
Object.keys(_alertDialog).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _alertDialog[key]) return;
    exports[key] = _alertDialog[key];
});
var _drawer = require("./drawer");
Object.keys(_drawer).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _drawer[key]) return;
    exports[key] = _drawer[key];
});

},{"./modal":"1qi5Q","./use-modal":"6HiMl","./alert-dialog":"3MiTT","./drawer":"6Ryhx"}],"1qi5Q":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ModalFocusScope = ModalFocusScope;
exports.ModalCloseButton = exports.ModalFooter = exports.ModalBody = exports.ModalHeader = exports.ModalOverlay = exports.ModalContent = exports.Modal = exports.useModalContext = exports.ModalContextProvider = void 0;
var _closeButton = require("@chakra-ui/close-button");
var _focusLock = require("@chakra-ui/focus-lock");
var _portal = require("@chakra-ui/portal");
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _reactRemoveScroll = require("react-remove-scroll");
var _modalTransition = require("./modal-transition");
var _useModal = require("./use-modal");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var _createContext = _reactUtils.createContext({
    strict: true,
    name: "ModalContext",
    errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
}), ModalContextProvider = _createContext[0], useModalContext = _createContext[1];
exports.useModalContext = useModalContext;
exports.ModalContextProvider = ModalContextProvider;
/**
 * Modal provides context, theming, and accessibility properties
 * to all other modal components.
 *
 * It doesn't render any DOM node.
 */ var Modal = function Modal1(props) {
    var portalProps = props.portalProps, children = props.children, autoFocus = props.autoFocus, trapFocus = props.trapFocus, initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, returnFocusOnClose = props.returnFocusOnClose, blockScrollOnMount = props.blockScrollOnMount, allowPinchZoom = props.allowPinchZoom, preserveScrollBarGap = props.preserveScrollBarGap, motionPreset = props.motionPreset, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
    var styles = _system.useMultiStyleConfig("Modal", props);
    var modal = _useModal.useModal(props);
    var context = _extends({
    }, modal, {
        autoFocus: autoFocus,
        trapFocus: trapFocus,
        initialFocusRef: initialFocusRef,
        finalFocusRef: finalFocusRef,
        returnFocusOnClose: returnFocusOnClose,
        blockScrollOnMount: blockScrollOnMount,
        allowPinchZoom: allowPinchZoom,
        preserveScrollBarGap: preserveScrollBarGap,
        motionPreset: motionPreset,
        lockFocusAcrossFrames: lockFocusAcrossFrames
    });
    return(/*#__PURE__*/ React.createElement(ModalContextProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, null, context.isOpen && /*#__PURE__*/ React.createElement(_portal.Portal, portalProps, children)))));
};
exports.Modal = Modal;
Modal.defaultProps = {
    lockFocusAcrossFrames: true,
    returnFocusOnClose: true,
    scrollBehavior: "outside",
    trapFocus: true,
    autoFocus: true,
    blockScrollOnMount: true,
    allowPinchZoom: false,
    motionPreset: "scale"
};
if (_utils.__DEV__) Modal.displayName = "Modal";
var MotionDiv = _system.chakra(_framerMotion.motion.div);
/**
 * ModalContent is used to group modal's content. It has all the
 * necessary `aria-*` properties to indicate that it is a modal
 */ var ModalContent = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, children = props.children, rootProps = props.containerProps, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "children",
        "containerProps"
    ]);
    var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps;
    var dialogProps = getDialogProps(rest, ref);
    var containerProps = getDialogContainerProps(rootProps);
    var _className = _utils.cx("chakra-modal__content", className);
    var styles = _system.useStyles();
    var dialogStyles = _extends({
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0
    }, styles.dialog);
    var dialogContainerStyles = _extends({
        display: "flex",
        width: "100vw",
        height: "100vh",
        "@supports(height: -webkit-fill-available)": {
            height: "-webkit-fill-available"
        },
        position: "fixed",
        left: 0,
        top: 0
    }, styles.dialogContainer);
    var _useModalContext2 = useModalContext(), motionPreset = _useModalContext2.motionPreset;
    return(/*#__PURE__*/ React.createElement(ModalFocusScope, null, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, containerProps, {
        className: "chakra-modal__content-container",
        __css: dialogContainerStyles
    }), /*#__PURE__*/ React.createElement(_modalTransition.ModalTransition, _extends({
        preset: motionPreset,
        className: _className
    }, dialogProps, {
        __css: dialogStyles
    }), children))));
});
exports.ModalContent = ModalContent;
if (_utils.__DEV__) ModalContent.displayName = "ModalContent";
function ModalFocusScope(props) {
    var _useModalContext3 = useModalContext(), autoFocus = _useModalContext3.autoFocus, trapFocus = _useModalContext3.trapFocus, dialogRef = _useModalContext3.dialogRef, initialFocusRef = _useModalContext3.initialFocusRef, blockScrollOnMount = _useModalContext3.blockScrollOnMount, allowPinchZoom = _useModalContext3.allowPinchZoom, finalFocusRef = _useModalContext3.finalFocusRef, returnFocusOnClose = _useModalContext3.returnFocusOnClose, preserveScrollBarGap = _useModalContext3.preserveScrollBarGap, lockFocusAcrossFrames = _useModalContext3.lockFocusAcrossFrames;
    var _usePresence = _framerMotion.usePresence(), isPresent = _usePresence[0], safeToRemove = _usePresence[1];
    React.useEffect(function() {
        if (!isPresent && safeToRemove) setTimeout(safeToRemove);
    }, [
        isPresent,
        safeToRemove
    ]);
    return(/*#__PURE__*/ React.createElement(_focusLock.FocusLock, {
        autoFocus: autoFocus,
        isDisabled: !trapFocus,
        initialFocusRef: initialFocusRef,
        finalFocusRef: finalFocusRef,
        restoreFocus: returnFocusOnClose,
        contentRef: dialogRef,
        lockFocusAcrossFrames: lockFocusAcrossFrames
    }, /*#__PURE__*/ React.createElement(_reactRemoveScroll.RemoveScroll, {
        removeScrollBar: !preserveScrollBarGap,
        allowPinchZoom: allowPinchZoom,
        enabled: blockScrollOnMount,
        forwardProps: true
    }, props.children)));
}
/**
 * ModalOverlay renders a backdrop behind the modal. It is
 * also used as a wrapper for the modal content for better positioning.
 *
 * @see Docs https://chakra-ui.com/docs/overlay/modal
 */ var ModalOverlay = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, transition = props.transition, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "transition"
    ]);
    var _className = _utils.cx("chakra-modal__overlay", className);
    var styles = _system.useStyles();
    var overlayStyle = _extends({
        pos: "fixed",
        left: "0",
        top: "0",
        w: "100vw",
        h: "100vh"
    }, styles.overlay);
    var _useModalContext4 = useModalContext(), motionPreset = _useModalContext4.motionPreset;
    var motionProps = motionPreset === "none" ? {
    } : _transition.fadeConfig;
    return(/*#__PURE__*/ React.createElement(MotionDiv, _extends({
    }, motionProps, {
        __css: overlayStyle,
        ref: ref,
        className: _className
    }, rest)));
});
exports.ModalOverlay = ModalOverlay;
if (_utils.__DEV__) ModalOverlay.displayName = "ModalOverlay";
/**
 * ModalHeader
 *
 * React component that houses the title of the modal.
 *
 * @see Docs https://chakra-ui.com/docs/overlay/modal
 */ var ModalHeader = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var _useModalContext5 = useModalContext(), headerId = _useModalContext5.headerId, setHeaderMounted = _useModalContext5.setHeaderMounted;
    /**
   * Notify us if this component was rendered or used
   * so we can append `aria-labelledby` automatically
   */ React.useEffect(function() {
        setHeaderMounted(true);
        return function() {
            return setHeaderMounted(false);
        };
    }, [
        setHeaderMounted
    ]);
    var _className = _utils.cx("chakra-modal__header", className);
    var styles = _system.useStyles();
    var headerStyles = _extends({
        flex: 0
    }, styles.header);
    return(/*#__PURE__*/ React.createElement(_system.chakra.header, _extends({
        ref: ref,
        className: _className,
        id: headerId
    }, rest, {
        __css: headerStyles
    })));
});
exports.ModalHeader = ModalHeader;
if (_utils.__DEV__) ModalHeader.displayName = "ModalHeader";
/**
 * ModalBody
 *
 * React component that houses the main content of the modal.
 *
 * @see Docs https://chakra-ui.com/docs/overlay/modal
 */ var ModalBody = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var _useModalContext6 = useModalContext(), bodyId = _useModalContext6.bodyId, setBodyMounted = _useModalContext6.setBodyMounted;
    /**
   * Notify us if this component was rendered or used
   * so we can append `aria-describedby` automatically
   */ React.useEffect(function() {
        setBodyMounted(true);
        return function() {
            return setBodyMounted(false);
        };
    }, [
        setBodyMounted
    ]);
    var _className = _utils.cx("chakra-modal__body", className);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref,
        className: _className,
        id: bodyId
    }, rest, {
        __css: styles.body
    })));
});
exports.ModalBody = ModalBody;
if (_utils.__DEV__) ModalBody.displayName = "ModalBody";
/**
 * ModalFooter houses the action buttons of the modal.
 * @see Docs https://chakra-ui.com/docs/overlay/modal
 */ var ModalFooter = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "className"
    ]);
    var _className = _utils.cx("chakra-modal__footer", className);
    var styles = _system.useStyles();
    var footerStyles = _extends({
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end"
    }, styles.footer);
    return(/*#__PURE__*/ React.createElement(_system.chakra.footer, _extends({
        ref: ref
    }, rest, {
        __css: footerStyles,
        className: _className
    })));
});
exports.ModalFooter = ModalFooter;
if (_utils.__DEV__) ModalFooter.displayName = "ModalFooter";
/**
 * ModalCloseButton is used closes the modal.
 *
 * You don't need to pass the `onClick` to it, it reads the
 * `onClose` action from the modal context.
 */ var ModalCloseButton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var onClick = props.onClick, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "onClick",
        "className"
    ]);
    var _useModalContext7 = useModalContext(), onClose = _useModalContext7.onClose;
    var _className = _utils.cx("chakra-modal__close-btn", className);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_closeButton.CloseButton, _extends({
        ref: ref,
        __css: styles.closeButton,
        className: _className,
        onClick: _utils.callAllHandlers(onClick, function(event) {
            event.stopPropagation();
            onClose();
        })
    }, rest)));
});
exports.ModalCloseButton = ModalCloseButton;
if (_utils.__DEV__) ModalCloseButton.displayName = "ModalCloseButton";

},{"@chakra-ui/close-button":"6ZT8s","@chakra-ui/focus-lock":"6MQlM","@chakra-ui/portal":"5cHLt","@chakra-ui/system":"4QBuE","@chakra-ui/transition":"63bwb","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","framer-motion":"5ufJB","react":"3f97z","react-remove-scroll":"38TmN","./modal-transition":"3UymG","./use-modal":"6HiMl"}],"6MQlM":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports["default"] = exports.FocusLock = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));
var _utils = require("@chakra-ui/utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
var FocusLock = function FocusLock1(props) {
    var initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, contentRef = props.contentRef, restoreFocus = props.restoreFocus, children = props.children, isDisabled = props.isDisabled, autoFocus = props.autoFocus, persistentFocus = props.persistentFocus, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
    var onActivation = React.useCallback(function() {
        if (initialFocusRef != null && initialFocusRef.current) initialFocusRef.current.focus();
        else if (contentRef != null && contentRef.current) {
            var focusables = _utils.getAllFocusable(contentRef.current);
            if (focusables.length === 0) _utils.focus(contentRef.current, {
                nextTick: true
            });
        }
    }, [
        initialFocusRef,
        contentRef
    ]);
    var onDeactivation = React.useCallback(function() {
        var _finalFocusRef$curren;
        finalFocusRef == null || (_finalFocusRef$curren = finalFocusRef.current) == null || _finalFocusRef$curren.focus();
    }, [
        finalFocusRef
    ]);
    var returnFocus = restoreFocus && !finalFocusRef;
    return(/*#__PURE__*/ React.createElement(_reactFocusLock["default"], {
        crossFrame: lockFocusAcrossFrames,
        persistentFocus: persistentFocus,
        autoFocus: autoFocus,
        disabled: isDisabled,
        onActivation: onActivation,
        onDeactivation: onDeactivation,
        returnFocus: returnFocus
    }, children));
};
exports.FocusLock = FocusLock;
if (_utils.__DEV__) FocusLock.displayName = "FocusLock";
var _default = FocusLock;
exports["default"] = _default;

},{"react":"3f97z","react-focus-lock":"5IVqn","@chakra-ui/utils":"3364O"}],"5IVqn":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {
};
exports["default"] = void 0;
var _Combination = _interopRequireDefault(require("./Combination"));
var _UI = require("./UI");
Object.keys(_UI).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _UI[key];
        }
    });
});
var _default = _Combination["default"];
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","./Combination":"2wime","./UI":"63EeL"}],"4ttVj":[function(require,module,exports) {
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"2wime":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _Lock = _interopRequireDefault(require("./Lock"));
var _Trap = _interopRequireDefault(require("./Trap"));
/* that would be a BREAKING CHANGE!
// delaying sidecar execution till the first usage
const RequireSideCar = (props) => {
  // eslint-disable-next-line global-require
  const SideCar = require('./Trap').default;
  return <SideCar {...props} />;
};
*/ var FocusLockCombination = /*#__PURE__*/ React.forwardRef(function FocusLockUICombination(props, ref) {
    return(/*#__PURE__*/ React.createElement(_Lock["default"], _extends2["default"]({
        sideCar: _Trap["default"],
        ref: ref
    }, props)));
});
var _ref = _Lock["default"].propTypes || {
}, sideCar = _ref.sideCar, propTypes = _objectWithoutProperties2["default"](_ref, [
    "sideCar"
]);
FocusLockCombination.propTypes = propTypes;
var _default = FocusLockCombination;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/objectWithoutProperties":"5JZkE","@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","./Lock":"Q3xMr","./Trap":"5EB0A"}],"28En5":[function(require,module,exports) {
var _typeof = require("@babel/runtime/helpers/typeof")["default"];
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache1(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
module.exports = _interopRequireWildcard;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"@babel/runtime/helpers/typeof":"3F8fn"}],"3F8fn":[function(require,module,exports) {
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        module.exports = _typeof = function _typeof1(obj1) {
            return typeof obj1;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
    } else {
        module.exports = _typeof = function _typeof1(obj1) {
            return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
    return _typeof(obj);
}
module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"5JZkE":[function(require,module,exports) {
var objectWithoutPropertiesLoose = require("./objectWithoutPropertiesLoose.js");
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
module.exports = _objectWithoutProperties;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./objectWithoutPropertiesLoose.js":"3Yx9V"}],"3Yx9V":[function(require,module,exports) {
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
module.exports = _objectWithoutPropertiesLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"Q3xMr":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = require("prop-types");
var constants = _interopRequireWildcard(require("focus-lock/constants"));
var _useCallbackRef = require("use-callback-ref");
var _FocusGuard = require("./FocusGuard");
var _medium = require("./medium");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty2["default"](target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var emptyArray = [];
var FocusLock = /*#__PURE__*/ React.forwardRef(function FocusLockUI(props, parentRef) {
    var _objectSpread2;
    var _React$useState = React.useState(), _React$useState2 = _slicedToArray2["default"](_React$useState, 2), realObserved = _React$useState2[0], setObserved = _React$useState2[1];
    var observed = React.useRef();
    var isActive = React.useRef(false);
    var originalFocusedElement = React.useRef(null);
    var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container = _props$as === void 0 ? 'div' : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {
    } : _props$lockProps, SideCar = props.sideCar, shouldReturnFocus = props.returnFocus, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
    var _React$useState3 = React.useState({
    }), _React$useState4 = _slicedToArray2["default"](_React$useState3, 1), id = _React$useState4[0]; // SIDE EFFECT CALLBACKS
    var onActivation = React.useCallback(function() {
        originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
        if (observed.current && onActivationCallback) onActivationCallback(observed.current);
        isActive.current = true;
    }, [
        onActivationCallback
    ]);
    var onDeactivation = React.useCallback(function() {
        isActive.current = false;
        if (onDeactivationCallback) onDeactivationCallback(observed.current);
    }, [
        onDeactivationCallback
    ]);
    var returnFocus = React.useCallback(function(allowDefer) {
        var current = originalFocusedElement.current;
        if (Boolean(shouldReturnFocus) && current && current.focus) {
            var focusOptions = _typeof2["default"](shouldReturnFocus) === 'object' ? shouldReturnFocus : undefined;
            originalFocusedElement.current = null;
            if (allowDefer) // React might return focus after update
            // it's safer to defer the action
            Promise.resolve().then(function() {
                return current.focus(focusOptions);
            });
            else current.focus(focusOptions);
        }
    }, [
        shouldReturnFocus
    ]); // MEDIUM CALLBACKS
    var onFocus = React.useCallback(function(event) {
        if (isActive.current) _medium.mediumFocus.useMedium(event);
    }, []);
    var onBlur = _medium.mediumBlur.useMedium; // REF PROPAGATION
    // not using real refs due to race conditions
    var setObserveNode = React.useCallback(function(newObserved) {
        if (observed.current !== newObserved) {
            observed.current = newObserved;
            setObserved(newObserved);
        }
    }, []);
    if (typeof allowTextSelection !== 'undefined') // eslint-disable-next-line no-console
    console.warn('React-Focus-Lock: allowTextSelection is deprecated and enabled by default');
    React.useEffect(function() {
        if (!observed.current) // eslint-disable-next-line no-console
        console.error('FocusLock: could not obtain ref to internal node');
    }, []);
    var lockProps = _objectSpread((_objectSpread2 = {
    }, _defineProperty2["default"](_objectSpread2, constants.FOCUS_DISABLED, disabled && 'disabled'), _defineProperty2["default"](_objectSpread2, constants.FOCUS_GROUP, group), _objectSpread2), containerProps);
    var hasLeadingGuards = noFocusGuards !== true;
    var hasTailingGuards = hasLeadingGuards && noFocusGuards !== 'tail';
    var mergedRef = _useCallbackRef.useMergeRefs([
        parentRef,
        setObserveNode
    ]);
    return(/*#__PURE__*/ React.createElement(React.Fragment, null, hasLeadingGuards && [
        /*#__PURE__*/ React.createElement("div", {
            key: "guard-first",
            "data-focus-guard": true,
            tabIndex: disabled ? -1 : 0,
            style: _FocusGuard.hiddenGuard
        }),
        /*#__PURE__*/ // nearest focus guard
        React.createElement("div", {
            key: "guard-nearest",
            "data-focus-guard": true,
            tabIndex: disabled ? -1 : 1,
            style: _FocusGuard.hiddenGuard
        })
    ], !disabled && /*#__PURE__*/ React.createElement(SideCar, {
        id: id,
        sideCar: _medium.mediumSidecar,
        observed: realObserved,
        disabled: disabled,
        persistentFocus: persistentFocus,
        crossFrame: crossFrame,
        autoFocus: autoFocus,
        whiteList: whiteList,
        shards: shards,
        onActivation: onActivation,
        onDeactivation: onDeactivation,
        returnFocus: returnFocus
    }), /*#__PURE__*/ React.createElement(Container, _extends2["default"]({
        ref: mergedRef
    }, lockProps, {
        className: className,
        onBlur: onBlur,
        onFocus: onFocus
    }), children), hasTailingGuards && /*#__PURE__*/ React.createElement("div", {
        "data-focus-guard": true,
        tabIndex: disabled ? -1 : 0,
        style: _FocusGuard.hiddenGuard
    })));
});
FocusLock.propTypes = {
    children: _propTypes.node,
    disabled: _propTypes.bool,
    returnFocus: _propTypes.oneOfType([
        _propTypes.bool,
        _propTypes.object
    ]),
    noFocusGuards: _propTypes.bool,
    allowTextSelection: _propTypes.bool,
    autoFocus: _propTypes.bool,
    persistentFocus: _propTypes.bool,
    crossFrame: _propTypes.bool,
    group: _propTypes.string,
    className: _propTypes.string,
    whiteList: _propTypes.func,
    shards: _propTypes.arrayOf(_propTypes.any),
    as: _propTypes.oneOfType([
        _propTypes.string,
        _propTypes.func,
        _propTypes.object
    ]),
    lockProps: _propTypes.object,
    onActivation: _propTypes.func,
    onDeactivation: _propTypes.func,
    sideCar: _propTypes.any.isRequired
};
FocusLock.defaultProps = {
    children: undefined,
    disabled: false,
    returnFocus: false,
    noFocusGuards: false,
    autoFocus: true,
    persistentFocus: false,
    crossFrame: true,
    allowTextSelection: undefined,
    group: undefined,
    className: undefined,
    whiteList: undefined,
    shards: undefined,
    as: 'div',
    lockProps: {
    },
    onActivation: undefined,
    onDeactivation: undefined
};
var _default = FocusLock;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","@babel/runtime/helpers/defineProperty":"5PI63","@babel/runtime/helpers/typeof":"3F8fn","@babel/runtime/helpers/slicedToArray":"53tC9","react":"3f97z","prop-types":"4dfy5","focus-lock/constants":"3dDUo","use-callback-ref":"44VWN","./FocusGuard":"5JYPD","./medium":"5nVJa"}],"5PI63":[function(require,module,exports) {
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"53tC9":[function(require,module,exports) {
var arrayWithHoles = require("./arrayWithHoles.js");
var iterableToArrayLimit = require("./iterableToArrayLimit.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableRest = require("./nonIterableRest.js");
function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./arrayWithHoles.js":"2eoFF","./iterableToArrayLimit.js":"5Lc8C","./unsupportedIterableToArray.js":"2BZXI","./nonIterableRest.js":"5fR3t"}],"2eoFF":[function(require,module,exports) {
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"5Lc8C":[function(require,module,exports) {
function _iterableToArrayLimit(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
module.exports = _iterableToArrayLimit;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"2BZXI":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./arrayLikeToArray.js":"3neg6"}],"3neg6":[function(require,module,exports) {
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"5fR3t":[function(require,module,exports) {
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"4dfy5":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"68QIU","./factoryWithTypeCheckers":"1PVBO"}],"1PVBO":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message) {
        this.message = message;
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
                var checker = arrayOfTypeCheckers[i1];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) return null;
            }
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (!checker) continue;
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"68QIU","object-assign":"3eM6x","./lib/ReactPropTypesSecret":"3OVnw","./checkPropTypes":"R8SC7"}],"3eM6x":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"3OVnw":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"R8SC7":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = Function.call.bind(Object.prototype.hasOwnProperty);
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"3OVnw"}],"3dDUo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FOCUS_GROUP = 'data-focus-lock';
exports.FOCUS_DISABLED = 'data-focus-lock-disabled';
exports.FOCUS_ALLOW = 'data-no-focus-lock';
exports.FOCUS_AUTO = 'data-autofocus-inside';

},{}],"44VWN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assignRef_1 = require("./assignRef");
exports.assignRef = assignRef_1.assignRef;
// callback ref
var useRef_1 = require("./useRef");
exports.useCallbackRef = useRef_1.useCallbackRef;
var createRef_1 = require("./createRef");
exports.createCallbackRef = createRef_1.createCallbackRef;
// merge ref
var mergeRef_1 = require("./mergeRef");
exports.mergeRefs = mergeRef_1.mergeRefs;
var useMergeRef_1 = require("./useMergeRef");
exports.useMergeRefs = useMergeRef_1.useMergeRefs;
// transform ref
var useTransformRef_1 = require("./useTransformRef");
exports.useTransformRef = useTransformRef_1.useTransformRef;
var transformRef_1 = require("./transformRef");
exports.transformRef = transformRef_1.transformRef;
// refToCallback
var refToCallback_1 = require("./refToCallback");
exports.refToCallback = refToCallback_1.refToCallback;
exports.useRefToCallback = refToCallback_1.useRefToCallback;

},{"./assignRef":"QtUOV","./useRef":"5CQMc","./createRef":"3u328","./mergeRef":"4xUic","./useMergeRef":"2dLEL","./useTransformRef":"6Eq9B","./transformRef":"1S0g4","./refToCallback":"6vlTV"}],"QtUOV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Assigns a value for a given ref, no matter of the ref format
 * @param {RefObject} ref - a callback function or ref object
 * @param value - a new value
 *
 * @see https://github.com/theKashey/use-callback-ref#assignref
 * @example
 * const refObject = useRef();
 * const refFn = (ref) => {....}
 *
 * assignRef(refObject, "refValue");
 * assignRef(refFn, "refValue");
 */ function assignRef(ref, value) {
    if (typeof ref === 'function') ref(value);
    else if (ref) ref.current = value;
    return ref;
}
exports.assignRef = assignRef;

},{}],"5CQMc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
/**
 * creates a MutableRef with ref change callback
 * @param initialValue - initial ref value
 * @param {Function} callback - a callback to run when value changes
 *
 * @example
 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
 * ref.current = 1;
 * // prints 0 -> 1
 *
 * @see https://reactjs.org/docs/hooks-reference.html#useref
 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
 * @returns {MutableRefObject}
 */ function useCallbackRef(initialValue, callback) {
    var ref = react_1.useState(function() {
        return {
            // value
            value: initialValue,
            // last callback
            callback: callback,
            // "memoized" public interface
            facade: {
                get current () {
                    return ref.value;
                },
                set current (value){
                    var last = ref.value;
                    if (last !== value) {
                        ref.value = value;
                        ref.callback(value, last);
                    }
                }
            }
        };
    })[0];
    // update callback
    ref.callback = callback;
    return ref.facade;
}
exports.useCallbackRef = useCallbackRef;

},{"react":"3f97z"}],"3u328":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * creates a Ref object with on change callback
 * @param callback
 * @returns {RefObject}
 *
 * @see {@link useCallbackRef}
 * @see https://reactjs.org/docs/refs-and-the-dom.html#creating-refs
 */ function createCallbackRef(callback) {
    var current = null;
    return {
        get current () {
            return current;
        },
        set current (value){
            var last = current;
            if (last !== value) {
                current = value;
                callback(value, last);
            }
        }
    };
}
exports.createCallbackRef = createCallbackRef;

},{}],"4xUic":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var createRef_1 = require("./createRef");
var assignRef_1 = require("./assignRef");
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link useMergeRefs} to be used in ReactComponents
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = mergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */ function mergeRefs(refs) {
    return createRef_1.createCallbackRef(function(newValue) {
        return refs.forEach(function(ref) {
            return assignRef_1.assignRef(ref, newValue);
        });
    });
}
exports.mergeRefs = mergeRefs;

},{"./createRef":"3u328","./assignRef":"QtUOV"}],"2dLEL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var useRef_1 = require("./useRef");
var assignRef_1 = require("./assignRef");
/**
 * Merges two or more refs together providing a single interface to set their value
 * @param {RefObject|Ref} refs
 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
 *
 * @see {@link mergeRefs} a version without buit-in memoization
 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
 * @example
 * const Component = React.forwardRef((props, ref) => {
 *   const ownRef = useRef();
 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
 *   return <div ref={domRef}>...</div>
 * }
 */ function useMergeRefs(refs, defaultValue) {
    return useRef_1.useCallbackRef(defaultValue, function(newValue) {
        return refs.forEach(function(ref) {
            return assignRef_1.assignRef(ref, newValue);
        });
    });
}
exports.useMergeRefs = useMergeRefs;

},{"./useRef":"5CQMc","./assignRef":"QtUOV"}],"6Eq9B":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var useRef_1 = require("./useRef");
var assignRef_1 = require("./assignRef");
/**
 * Create a _lense_ on Ref, making it possible to transform ref value
 * @param {ReactRef} ref
 * @param {Function} transformer. 👉 Ref would be __NOT updated__ on `transformer` update.
 * @returns {RefObject}
 *
 * @see https://github.com/theKashey/use-callback-ref#usetransformref-to-replace-reactuseimperativehandle
 * @example
 *
 * const ResizableWithRef = forwardRef((props, ref) =>
 *  <Resizable {...props} ref={useTransformRef(ref, i => i ? i.resizable : null)}/>
 * );
 */ function useTransformRef(ref, transformer) {
    return useRef_1.useCallbackRef(undefined, function(value) {
        return assignRef_1.assignRef(ref, transformer(value));
    });
}
exports.useTransformRef = useTransformRef;

},{"./useRef":"5CQMc","./assignRef":"QtUOV"}],"1S0g4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assignRef_1 = require("./assignRef");
var createRef_1 = require("./createRef");
function transformRef(ref, transformer) {
    return createRef_1.createCallbackRef(function(value) {
        return assignRef_1.assignRef(ref, transformer(value));
    });
}
exports.transformRef = transformRef;

},{"./assignRef":"QtUOV","./createRef":"3u328"}],"6vlTV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Unmemoized version of {@link useRefToCallback}
 * @see {@link useRefToCallback}
 * @param ref
 */ function refToCallback(ref) {
    return function(newValue) {
        if (typeof ref === 'function') ref(newValue);
        else if (ref) ref.current = newValue;
    };
}
exports.refToCallback = refToCallback;
var nullCallback = function() {
    return null;
};
// lets maintain a weak ref to, well, ref :)
// not using `kashe` to keep this package small
var weakMem = new WeakMap();
var weakMemoize = function(ref) {
    var usedRef = ref || nullCallback;
    if (weakMem.has(usedRef)) return weakMem.get(usedRef);
    var cb = refToCallback(usedRef);
    weakMem.set(usedRef, cb);
    return cb;
};
/**
 * Transforms a given `ref` into `callback`.
 *
 * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}
 *
 * @param {ReactRef} ref
 * @returns {Function}
 *
 * @see https://github.com/theKashey/use-callback-ref#reftocallback
 *
 * @example
 * const ref = useRef(0);
 * const setRef = useRefToCallback(ref);
 * 👉 setRef(10);
 * ✅ ref.current === 10
 */ function useRefToCallback(ref) {
    return weakMemoize(ref);
}
exports.useRefToCallback = useRefToCallback;

},{}],"5JYPD":[function(require,module,exports) {
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = exports.hiddenGuard = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var hiddenGuard = {
    width: '1px',
    height: '0px',
    padding: 0,
    overflow: 'hidden',
    position: 'fixed',
    top: '1px',
    left: '1px'
};
exports.hiddenGuard = hiddenGuard;
var InFocusGuard = function InFocusGuard1(_ref) {
    var children = _ref.children;
    return(/*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement("div", {
        key: "guard-first",
        "data-focus-guard": true,
        "data-focus-auto-guard": true,
        style: hiddenGuard
    }), children, children && /*#__PURE__*/ React.createElement("div", {
        key: "guard-last",
        "data-focus-guard": true,
        "data-focus-auto-guard": true,
        style: hiddenGuard
    })));
};
InFocusGuard.propTypes = {
    children: _propTypes["default"].node
};
InFocusGuard.defaultProps = {
    children: null
};
var _default = InFocusGuard;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/interopRequireWildcard":"28En5","react":"3f97z","prop-types":"4dfy5"}],"5nVJa":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mediumSidecar = exports.mediumEffect = exports.mediumBlur = exports.mediumFocus = void 0;
var _useSidecar = require("use-sidecar");
var mediumFocus = _useSidecar.createMedium({
}, function(_ref) {
    var target = _ref.target, currentTarget = _ref.currentTarget;
    return {
        target: target,
        currentTarget: currentTarget
    };
});
exports.mediumFocus = mediumFocus;
var mediumBlur = _useSidecar.createMedium();
exports.mediumBlur = mediumBlur;
var mediumEffect = _useSidecar.createMedium();
exports.mediumEffect = mediumEffect;
var mediumSidecar = _useSidecar.createSidecarMedium({
    async: true
});
exports.mediumSidecar = mediumSidecar;

},{"use-sidecar":"6Z56g"}],"6Z56g":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hoc_1 = require("./hoc");
exports.sidecar = hoc_1.sidecar;
var hook_1 = require("./hook");
exports.useSidecar = hook_1.useSidecar;
var config_1 = require("./config");
exports.setConfig = config_1.setConfig;
var medium_1 = require("./medium");
exports.createMedium = medium_1.createMedium;
exports.createSidecarMedium = medium_1.createSidecarMedium;
var renderProp_1 = require("./renderProp");
exports.renderCar = renderProp_1.renderCar;
var exports_1 = require("./exports");
exports.exportSidecar = exports_1.exportSidecar;

},{"./hoc":"38QBO","./hook":"1827d","./config":"7Hafc","./medium":"248fO","./renderProp":"2qo9C","./exports":"5UEgq"}],"38QBO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var hook_1 = require("./hook");
function sidecar(importer, errorComponent) {
    var ErrorCase = function() {
        return errorComponent;
    };
    return function Sidecar(props) {
        var _a = hook_1.useSidecar(importer, props.sideCar), Car = _a[0], error = _a[1];
        if (error && errorComponent) return ErrorCase;
        return Car ? React.createElement(Car, tslib_1.__assign({
        }, props)) : null;
    };
}
exports.sidecar = sidecar;

},{"tslib":"3JWUr","react":"3f97z","./hook":"1827d"}],"3JWUr":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __createBinding = function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __exportStar = function(m, exports) {
        for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
        return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
        privateMap.set(receiver, value);
        return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"1827d":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var react_1 = require("react");
var env_1 = require("./env");
var cache = new WeakMap();
function useSidecar(importer, effect) {
    var options = effect && effect.options || {
    };
    if (env_1.env.isNode && !options.ssr) return [
        null,
        null
    ];
    var couldUseCache = env_1.env.forceCache || env_1.env.isNode && !!options.ssr || !options.async;
    var _a = react_1.useState(couldUseCache ? function() {
        return cache.get(importer);
    } : undefined), Car = _a[0], setCar = _a[1];
    var _b = react_1.useState(null), error = _b[0], setError = _b[1];
    react_1.useEffect(function() {
        if (!Car) importer().then(function(car) {
            var resolved = effect ? effect.read() : car.default || car;
            if (!resolved) {
                console.error('Sidecar error: with importer', importer);
                var error_1;
                if (effect) {
                    console.error('Sidecar error: with medium', effect);
                    error_1 = new Error('Sidecar medium was not found');
                } else error_1 = new Error('Sidecar was not found in exports');
                setError(function() {
                    return error_1;
                });
                throw error_1;
            }
            cache.set(importer, resolved);
            setCar(function() {
                return resolved;
            });
        }, function(e) {
            return setError(function() {
                return e;
            });
        });
    }, []);
    return [
        Car,
        error
    ];
}
exports.useSidecar = useSidecar;

},{"react":"3f97z","./env":"2LmxW"}],"2LmxW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var detect_node_es_1 = require("detect-node-es");
exports.env = {
    isNode: detect_node_es_1.isNode,
    forceCache: false
};

},{"detect-node-es":"62mGy"}],"62mGy":[function(require,module,exports) {
module.exports.isNode = false;

},{}],"7Hafc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.config = {
    onError: function(e) {
        return console.error(e);
    }
};
exports.setConfig = function(conf) {
    Object.assign(exports.config, conf);
};

},{}],"248fO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
function ItoI(a) {
    return a;
}
function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    var buffer = [];
    var assigned = false;
    var medium = {
        read: function() {
            if (assigned) throw new Error('Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.');
            if (buffer.length) return buffer[buffer.length - 1];
            return defaults;
        },
        useMedium: function(data) {
            var item = middleware(data, assigned);
            buffer.push(item);
            return function() {
                buffer = buffer.filter(function(x) {
                    return x !== item;
                });
            };
        },
        assignSyncMedium: function(cb) {
            assigned = true;
            while(buffer.length){
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
            }
            buffer = {
                push: function(x) {
                    return cb(x);
                },
                filter: function() {
                    return buffer;
                }
            };
        },
        assignMedium: function(cb) {
            assigned = true;
            var pendingQueue = [];
            if (buffer.length) {
                var cbs = buffer;
                buffer = [];
                cbs.forEach(cb);
                pendingQueue = buffer;
            }
            var executeQueue = function() {
                var cbs = pendingQueue;
                pendingQueue = [];
                cbs.forEach(cb);
            };
            var cycle = function() {
                return Promise.resolve().then(executeQueue);
            };
            cycle();
            buffer = {
                push: function(x) {
                    pendingQueue.push(x);
                    cycle();
                },
                filter: function(filter) {
                    pendingQueue = pendingQueue.filter(filter);
                    return buffer;
                }
            };
        }
    };
    return medium;
}
function createMedium(defaults, middleware) {
    if (middleware === void 0) middleware = ItoI;
    return innerCreateMedium(defaults, middleware);
}
exports.createMedium = createMedium;
function createSidecarMedium(options) {
    if (options === void 0) options = {
    };
    var medium = innerCreateMedium(null);
    medium.options = tslib_1.__assign({
        async: true,
        ssr: false
    }, options);
    return medium;
}
exports.createSidecarMedium = createSidecarMedium;

},{"tslib":"3JWUr"}],"2qo9C":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var react_1 = require("react");
function renderCar(WrappedComponent, defaults, options) {
    if (options === void 0) options = {
    };
    function State(_a) {
        var stateRef = _a.stateRef, props = _a.props;
        var renderTarget = react_1.useCallback(function SideTarget() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
            react_1.useLayoutEffect(function() {
                stateRef.current(args);
            });
            return null;
        }, []);
        return React.createElement(WrappedComponent, tslib_1.__assign({
        }, props, {
            children: renderTarget
        }));
    }
    var Children = React.memo(function(_a) {
        var stateRef = _a.stateRef, defaultState = _a.defaultState, children = _a.children;
        var _b = react_1.useState(defaultState.current), state = _b[0], setState = _b[1];
        React.useEffect(function() {
            stateRef.current = setState;
        }, []);
        return children.apply(void 0, state);
    }, function() {
        return true;
    });
    return function Combiner(props) {
        var defaultState = React.useRef(defaults(props));
        var ref = React.useRef(function(state) {
            return defaultState.current = state;
        });
        return React.createElement(React.Fragment, null, React.createElement(State, {
            stateRef: ref,
            props: props
        }), React.createElement(Children, {
            stateRef: ref,
            defaultState: defaultState,
            children: props.children
        }));
    };
}
exports.renderCar = renderCar;

},{"tslib":"3JWUr","react":"3f97z"}],"5UEgq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var SideCar = function(_a) {
    var sideCar = _a.sideCar, rest = tslib_1.__rest(_a, [
        "sideCar"
    ]);
    if (!sideCar) throw new Error('Sidecar: please provide `sideCar` property to import the right car');
    var Target = sideCar.read();
    if (!Target) throw new Error('Sidecar medium not found');
    return React.createElement(Target, tslib_1.__assign({
    }, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
}
exports.exportSidecar = exportSidecar;

},{"tslib":"3JWUr","react":"3f97z"}],"5EB0A":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClientsideEffect = _interopRequireDefault(require("react-clientside-effect"));
var _focusLock = _interopRequireWildcard(require("focus-lock"));
var _util = require("./util");
var _medium = require("./medium");
var focusOnBody = function focusOnBody1() {
    return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus1() {
    return focusOnBody() || _focusLock.focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist1() {
    return true;
};
var focusWhitelisted = function focusWhitelisted1(activeElement) {
    return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal1(observerNode, portaledElement) {
    lastPortaledElement = {
        observerNode: observerNode,
        portaledElement: portaledElement
    };
};
var focusIsPortaledPair = function focusIsPortaledPair1(element) {
    return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
    var lastGuard = null;
    var i = startIndex;
    do {
        var item = allNodes[i];
        if (item.guard) {
            if (item.node.dataset.focusAutoGuard) lastGuard = item;
        } else if (item.lockItem) {
            if (i !== startIndex) // we will tab to the next element
            return;
            lastGuard = null;
        } else break;
    }while ((i += step) !== end)
    if (lastGuard) lastGuard.node.tabIndex = 0;
}
var extractRef = function extractRef1(ref) {
    return ref && 'current' in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside1(crossFrameOption) {
    if (crossFrameOption) // with cross frame return true for any value
    return Boolean(focusWasOutsideWindow);
     // in other case return only of focus went a while aho
    return focusWasOutsideWindow === 'meanwhile';
};
var activateTrap = function activateTrap1() {
    var result = false;
    if (lastActiveTrap) {
        var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame;
        var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
        var activeElement = document && document.activeElement;
        if (workingNode) {
            var workingArea = [
                workingNode
            ].concat(_toConsumableArray2["default"](shards.map(extractRef).filter(Boolean)));
            if (!activeElement || focusWhitelisted(activeElement)) {
                if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
                    if (workingNode && !(_focusLock.focusInside(workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
                        if (document && !lastActiveFocus && activeElement && !autoFocus) {
                            // Check if blur() exists, which is missing on certain elements on IE
                            if (activeElement.blur) activeElement.blur();
                            document.body.focus();
                        } else {
                            result = _focusLock["default"](workingArea, lastActiveFocus);
                            lastPortaledElement = {
                            };
                        }
                    }
                    focusWasOutsideWindow = false;
                    lastActiveFocus = document && document.activeElement;
                }
            }
            if (document) {
                var newActiveElement = document && document.activeElement;
                var allNodes = _focusLock.getFocusabledIn(workingArea);
                var focusedIndex = allNodes.map(function(_ref) {
                    var node = _ref.node;
                    return node;
                }).indexOf(newActiveElement);
                if (focusedIndex > -1) {
                    // remove old focus
                    allNodes.filter(function(_ref2) {
                        var guard = _ref2.guard, node = _ref2.node;
                        return guard && node.dataset.focusAutoGuard;
                    }).forEach(function(_ref3) {
                        var node = _ref3.node;
                        return node.removeAttribute('tabIndex');
                    });
                    autoGuard(focusedIndex, allNodes.length, 1, allNodes);
                    autoGuard(focusedIndex, -1, -1, allNodes);
                }
            }
        }
    }
    return result;
};
var onTrap = function onTrap1(event) {
    if (activateTrap() && event) {
        // prevent scroll jump
        event.stopPropagation();
        event.preventDefault();
    }
};
var onBlur = function onBlur1() {
    return _util.deferAction(activateTrap);
};
var onFocus = function onFocus1(event) {
    // detect portal
    var source = event.target;
    var currentNode = event.currentTarget;
    if (!currentNode.contains(source)) recordPortal(currentNode, source);
};
var FocusWatcher = function FocusWatcher1() {
    return null;
};
var FocusTrap = function FocusTrap1(_ref4) {
    var children = _ref4.children;
    return(/*#__PURE__*/ React.createElement("div", {
        onBlur: onBlur,
        onFocus: onFocus
    }, children));
};
FocusTrap.propTypes = {
    children: _propTypes["default"].node.isRequired
};
var onWindowBlur = function onWindowBlur1() {
    focusWasOutsideWindow = 'just'; // using setTimeout to set  this variable after React/sidecar reaction
    setTimeout(function() {
        focusWasOutsideWindow = 'meanwhile';
    }, 0);
};
var attachHandler = function attachHandler1() {
    document.addEventListener('focusin', onTrap, true);
    document.addEventListener('focusout', onBlur);
    window.addEventListener('blur', onWindowBlur);
};
var detachHandler = function detachHandler1() {
    document.removeEventListener('focusin', onTrap, true);
    document.removeEventListener('focusout', onBlur);
    window.removeEventListener('blur', onWindowBlur);
};
function reducePropsToState(propsList) {
    return propsList.filter(function(_ref5) {
        var disabled = _ref5.disabled;
        return !disabled;
    });
}
function handleStateChangeOnClient(traps) {
    var trap = traps.slice(-1)[0];
    if (trap && !lastActiveTrap) attachHandler();
    var lastTrap = lastActiveTrap;
    var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
    lastActiveTrap = trap;
    if (lastTrap && !sameTrap) {
        lastTrap.onDeactivation(); // return focus only of last trap was removed
        if (!traps.filter(function(_ref6) {
            var id = _ref6.id;
            return id === lastTrap.id;
        }).length) // allow defer is no other trap is awaiting restore
        lastTrap.returnFocus(!trap);
    }
    if (trap) {
        lastActiveFocus = null;
        if (!sameTrap || lastTrap.observed !== trap.observed) trap.onActivation();
        activateTrap(true);
        _util.deferAction(activateTrap);
    } else {
        detachHandler();
        lastActiveFocus = null;
    }
} // bind medium
_medium.mediumFocus.assignSyncMedium(onFocus);
_medium.mediumBlur.assignMedium(onBlur);
_medium.mediumEffect.assignMedium(function(cb) {
    return cb({
        moveFocusInside: _focusLock["default"],
        focusInside: _focusLock.focusInside
    });
});
var _default = _reactClientsideEffect["default"](reducePropsToState, handleStateChangeOnClient)(FocusWatcher);
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/toConsumableArray":"7KUD7","react":"3f97z","prop-types":"4dfy5","react-clientside-effect":"1Ts7O","focus-lock":"6YNhp","./util":"4rHRP","./medium":"5nVJa"}],"7KUD7":[function(require,module,exports) {
var arrayWithoutHoles = require("./arrayWithoutHoles.js");
var iterableToArray = require("./iterableToArray.js");
var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
var nonIterableSpread = require("./nonIterableSpread.js");
function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./arrayWithoutHoles.js":"3Uv5h","./iterableToArray.js":"6kldf","./unsupportedIterableToArray.js":"2BZXI","./nonIterableSpread.js":"30X0e"}],"3Uv5h":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./arrayLikeToArray.js":"3neg6"}],"6kldf":[function(require,module,exports) {
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"30X0e":[function(require,module,exports) {
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"1Ts7O":[function(require,module,exports) {
'use strict';
function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var React = require('react');
var React__default = _interopDefault(React);
function withSideEffect(reducePropsToState, handleStateChangeOnClient) {
    if (typeof reducePropsToState !== 'function') throw new Error('Expected reducePropsToState to be a function.');
    if (typeof handleStateChangeOnClient !== 'function') throw new Error('Expected handleStateChangeOnClient to be a function.');
    function getDisplayName(WrappedComponent) {
        return WrappedComponent.displayName || WrappedComponent.name || 'Component';
    }
    return function wrap(WrappedComponent) {
        if (typeof WrappedComponent !== 'function') throw new Error('Expected WrappedComponent to be a React component.');
        var mountedInstances = [];
        var state;
        function emitChange() {
            state = reducePropsToState(mountedInstances.map(function(instance) {
                return instance.props;
            }));
            handleStateChangeOnClient(state);
        }
        var SideEffect1 = /*#__PURE__*/ function(_PureComponent) {
            _inheritsLoose(SideEffect2, _PureComponent);
            function SideEffect2() {
                return _PureComponent.apply(this, arguments) || this;
            }
            // Try to use displayName of wrapped component
            SideEffect2.peek = function peek() {
                return state;
            };
            var _proto = SideEffect2.prototype;
            _proto.componentDidMount = function componentDidMount() {
                mountedInstances.push(this);
                emitChange();
            };
            _proto.componentDidUpdate = function componentDidUpdate() {
                emitChange();
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                var index = mountedInstances.indexOf(this);
                mountedInstances.splice(index, 1);
                emitChange();
            };
            _proto.render = function render() {
                return(/*#__PURE__*/ React__default.createElement(WrappedComponent, this.props));
            };
            return SideEffect2;
        }(React.PureComponent);
        _defineProperty(SideEffect1, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
        return SideEffect1;
    };
}
module.exports = withSideEffect;

},{"@babel/runtime/helpers/inheritsLoose":"01QUt","@babel/runtime/helpers/defineProperty":"5PI63","react":"3f97z"}],"01QUt":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{"./setPrototypeOf.js":"37Yld"}],"37Yld":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;

},{}],"6YNhp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var constants = tslib_1.__importStar(require("./constants"));
exports.constants = constants;
var focusables_1 = require("./focusables");
exports.getFocusabledIn = focusables_1.getFocusabledIn;
var focusInside_1 = require("./focusInside");
exports.focusInside = focusInside_1.focusInside;
var focusIsHidden_1 = require("./focusIsHidden");
exports.focusIsHidden = focusIsHidden_1.focusIsHidden;
var focusMerge_1 = require("./focusMerge");
exports.focusMerge = focusMerge_1.getFocusMerge;
var setFocus_1 = require("./setFocus");
var sibling_1 = require("./sibling");
exports.focusNextElement = sibling_1.focusNextElement;
exports.focusPrevElement = sibling_1.focusPrevElement;
var tabHook_1 = tslib_1.__importDefault(require("./tabHook"));
exports.tabHook = tabHook_1.default;
var all_affected_1 = require("./utils/all-affected");
exports.getAllAffectedNodes = all_affected_1.getAllAffectedNodes;
exports.default = setFocus_1.setFocus;

},{"tslib":"3XjIt","./constants":"3dDUo","./focusables":"3FjKX","./focusInside":"62zPw","./focusIsHidden":"7Ieh9","./focusMerge":"3Lz8p","./setFocus":"2sZRW","./sibling":"3msyv","./tabHook":"7nKKk","./utils/all-affected":"68nsv"}],"3XjIt":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __createBinding = function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __exportStar = function(m, exports) {
        for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
        return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
        privateMap.set(receiver, value);
        return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"3FjKX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var all_affected_1 = require("./utils/all-affected");
var DOMutils_1 = require("./utils/DOMutils");
var is_1 = require("./utils/is");
var parenting_1 = require("./utils/parenting");
exports.getFocusabledIn = function(topNode) {
    var entries = all_affected_1.getAllAffectedNodes(topNode).filter(is_1.isNotAGuard);
    var commonParent = parenting_1.getTopCommonParent(topNode, topNode, entries);
    var outerNodes = DOMutils_1.getTabbableNodes([
        commonParent
    ], true);
    var innerElements = DOMutils_1.getTabbableNodes(entries).filter(function(_a) {
        var node = _a.node;
        return is_1.isNotAGuard(node);
    }).map(function(_a) {
        var node = _a.node;
        return node;
    });
    return outerNodes.map(function(_a) {
        var node = _a.node, index = _a.index;
        return {
            node: node,
            index: index,
            lockItem: innerElements.indexOf(node) >= 0,
            guard: is_1.isGuard(node)
        };
    });
};

},{"./utils/all-affected":"68nsv","./utils/DOMutils":"3fhQH","./utils/is":"6dxlv","./utils/parenting":"6mSDA"}],"68nsv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var constants_1 = require("../constants");
var array_1 = require("./array");
var filterNested = function(nodes) {
    var contained = new Set();
    var l = nodes.length;
    for(var i = 0; i < l; i += 1)for(var j = i + 1; j < l; j += 1){
        var position = nodes[i].compareDocumentPosition(nodes[j]);
        if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) contained.add(j);
        if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) contained.add(i);
    }
    return nodes.filter(function(_, index) {
        return !contained.has(index);
    });
};
var getTopParent = function(node) {
    return node.parentNode ? getTopParent(node.parentNode) : node;
};
exports.getAllAffectedNodes = function(node) {
    var nodes = array_1.asArray(node);
    return nodes.filter(Boolean).reduce(function(acc, currentNode) {
        var group = currentNode.getAttribute(constants_1.FOCUS_GROUP);
        acc.push.apply(acc, group ? filterNested(array_1.toArray(getTopParent(currentNode).querySelectorAll("[" + constants_1.FOCUS_GROUP + "=\"" + group + "\"]:not([" + constants_1.FOCUS_DISABLED + "=\"disabled\"])"))) : [
            currentNode
        ]);
        return acc;
    }, []);
};

},{"../constants":"3dDUo","./array":"4UjXe"}],"4UjXe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toArray = function(a) {
    var ret = Array(a.length);
    for(var i = 0; i < a.length; ++i)ret[i] = a[i];
    return ret;
};
exports.asArray = function(a) {
    return Array.isArray(a) ? a : [
        a
    ];
};

},{}],"3fhQH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var array_1 = require("./array");
var is_1 = require("./is");
var tabOrder_1 = require("./tabOrder");
var tabUtils_1 = require("./tabUtils");
exports.filterFocusable = function(nodes) {
    return array_1.toArray(nodes).filter(function(node) {
        return is_1.isVisible(node);
    }).filter(function(node) {
        return is_1.notHiddenInput(node);
    });
};
exports.getTabbableNodes = function(topNodes, withGuards) {
    return tabOrder_1.orderByTabIndex(exports.filterFocusable(tabUtils_1.getFocusables(topNodes, withGuards)), true, withGuards);
};
exports.getAllTabbableNodes = function(topNodes) {
    return tabOrder_1.orderByTabIndex(exports.filterFocusable(tabUtils_1.getFocusables(topNodes)), false);
};
exports.parentAutofocusables = function(topNode) {
    return exports.filterFocusable(tabUtils_1.getParentAutofocusables(topNode));
};

},{"./array":"4UjXe","./is":"6dxlv","./tabOrder":"7e1Xz","./tabUtils":"3dIUQ"}],"6dxlv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isElementHidden = function(computedStyle) {
    if (!computedStyle || !computedStyle.getPropertyValue) return false;
    return computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden';
};
exports.isVisible = function(node) {
    return !node || node === document || node && node.nodeType === Node.DOCUMENT_NODE || !isElementHidden(window.getComputedStyle(node, null)) && exports.isVisible(node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node.parentNode.host : node.parentNode);
};
exports.notHiddenInput = function(node) {
    return !((node.tagName === 'INPUT' || node.tagName === 'BUTTON') && (node.type === 'hidden' || node.disabled));
};
exports.isGuard = function(node) {
    return Boolean(node && node.dataset && node.dataset.focusGuard);
};
exports.isNotAGuard = function(node) {
    return !exports.isGuard(node);
};
exports.isDefined = function(x) {
    return Boolean(x);
};

},{}],"7e1Xz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var array_1 = require("./array");
exports.tabSort = function(a, b) {
    var tabDiff = a.tabIndex - b.tabIndex;
    var indexDiff = a.index - b.index;
    if (tabDiff) {
        if (!a.tabIndex) return 1;
        if (!b.tabIndex) return -1;
    }
    return tabDiff || indexDiff;
};
exports.orderByTabIndex = function(nodes, filterNegative, keepGuards) {
    return array_1.toArray(nodes).map(function(node, index) {
        return {
            node: node,
            index: index,
            tabIndex: keepGuards && node.tabIndex === -1 ? (node.dataset || {
            }).focusGuard ? 0 : -1 : node.tabIndex
        };
    }).filter(function(data) {
        return !filterNegative || data.tabIndex >= 0;
    }).sort(exports.tabSort);
};

},{"./array":"4UjXe"}],"3dIUQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var constants_1 = require("../constants");
var array_1 = require("./array");
var tabbables_1 = require("./tabbables");
var queryTabbables = tabbables_1.tabbables.join(',');
var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
exports.getFocusables = function(parents, withGuards) {
    return parents.reduce(function(acc, parent) {
        return acc.concat(array_1.toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode ? array_1.toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node) {
            return node === parent;
        }) : []);
    }, []);
};
exports.getParentAutofocusables = function(parent) {
    var parentFocus = parent.querySelectorAll("[" + constants_1.FOCUS_AUTO + "]");
    return array_1.toArray(parentFocus).map(function(node) {
        return exports.getFocusables([
            node
        ]);
    }).reduce(function(acc, nodes) {
        return acc.concat(nodes);
    }, []);
};

},{"../constants":"3dDUo","./array":"4UjXe","./tabbables":"3b8XS"}],"3b8XS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tabbables = [
    'button:enabled',
    'select:enabled',
    'textarea:enabled',
    'input:enabled',
    'a[href]',
    'area[href]',
    'summary',
    'iframe',
    'object',
    'embed',
    'audio[controls]',
    'video[controls]',
    '[tabindex]',
    '[contenteditable]',
    '[autofocus]', 
];

},{}],"6mSDA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var array_1 = require("./array");
var DOMutils_1 = require("./DOMutils");
var getParents = function(node, parents) {
    if (parents === void 0) parents = [];
    parents.push(node);
    if (node.parentNode) getParents(node.parentNode, parents);
    return parents;
};
exports.getCommonParent = function(nodeA, nodeB) {
    var parentsA = getParents(nodeA);
    var parentsB = getParents(nodeB);
    for(var i = 0; i < parentsA.length; i += 1){
        var currentParent = parentsA[i];
        if (parentsB.indexOf(currentParent) >= 0) return currentParent;
    }
    return false;
};
exports.getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
    var activeElements = array_1.asArray(baseActiveElement);
    var leftEntries = array_1.asArray(leftEntry);
    var activeElement = activeElements[0];
    var topCommon = false;
    leftEntries.filter(Boolean).forEach(function(entry) {
        topCommon = exports.getCommonParent(topCommon || entry, entry) || topCommon;
        rightEntries.filter(Boolean).forEach(function(subEntry) {
            var common = exports.getCommonParent(activeElement, subEntry);
            if (common) {
                if (!topCommon || common.contains(topCommon)) topCommon = common;
                else topCommon = exports.getCommonParent(common, topCommon);
            }
        });
    });
    return topCommon;
};
exports.allParentAutofocusables = function(entries) {
    return entries.reduce(function(acc, node) {
        return acc.concat(DOMutils_1.parentAutofocusables(node));
    }, []);
};

},{"./array":"4UjXe","./DOMutils":"3fhQH"}],"62zPw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var all_affected_1 = require("./utils/all-affected");
var array_1 = require("./utils/array");
var focusInFrame = function(frame) {
    return frame === document.activeElement;
};
var focusInsideIframe = function(topNode) {
    return Boolean(array_1.toArray(topNode.querySelectorAll('iframe')).some(function(node) {
        return focusInFrame(node);
    }));
};
exports.focusInside = function(topNode) {
    var activeElement = document && document.activeElement;
    if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) return false;
    return all_affected_1.getAllAffectedNodes(topNode).reduce(function(result, node) {
        return result || node.contains(activeElement) || focusInsideIframe(node);
    }, false);
};

},{"./utils/all-affected":"68nsv","./utils/array":"4UjXe"}],"7Ieh9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var constants_1 = require("./constants");
var array_1 = require("./utils/array");
exports.focusIsHidden = function() {
    return document && array_1.toArray(document.querySelectorAll("[" + constants_1.FOCUS_ALLOW + "]")).some(function(node) {
        return node.contains(document.activeElement);
    });
};

},{"./constants":"3dDUo","./utils/array":"4UjXe"}],"3Lz8p":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var solver_1 = require("./solver");
var all_affected_1 = require("./utils/all-affected");
var DOMutils_1 = require("./utils/DOMutils");
var firstFocus_1 = require("./utils/firstFocus");
var is_1 = require("./utils/is");
var parenting_1 = require("./utils/parenting");
var findAutoFocused = function(autoFocusables) {
    return function(node) {
        return node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;
    };
};
var reorderNodes = function(srcNodes, dstNodes) {
    var remap = new Map();
    dstNodes.forEach(function(entity) {
        return remap.set(entity.node, entity);
    });
    return srcNodes.map(function(node) {
        return remap.get(node);
    }).filter(is_1.isDefined);
};
exports.getFocusMerge = function(topNode, lastNode) {
    var activeElement = document && document.activeElement;
    var entries = all_affected_1.getAllAffectedNodes(topNode).filter(is_1.isNotAGuard);
    var commonParent = parenting_1.getTopCommonParent(activeElement || topNode, topNode, entries);
    var anyFocusable = DOMutils_1.getAllTabbableNodes(entries);
    var innerElements = DOMutils_1.getTabbableNodes(entries).filter(function(_a) {
        var node = _a.node;
        return is_1.isNotAGuard(node);
    });
    if (!innerElements[0]) {
        innerElements = anyFocusable;
        if (!innerElements[0]) return undefined;
    }
    var outerNodes = DOMutils_1.getAllTabbableNodes([
        commonParent
    ]).map(function(_a) {
        var node = _a.node;
        return node;
    });
    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
    var innerNodes = orderedInnerElements.map(function(_a) {
        var node = _a.node;
        return node;
    });
    var newId = solver_1.newFocus(innerNodes, outerNodes, activeElement, lastNode);
    if (newId === solver_1.NEW_FOCUS) {
        var autoFocusable = anyFocusable.map(function(_a) {
            var node = _a.node;
            return node;
        }).filter(findAutoFocused(parenting_1.allParentAutofocusables(entries)));
        return {
            node: autoFocusable && autoFocusable.length ? firstFocus_1.pickFirstFocus(autoFocusable) : firstFocus_1.pickFirstFocus(innerNodes)
        };
    }
    if (newId === undefined) return newId;
    return orderedInnerElements[newId];
};

},{"./solver":"5TgcD","./utils/all-affected":"68nsv","./utils/DOMutils":"3fhQH","./utils/firstFocus":"21Gjw","./utils/is":"6dxlv","./utils/parenting":"6mSDA"}],"5TgcD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var correctFocus_1 = require("./utils/correctFocus");
var firstFocus_1 = require("./utils/firstFocus");
var is_1 = require("./utils/is");
exports.NEW_FOCUS = 'NEW_FOCUS';
exports.newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
    var cnt = innerNodes.length;
    var firstFocus = innerNodes[0];
    var lastFocus = innerNodes[cnt - 1];
    var isOnGuard = is_1.isGuard(activeElement);
    if (innerNodes.indexOf(activeElement) >= 0) return undefined;
    var activeIndex = outerNodes.indexOf(activeElement);
    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
    var indexDiff = activeIndex - lastIndex;
    var firstNodeIndex = outerNodes.indexOf(firstFocus);
    var lastNodeIndex = outerNodes.indexOf(lastFocus);
    var correctedNodes = correctFocus_1.correctNodes(outerNodes);
    var correctedIndexDiff = correctedNodes.indexOf(activeElement) - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
    var returnFirstNode = firstFocus_1.pickFocusable(innerNodes, 0);
    var returnLastNode = firstFocus_1.pickFocusable(innerNodes, cnt - 1);
    if (activeIndex === -1 || lastNodeInside === -1) return exports.NEW_FOCUS;
    if (!indexDiff && lastNodeInside >= 0) return lastNodeInside;
    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) return returnLastNode;
    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) return returnFirstNode;
    if (indexDiff && Math.abs(correctedIndexDiff) > 1) return lastNodeInside;
    if (activeIndex <= firstNodeIndex) return returnLastNode;
    if (activeIndex > lastNodeIndex) return returnFirstNode;
    if (indexDiff) {
        if (Math.abs(indexDiff) > 1) return lastNodeInside;
        return (cnt + lastNodeInside + indexDiff) % cnt;
    }
    return undefined;
};

},{"./utils/correctFocus":"6yC1b","./utils/firstFocus":"21Gjw","./utils/is":"6dxlv"}],"6yC1b":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isRadio = function(node) {
    return node.tagName === 'INPUT' && node.type === 'radio';
};
var findSelectedRadio = function(node, nodes) {
    return nodes.filter(isRadio).filter(function(el) {
        return el.name === node.name;
    }).filter(function(el) {
        return el.checked;
    })[0] || node;
};
exports.correctNode = function(node, nodes) {
    if (isRadio(node) && node.name) return findSelectedRadio(node, nodes);
    return node;
};
exports.correctNodes = function(nodes) {
    var resultSet = new Set();
    nodes.forEach(function(node) {
        return resultSet.add(exports.correctNode(node, nodes));
    });
    return nodes.filter(function(node) {
        return resultSet.has(node);
    });
};

},{}],"21Gjw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var correctFocus_1 = require("./correctFocus");
exports.pickFirstFocus = function(nodes) {
    if (nodes[0] && nodes.length > 1) return correctFocus_1.correctNode(nodes[0], nodes);
    return nodes[0];
};
exports.pickFocusable = function(nodes, index) {
    if (nodes.length > 1) return nodes.indexOf(correctFocus_1.correctNode(nodes[index], nodes));
    return index;
};

},{"./correctFocus":"6yC1b"}],"2sZRW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var focusMerge_1 = require("./focusMerge");
exports.focusOn = function(target) {
    target.focus();
    if ('contentWindow' in target && target.contentWindow) target.contentWindow.focus();
};
var guardCount = 0;
var lockDisabled = false;
exports.setFocus = function(topNode, lastNode) {
    var focusable = focusMerge_1.getFocusMerge(topNode, lastNode);
    if (lockDisabled) return;
    if (focusable) {
        if (guardCount > 2) {
            console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
            lockDisabled = true;
            setTimeout(function() {
                lockDisabled = false;
            }, 1);
            return;
        }
        guardCount++;
        exports.focusOn(focusable.node);
        guardCount--;
    }
};

},{"./focusMerge":"3Lz8p"}],"3msyv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var DOMutils_1 = require("./utils/DOMutils");
var getRelativeFocusable = function(element, scope) {
    if (!element || !scope || !scope.contains(element)) return {
    };
    var focusables = DOMutils_1.getTabbableNodes([
        scope
    ]);
    var current = focusables.findIndex(function(_a) {
        var node = _a.node;
        return node === element;
    });
    if (current === -1) return {
    };
    return {
        prev: focusables[current - 1],
        next: focusables[current + 1],
        first: focusables[0],
        last: focusables[focusables.length - 1]
    };
};
var defaultOptions = function(options) {
    return Object.assign({
        scope: document.body,
        cycle: true
    }, options);
};
exports.focusNextElement = function(baseElement, options) {
    if (options === void 0) options = {
    };
    var _a = defaultOptions(options), scope = _a.scope, cycle = _a.cycle;
    var _b = getRelativeFocusable(baseElement, scope), next = _b.next, first = _b.first;
    var newTarget = next || cycle && first;
    if (newTarget) newTarget.node.focus();
};
exports.focusPrevElement = function(baseElement, options) {
    if (options === void 0) options = {
    };
    var _a = defaultOptions(options), scope = _a.scope, cycle = _a.cycle;
    var _b = getRelativeFocusable(baseElement, scope), prev = _b.prev, last = _b.last;
    var newTarget = prev || cycle && last;
    if (newTarget) newTarget.node.focus();
};

},{"./utils/DOMutils":"3fhQH"}],"7nKKk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    attach: function() {
    },
    detach: function() {
    }
};

},{}],"4rHRP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deferAction = deferAction;
exports.inlineProp = void 0;
function deferAction(action) {
    // Hidding setImmediate from Webpack to avoid inserting polyfill
    var _window = window, setImmediate = _window.setImmediate;
    if (typeof setImmediate !== 'undefined') setImmediate(action);
    else setTimeout(action, 1);
}
var inlineProp = function inlineProp1(name, value) {
    var obj = {
    };
    obj[name] = value;
    return obj;
};
exports.inlineProp = inlineProp;

},{}],"63EeL":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FocusLockUI", {
    enumerable: true,
    get: function get() {
        return _Lock["default"];
    }
});
Object.defineProperty(exports, "AutoFocusInside", {
    enumerable: true,
    get: function get() {
        return _AutoFocusInside["default"];
    }
});
Object.defineProperty(exports, "MoveFocusInside", {
    enumerable: true,
    get: function get() {
        return _MoveFocusInside["default"];
    }
});
Object.defineProperty(exports, "useFocusInside", {
    enumerable: true,
    get: function get() {
        return _MoveFocusInside.useFocusInside;
    }
});
Object.defineProperty(exports, "FreeFocusInside", {
    enumerable: true,
    get: function get() {
        return _FreeFocusInside["default"];
    }
});
Object.defineProperty(exports, "InFocusGuard", {
    enumerable: true,
    get: function get() {
        return _FocusGuard["default"];
    }
});
exports["default"] = void 0;
var _Lock = _interopRequireDefault(require("./Lock"));
var _AutoFocusInside = _interopRequireDefault(require("./AutoFocusInside"));
var _MoveFocusInside = _interopRequireWildcard(require("./MoveFocusInside"));
var _FreeFocusInside = _interopRequireDefault(require("./FreeFocusInside"));
var _FocusGuard = _interopRequireDefault(require("./FocusGuard"));
var _default = _Lock["default"];
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","./Lock":"Q3xMr","./AutoFocusInside":"1pasf","./MoveFocusInside":"5akQ9","./FreeFocusInside":"5FLXi","./FocusGuard":"5JYPD"}],"1pasf":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var constants = _interopRequireWildcard(require("focus-lock/constants"));
var _util = require("./util");
var AutoFocusInside = function AutoFocusInside1(_ref) {
    var disabled = _ref.disabled, children = _ref.children, className = _ref.className;
    return(/*#__PURE__*/ React.createElement("div", _extends2["default"]({
    }, _util.inlineProp(constants.FOCUS_AUTO, !disabled), {
        className: className
    }), children));
};
AutoFocusInside.propTypes = {
    children: _propTypes["default"].node.isRequired,
    disabled: _propTypes["default"].bool,
    className: _propTypes["default"].string
};
AutoFocusInside.defaultProps = {
    disabled: false,
    className: undefined
};
var _default = AutoFocusInside;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","prop-types":"4dfy5","focus-lock/constants":"3dDUo","./util":"4rHRP"}],"5akQ9":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = exports.useFocusInside = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var constants = _interopRequireWildcard(require("focus-lock/constants"));
var _util = require("./util");
var _medium = require("./medium");
var useFocusInside = function useFocusInside1(observedRef) {
    React.useEffect(function() {
        var enabled = true;
        _medium.mediumEffect.useMedium(function(car) {
            var observed = observedRef && observedRef.current;
            if (enabled && observed) {
                if (!car.focusInside(observed)) car.moveFocusInside(observed, null);
            }
        });
        return function() {
            enabled = false;
        };
    }, [
        observedRef
    ]);
};
exports.useFocusInside = useFocusInside;
function MoveFocusInside(_ref) {
    var isDisabled = _ref.disabled, className = _ref.className, children = _ref.children;
    var ref = React.useRef(null);
    useFocusInside(isDisabled ? undefined : ref);
    return(/*#__PURE__*/ React.createElement("div", _extends2["default"]({
    }, _util.inlineProp(constants.FOCUS_AUTO, !isDisabled), {
        ref: ref,
        className: className
    }), children));
}
MoveFocusInside.propTypes = {
    children: _propTypes["default"].node.isRequired,
    disabled: _propTypes["default"].bool,
    className: _propTypes["default"].string
};
MoveFocusInside.defaultProps = {
    disabled: false,
    className: undefined
};
var _default = MoveFocusInside;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","prop-types":"4dfy5","focus-lock/constants":"3dDUo","./util":"4rHRP","./medium":"5nVJa"}],"5FLXi":[function(require,module,exports) {
"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var constants = _interopRequireWildcard(require("focus-lock/constants"));
var _util = require("./util");
var FreeFocusInside = function FreeFocusInside1(_ref) {
    var children = _ref.children, className = _ref.className;
    return(/*#__PURE__*/ React.createElement("div", _extends2["default"]({
    }, _util.inlineProp(constants.FOCUS_ALLOW, true), {
        className: className
    }), children));
};
FreeFocusInside.propTypes = {
    children: _propTypes["default"].node.isRequired,
    className: _propTypes["default"].string
};
FreeFocusInside.defaultProps = {
    className: undefined
};
var _default = FreeFocusInside;
exports["default"] = _default;

},{"@babel/runtime/helpers/interopRequireWildcard":"28En5","@babel/runtime/helpers/interopRequireDefault":"4ttVj","@babel/runtime/helpers/extends":"3krLJ","react":"3f97z","prop-types":"4dfy5","focus-lock/constants":"3dDUo","./util":"4rHRP"}],"38TmN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var Combination_1 = require("./Combination");
exports.RemoveScroll = Combination_1.default;

},{"./Combination":"6xJxK"}],"6xJxK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var UI_1 = require("./UI");
var sidecar_1 = require("./sidecar");
var ReactRemoveScroll = React.forwardRef(function(props, ref) {
    return React.createElement(UI_1.RemoveScroll, tslib_1.__assign({
    }, props, {
        ref: ref,
        sideCar: sidecar_1.default
    }));
});
ReactRemoveScroll.classNames = UI_1.RemoveScroll.classNames;
exports.default = ReactRemoveScroll;

},{"tslib":"7AArP","react":"3f97z","./UI":"57PcP","./sidecar":"4Plco"}],"7AArP":[function(require,module,exports) {
var global = arguments[3];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global global, define, System, Reflect, Promise */ var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {
    };
    if (typeof define === "function" && define.amd) define("tslib", [
        "exports"
    ], function(exports) {
        factory(createExporter(root, createExporter(exports)));
    });
    else if (typeof module === "object" && typeof module.exports === "object") factory(createExporter(root, createExporter(module.exports)));
    else factory(createExporter(root));
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") Object.defineProperty(exports, "__esModule", {
                value: true
            });
            else exports.__esModule = true;
        }
        return function(id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function(exporter) {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    __rest = function(s, e) {
        var t = {
        };
        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        return t;
    };
    __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
        return function(target, key) {
            decorator(target, key, paramIndex);
        };
    };
    __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
                resolve(value);
            });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    __generator = function(thisArg, body) {
        var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
        function verb(n) {
            return function(v) {
                return step([
                    n,
                    v
                ]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while(_)try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [
                    op[0] & 2,
                    t.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally{
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
        }), g;
    };
    __createBinding = function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    };
    __exportStar = function(m, exports) {
        for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    };
    __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function() {
                if (o && i >= o.length) o = void 0;
                return {
                    value: o && o[i++],
                    done: !o
                };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
        } catch (error) {
            e = {
                error: error
            };
        } finally{
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally{
                if (e) throw e.error;
            }
        }
        return ar;
    };
    __spread = function() {
        for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    __spreadArrays = function() {
        for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
        for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
        return r;
    };
    __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        function verb(n) {
            if (g[n]) i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
        return i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i;
    };
    __asyncDelegator = function(o) {
        var i, p;
        function verb(n, f) {
            i[n] = o[n] ? function(v) {
                return (p = !p) ? {
                    value: __await(o[n](v)),
                    done: n === "return"
                } : f ? f(v) : v;
            } : f;
        }
        return i = {
        }, verb("next"), verb("throw", function(e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
            return this;
        }, i;
    };
    __asyncValues = function(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        function verb(n) {
            i[n] = o[n] && function(v) {
                return new Promise(function(resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v1) {
                resolve({
                    value: v1,
                    done: d
                });
            }, reject);
        }
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
        }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
        }, i);
    };
    __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
            value: raw
        });
        else cooked.raw = raw;
        return cooked;
    };
    __importStar = function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {
            "default": mod
        };
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
        return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
        privateMap.set(receiver, value);
        return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"57PcP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var constants_1 = require("react-remove-scroll-bar/constants");
var medium_1 = require("./medium");
var use_callback_ref_1 = require("use-callback-ref");
var nothing = function() {
    return;
};
/**
 * Removes scrollbar from the page and contain the scroll within the Lock
 */ var RemoveScroll = React.forwardRef(function(props, parentRef) {
    var ref = React.useRef(null);
    var _a = React.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? 'div' : _b, rest = tslib_1.__rest(props, [
        "forwardProps",
        "children",
        "className",
        "removeScrollBar",
        "enabled",
        "shards",
        "sideCar",
        "noIsolation",
        "inert",
        "allowPinchZoom",
        "as"
    ]);
    var SideCar = sideCar;
    var containerRef = use_callback_ref_1.useMergeRefs([
        ref,
        parentRef
    ]);
    var containerProps = tslib_1.__assign({
    }, rest, callbacks);
    return React.createElement(React.Fragment, null, enabled && React.createElement(SideCar, {
        sideCar: medium_1.effectCar,
        removeScrollBar: removeScrollBar,
        shards: shards,
        noIsolation: noIsolation,
        inert: inert,
        setCallbacks: setCallbacks,
        allowPinchZoom: !!allowPinchZoom,
        lockRef: ref
    }), forwardProps ? React.cloneElement(React.Children.only(children), tslib_1.__assign({
    }, containerProps, {
        ref: containerRef
    })) : React.createElement(Container, tslib_1.__assign({
    }, containerProps, {
        className: className,
        ref: containerRef
    }), children));
});
exports.RemoveScroll = RemoveScroll;
RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
};
RemoveScroll.classNames = {
    fullWidth: constants_1.fullWidthClassName,
    zeroRight: constants_1.zeroRightClassName
};

},{"tslib":"7AArP","react":"3f97z","react-remove-scroll-bar/constants":"6WLo4","./medium":"5uQLx","use-callback-ref":"44VWN"}],"6WLo4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.zeroRightClassName = 'right-scroll-bar-position';
exports.fullWidthClassName = 'width-before-scroll-bar';
exports.noScrollbarsClassName = 'with-scroll-bars-hidden';
exports.removedBarSizeVariable = '--removed-body-scroll-bar-size';

},{}],"5uQLx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var use_sidecar_1 = require("use-sidecar");
exports.effectCar = use_sidecar_1.createSidecarMedium();

},{"use-sidecar":"6Z56g"}],"4Plco":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var use_sidecar_1 = require("use-sidecar");
var SideEffect_1 = require("./SideEffect");
var medium_1 = require("./medium");
exports.default = use_sidecar_1.exportSidecar(medium_1.effectCar, SideEffect_1.RemoveScrollSideCar);

},{"use-sidecar":"6Z56g","./SideEffect":"1qvG8","./medium":"5uQLx"}],"1qvG8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var React = require("react");
var react_remove_scroll_bar_1 = require("react-remove-scroll-bar");
var react_style_singleton_1 = require("react-style-singleton");
var handleScroll_1 = require("./handleScroll");
var aggresiveCapture_1 = require("./aggresiveCapture");
exports.getTouchXY = function(event) {
    return 'changedTouches' in event ? [
        event.changedTouches[0].clientX,
        event.changedTouches[0].clientY
    ] : [
        0,
        0
    ];
};
exports.getDeltaXY = function(event) {
    return [
        event.deltaX,
        event.deltaY
    ];
};
var extractRef = function(ref) {
    return ref && 'current' in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
    return "\n  .block-interactivity-" + id + " {pointer-events: none;}\n  .allow-interactivity-" + id + " {pointer-events: all;}\n";
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React.useRef([]);
    var touchStartRef = React.useRef([
        0,
        0
    ]);
    var activeAxis = React.useRef();
    var id = React.useState(idCounter++)[0];
    var Style = React.useState(function() {
        return react_style_singleton_1.styleSingleton();
    })[0];
    var lastProps = React.useRef(props);
    React.useEffect(function() {
        lastProps.current = props;
    }, [
        props
    ]);
    React.useEffect(function() {
        if (props.inert) {
            document.body.classList.add("block-interactivity-" + id);
            var allow_1 = [
                props.lockRef.current
            ].concat((props.shards || []).map(extractRef)).filter(Boolean);
            allow_1.forEach(function(el) {
                return el.classList.add("allow-interactivity-" + id);
            });
            return function() {
                document.body.classList.remove("block-interactivity-" + id);
                allow_1.forEach(function(el) {
                    return el.classList.remove("allow-interactivity-" + id);
                });
            };
        }
        return;
    }, [
        props.inert,
        props.lockRef.current,
        props.shards
    ]);
    var shouldCancelEvent = React.useCallback(function(event, parent) {
        if ('touches' in event && event.touches.length === 2) return !lastProps.current.allowPinchZoom;
        var touch = exports.getTouchXY(event);
        var touchStart = touchStartRef.current;
        var deltaX = 'deltaX' in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = 'deltaY' in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'h' : 'v';
        var canBeScrolledInMainDirection = handleScroll_1.locationCouldBeScrolled(moveDirection, target);
        if (!canBeScrolledInMainDirection) return true;
        if (canBeScrolledInMainDirection) currentAxis = moveDirection;
        else {
            currentAxis = moveDirection === 'v' ? 'h' : 'v';
            canBeScrolledInMainDirection = handleScroll_1.locationCouldBeScrolled(moveDirection, target);
        // other axis might be not scrollable
        }
        if (!canBeScrolledInMainDirection) return false;
        if (!activeAxis.current && 'changedTouches' in event && (deltaX || deltaY)) activeAxis.current = currentAxis;
        if (!currentAxis) return true;
        var cancelingAxis = activeAxis.current || currentAxis;
        return handleScroll_1.handleScroll(cancelingAxis, parent, event, cancelingAxis === 'h' ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React.useCallback(function(_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) // not the last active
        return;
        var delta = 'deltaY' in event ? exports.getDeltaXY(event) : exports.getTouchXY(event);
        var sourceEvent = shouldPreventQueue.current.filter(function(e) {
            return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
        })[0];
        // self event, and should be canceled
        if (sourceEvent && sourceEvent.should) {
            event.preventDefault();
            return;
        }
        // outside or shard event
        if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
                return node.contains(event.target);
            });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) event.preventDefault();
        }
    }, []);
    var shouldCancel = React.useCallback(function(name, delta, target, should) {
        var event = {
            name: name,
            delta: delta,
            target: target,
            should: should
        };
        shouldPreventQueue.current.push(event);
        setTimeout(function() {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
                return e !== event;
            });
        }, 1);
    }, []);
    var scrollTouchStart = React.useCallback(function(event) {
        touchStartRef.current = exports.getTouchXY(event);
        activeAxis.current = undefined;
    }, []);
    var scrollWheel = React.useCallback(function(event) {
        shouldCancel(event.type, exports.getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React.useCallback(function(event) {
        shouldCancel(event.type, exports.getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React.useEffect(function() {
        lockStack.push(Style);
        props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove
        });
        document.addEventListener('wheel', shouldPrevent, aggresiveCapture_1.nonPassive);
        document.addEventListener('touchmove', shouldPrevent, aggresiveCapture_1.nonPassive);
        document.addEventListener('touchstart', scrollTouchStart, aggresiveCapture_1.nonPassive);
        return function() {
            lockStack = lockStack.filter(function(inst) {
                return inst !== Style;
            });
            document.removeEventListener('wheel', shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener('touchmove', shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener('touchstart', scrollTouchStart, aggresiveCapture_1.nonPassive);
        };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React.createElement(React.Fragment, null, inert ? React.createElement(Style, {
        styles: generateStyle(id)
    }) : null, removeScrollBar ? React.createElement(react_remove_scroll_bar_1.RemoveScrollBar, {
        gapMode: "margin"
    }) : null);
}
exports.RemoveScrollSideCar = RemoveScrollSideCar;

},{"react":"3f97z","react-remove-scroll-bar":"6nGlI","react-style-singleton":"qZDNr","./handleScroll":"6nADd","./aggresiveCapture":"31ixZ"}],"6nGlI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var component_1 = require("./component");
exports.RemoveScrollBar = component_1.RemoveScrollBar;
var utils_1 = require("./utils");
exports.getGapWidth = utils_1.getGapWidth;
var constants_1 = require("./constants");
exports.zeroRightClassName = constants_1.zeroRightClassName;
exports.fullWidthClassName = constants_1.fullWidthClassName;
exports.noScrollbarsClassName = constants_1.noScrollbarsClassName;
exports.removedBarSizeVariable = constants_1.removedBarSizeVariable;

},{"./component":"6pa1w","./utils":"6LYIn","./constants":"6WLo4"}],"6pa1w":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var React = require("react");
var react_style_singleton_1 = require("react-style-singleton");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var Style = react_style_singleton_1.styleSingleton();
var getStyles = function(_a, allowRelative, gapMode, important) {
    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
    if (gapMode === void 0) gapMode = 'margin';
    return "\n  ." + constants_1.noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
        allowRelative && "position: relative " + important + ";",
        gapMode === 'margin' && "\n    padding-left: " + left + "px;\n    padding-top: " + top + "px;\n    padding-right: " + right + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
        gapMode === 'padding' && "padding-right: " + gap + "px " + important + ";", 
    ].filter(Boolean).join('') + "\n  }\n  \n  ." + constants_1.zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + constants_1.fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + constants_1.zeroRightClassName + " ." + constants_1.zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + constants_1.fullWidthClassName + " ." + constants_1.fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + constants_1.removedBarSizeVariable + ": " + gap + "px;\n  }\n";
};
exports.RemoveScrollBar = function(props) {
    var _a = React.useState(utils_1.getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];
    React.useEffect(function() {
        setGap(utils_1.getGapWidth(props.gapMode));
    }, [
        props.gapMode
    ]);
    var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? 'margin' : _b;
    return React.createElement(Style, {
        styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : '')
    });
};

},{"react":"3f97z","react-style-singleton":"qZDNr","./utils":"6LYIn","./constants":"6WLo4"}],"qZDNr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var component_1 = require("./component");
exports.styleSingleton = component_1.styleSingleton;
var singleton_1 = require("./singleton");
exports.stylesheetSingleton = singleton_1.stylesheetSingleton;
var hook_1 = require("./hook");
exports.styleHookSingleton = hook_1.styleHookSingleton;

},{"./component":"6qb6I","./singleton":"3Iq3V","./hook":"3kD8x"}],"6qb6I":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hook_1 = require("./hook");
exports.styleSingleton = function() {
    var useStyle = hook_1.styleHookSingleton();
    var Sheet = function(_a) {
        var styles = _a.styles;
        useStyle(styles);
        return null;
    };
    return Sheet;
};

},{"./hook":"3kD8x"}],"3kD8x":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var React = require("react");
var singleton_1 = require("./singleton");
exports.styleHookSingleton = function() {
    var sheet = singleton_1.stylesheetSingleton();
    return function(styles) {
        React.useEffect(function() {
            sheet.add(styles);
            return function() {
                sheet.remove();
            };
        }, []);
    };
};

},{"react":"3f97z","./singleton":"3Iq3V"}],"3Iq3V":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var get_nonce_1 = require("get-nonce");
function makeStyleTag() {
    if (!document) return null;
    var tag = document.createElement('style');
    tag.type = 'text/css';
    var nonce = get_nonce_1.getNonce();
    if (nonce) tag.setAttribute('nonce', nonce);
    return tag;
}
function injectStyles(tag, css) {
    if (tag.styleSheet) tag.styleSheet.cssText = css;
    else tag.appendChild(document.createTextNode(css));
}
function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName('head')[0];
    head.appendChild(tag);
}
exports.stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
        add: function(style) {
            if (counter == 0) {
                if (stylesheet = makeStyleTag()) {
                    injectStyles(stylesheet, style);
                    insertStyleTag(stylesheet);
                }
            }
            counter++;
        },
        remove: function() {
            counter--;
            if (!counter && stylesheet) {
                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
                stylesheet = null;
            }
        }
    };
};

},{"get-nonce":"6twsF"}],"6twsF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var currentNonce;
exports.setNonce = function(nonce) {
    currentNonce = nonce;
};
exports.getNonce = function() {
    if (currentNonce) return currentNonce;
    if (typeof __webpack_nonce__ !== 'undefined') return __webpack_nonce__;
    return undefined;
};

},{}],"6LYIn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
};
var parse = function(x) {
    return parseInt(x || '', 10) || 0;
};
var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === 'padding' ? 'paddingLeft' : 'marginLeft'];
    var top = cs[gapMode === 'padding' ? 'paddingTop' : 'marginTop'];
    var right = cs[gapMode === 'padding' ? 'paddingRight' : 'marginRight'];
    return [
        parse(left),
        parse(top),
        parse(right), 
    ];
};
exports.getGapWidth = function(gapMode) {
    if (gapMode === void 0) gapMode = 'margin';
    if (typeof window === 'undefined') return exports.zeroGap;
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
};

},{}],"6nADd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var elementCouldBeVScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    return styles.overflowY !== 'hidden' && !(styles.overflowY === styles.overflowX && styles.overflowY === 'visible');
};
var elementCouldBeHScrolled = function(node) {
    var styles = window.getComputedStyle(node);
    return styles.overflowX !== 'hidden' && !(styles.overflowY === styles.overflowX && styles.overflowX === 'visible');
};
exports.locationCouldBeScrolled = function(axis, node) {
    var current = node;
    do {
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
            if (s > d) return true;
        }
        current = current.parentNode;
    }while (current && current !== document.body)
    return false;
};
var getVScrollVariables = function(_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [
        scrollTop,
        scrollHeight,
        clientHeight
    ];
};
var getHScrollVariables = function(_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [
        scrollLeft,
        scrollWidth,
        clientWidth
    ];
};
var elementCouldBeScrolled = function(axis, node) {
    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);
};
exports.handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var delta = sourceDelta;
    // find scrollable target
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
        var elementScroll = scroll_1 - capacity - position;
        if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
                availableScroll += elementScroll;
                availableScrollTop += position;
            }
        }
        target = target.parentNode;
    }while (// portaled content
    !targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target))
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) shouldCancelScroll = true;
    else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) shouldCancelScroll = true;
    return shouldCancelScroll;
};

},{}],"31ixZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var passiveSupported = false;
if (typeof window !== 'undefined') try {
    var options = Object.defineProperty({
    }, 'passive', {
        get: function() {
            passiveSupported = true;
            return true;
        }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
} catch (err) {
    passiveSupported = false;
}
exports.nonPassive = passiveSupported ? {
    passive: false
} : false;

},{}],"3UymG":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ModalTransition = void 0;
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var transitions = {
    slideInBottom: _extends({
    }, _transition.slideFadeConfig, {
        custom: {
            offsetY: 16,
            reverse: true
        }
    }),
    slideInRight: _extends({
    }, _transition.slideFadeConfig, {
        custom: {
            offsetX: 16,
            reverse: true
        }
    }),
    scale: _extends({
    }, _transition.scaleFadeConfig, {
        custom: {
            initialScale: 0.95,
            reverse: true
        }
    }),
    none: {
    }
};
var Motion = _system.chakra(_framerMotion.motion.section);
var ModalTransition = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    var preset = props.preset, rest = _objectWithoutPropertiesLoose(props, [
        "preset"
    ]);
    var motionProps = transitions[preset];
    return(/*#__PURE__*/ React.createElement(Motion, _extends({
        ref: ref
    }, motionProps, rest)));
});
exports.ModalTransition = ModalTransition;

},{"@chakra-ui/system":"4QBuE","@chakra-ui/transition":"63bwb","framer-motion":"5ufJB","react":"3f97z"}],"6HiMl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useModal = useModal;
exports.useAriaHidden = useAriaHidden;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var _ariaHidden = require("aria-hidden");
var _react = require("react");
var _modalManager = require("./modal-manager");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * Modal hook that manages all the logic for the modal dialog widget
 * and returns prop getters, state and actions.
 *
 * @param props
 */ function useModal(props) {
    var isOpen = props.isOpen, onClose = props.onClose, id = props.id, _props$closeOnOverlay = props.closeOnOverlayClick, closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay, _props$closeOnEsc = props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, _props$useInert = props.useInert, useInert = _props$useInert === void 0 ? true : _props$useInert, onOverlayClickProp = props.onOverlayClick, onEsc = props.onEsc;
    var dialogRef = _react.useRef(null);
    var overlayRef = _react.useRef(null);
    var _useIds = _hooks.useIds(id, "chakra-modal", "chakra-modal--header", "chakra-modal--body"), dialogId = _useIds[0], headerId = _useIds[1], bodyId = _useIds[2];
    /**
   * Hook used to polyfill `aria-modal` for older browsers.
   * It uses `aria-hidden` to all other nodes.
   *
   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/
   */ useAriaHidden(dialogRef, isOpen && useInert);
    /**
   * Hook use to manage multiple or nested modals
   */ _modalManager.useModalManager(dialogRef, isOpen);
    var mouseDownTarget = _react.useRef(null);
    var onMouseDown = _react.useCallback(function(event) {
        mouseDownTarget.current = event.target;
    }, []);
    var onKeyDown = _react.useCallback(function(event) {
        if (event.key === "Escape") {
            event.stopPropagation();
            if (closeOnEsc) onClose == null || onClose();
            onEsc == null || onEsc();
        }
    }, [
        closeOnEsc,
        onClose,
        onEsc
    ]);
    var _useState = _react.useState(false), headerMounted = _useState[0], setHeaderMounted = _useState[1];
    var _useState2 = _react.useState(false), bodyMounted = _useState2[0], setBodyMounted = _useState2[1];
    var getDialogProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
            role: "dialog"
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, dialogRef),
            id: dialogId,
            tabIndex: -1,
            "aria-modal": true,
            "aria-labelledby": headerMounted ? headerId : undefined,
            "aria-describedby": bodyMounted ? bodyId : undefined,
            onClick: _utils.callAllHandlers(props1.onClick, function(event) {
                return event.stopPropagation();
            })
        });
    }, [
        bodyId,
        bodyMounted,
        dialogId,
        headerId,
        headerMounted
    ]);
    var onOverlayClick = _react.useCallback(function(event) {
        event.stopPropagation();
        /**
     * Make sure the event starts and ends on the same DOM element.
     *
     * This is used to prevent the modal from closing when you
     * start dragging from the content, and release drag outside the content.
     *
     * We prevent this because it is technically not a considered "click outside"
     */ if (mouseDownTarget.current !== event.target) return;
        /**
     * When you click on the overlay, we want to remove only the topmost modal
     */ if (!_modalManager.manager.isTopModal(dialogRef)) return;
        if (closeOnOverlayClick) onClose == null || onClose();
        onOverlayClickProp == null || onOverlayClickProp();
    }, [
        onClose,
        closeOnOverlayClick,
        onOverlayClickProp
    ]);
    var getDialogContainerProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, overlayRef),
            onClick: _utils.callAllHandlers(props1.onClick, onOverlayClick),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, onMouseDown)
        });
    }, [
        onKeyDown,
        onMouseDown,
        onOverlayClick
    ]);
    return {
        isOpen: isOpen,
        onClose: onClose,
        headerId: headerId,
        bodyId: bodyId,
        setBodyMounted: setBodyMounted,
        setHeaderMounted: setHeaderMounted,
        dialogRef: dialogRef,
        overlayRef: overlayRef,
        getDialogProps: getDialogProps,
        getDialogContainerProps: getDialogContainerProps
    };
}
/**
 * Modal hook to polyfill `aria-modal`.
 *
 * It applies `aria-hidden` to elements behind the modal
 * to indicate that they're `inert`.
 *
 * @param ref React ref of the node
 * @param shouldHide whether `aria-hidden` should be applied
 */ function useAriaHidden(ref, shouldHide) {
    _react.useEffect(function() {
        if (!ref.current) return undefined;
        var undo = null;
        if (shouldHide && ref.current) undo = _ariaHidden.hideOthers(ref.current);
        return function() {
            if (shouldHide) undo == null || undo();
        };
    }, [
        shouldHide,
        ref
    ]);
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","aria-hidden":"AMIwN","react":"3f97z","./modal-manager":"7eDmu"}],"AMIwN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var getDefaultParent = function(originalTarget) {
    if (typeof document === 'undefined') return null;
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {
};
var lockCount = 0;
exports.hideOthers = function(originalTarget, parentNode, markerName) {
    if (parentNode === void 0) parentNode = getDefaultParent(originalTarget);
    if (markerName === void 0) markerName = "data-aria-hidden";
    var targets = Array.isArray(originalTarget) ? originalTarget : [
        originalTarget
    ];
    if (!markerMap[markerName]) markerMap[markerName] = new WeakMap();
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = new Set();
    var keep = function(el) {
        if (!el || elementsToKeep.has(el)) return;
        elementsToKeep.add(el);
        keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
        if (!parent || targets.indexOf(parent) >= 0) return;
        Array.prototype.forEach.call(parent.children, function(node) {
            if (elementsToKeep.has(node)) deep(node);
            else {
                var attr = node.getAttribute('aria-hidden');
                var alreadyHidden = attr !== null && attr !== 'false';
                var counterValue = (counterMap.get(node) || 0) + 1;
                var markerValue = (markerCounter.get(node) || 0) + 1;
                counterMap.set(node, counterValue);
                markerCounter.set(node, markerValue);
                hiddenNodes.push(node);
                if (counterValue === 1 && alreadyHidden) uncontrolledNodes.set(node, true);
                if (markerValue === 1) node.setAttribute(markerName, 'true');
                if (!alreadyHidden) node.setAttribute('aria-hidden', 'true');
            }
        });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
        hiddenNodes.forEach(function(node) {
            var counterValue = counterMap.get(node) - 1;
            var markerValue = markerCounter.get(node) - 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            if (!counterValue) {
                if (!uncontrolledNodes.has(node)) node.removeAttribute('aria-hidden');
                uncontrolledNodes.delete(node);
            }
            if (!markerValue) node.removeAttribute(markerName);
        });
        lockCount--;
        if (!lockCount) {
            counterMap = new WeakMap();
            counterMap = new WeakMap();
            uncontrolledNodes = new WeakMap();
            markerMap = {
            };
        }
    };
};

},{}],"7eDmu":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useModalManager = useModalManager;
exports.manager = void 0;
var _react = require("react");
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
/**
 * Proper state management for nested modals.
 * Simplified, but inspired by material-ui's ModalManager class.
 */ var ModalManager = /*#__PURE__*/ function() {
    function ModalManager1() {
        _defineProperty(this, "modals", void 0);
        this.modals = [];
    }
    var _proto = ModalManager1.prototype;
    _proto.add = function add(modal) {
        this.modals.push(modal);
    };
    _proto.remove = function remove(modal) {
        this.modals = this.modals.filter(function(_modal) {
            return _modal !== modal;
        });
    };
    _proto.isTopModal = function isTopModal(modal) {
        var topmostModal = this.modals[this.modals.length - 1];
        return topmostModal === modal;
    };
    return ModalManager1;
}();
var manager = new ModalManager();
exports.manager = manager;
function useModalManager(ref, isOpen) {
    _react.useEffect(function() {
        if (isOpen) manager.add(ref);
        return function() {
            manager.remove(ref);
        };
    }, [
        isOpen,
        ref
    ]);
}

},{"react":"3f97z"}],"3MiTT":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.AlertDialog = AlertDialog;
exports.AlertDialogOverlay = exports.AlertDialogHeader = exports.AlertDialogFooter = exports.AlertDialogCloseButton = exports.AlertDialogBody = exports.AlertDialogContent = void 0;
var _system = require("@chakra-ui/system");
var React = _interopRequireWildcard(require("react"));
var _modal = require("./modal");
exports.AlertDialogBody = _modal.ModalBody;
exports.AlertDialogCloseButton = _modal.ModalCloseButton;
exports.AlertDialogFooter = _modal.ModalFooter;
exports.AlertDialogHeader = _modal.ModalHeader;
exports.AlertDialogOverlay = _modal.ModalOverlay;
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function AlertDialog(props) {
    var leastDestructiveRef = props.leastDestructiveRef, rest = _objectWithoutPropertiesLoose(props, [
        "leastDestructiveRef"
    ]);
    return(/*#__PURE__*/ React.createElement(_modal.Modal, _extends({
    }, rest, {
        initialFocusRef: leastDestructiveRef
    })));
}
var AlertDialogContent = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(_modal.ModalContent, _extends({
        ref: ref,
        role: "alertdialog"
    }, props)));
});
exports.AlertDialogContent = AlertDialogContent;

},{"@chakra-ui/system":"4QBuE","react":"3f97z","./modal":"1qi5Q"}],"6Ryhx":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Drawer = Drawer;
exports.DrawerOverlay = exports.DrawerHeader = exports.DrawerFooter = exports.DrawerCloseButton = exports.DrawerBody = exports.DrawerContent = void 0;
var _system = require("@chakra-ui/system");
var _transition = require("@chakra-ui/transition");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _modal = require("./modal");
exports.DrawerBody = _modal.ModalBody;
exports.DrawerCloseButton = _modal.ModalCloseButton;
exports.DrawerFooter = _modal.ModalFooter;
exports.DrawerHeader = _modal.ModalHeader;
exports.DrawerOverlay = _modal.ModalOverlay;
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext(), DrawerContextProvider = _createContext[0], useDrawerContext = _createContext[1];
function Drawer(props) {
    var _theme$components;
    var isOpen = props.isOpen, onClose = props.onClose, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "isOpen",
        "onClose",
        "placement",
        "children"
    ]);
    var theme = _system.useTheme();
    var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;
    return(/*#__PURE__*/ React.createElement(DrawerContextProvider, {
        value: {
            placement: placement
        }
    }, /*#__PURE__*/ React.createElement(_modal.Modal, _extends({
        isOpen: isOpen,
        onClose: onClose,
        styleConfig: drawerStyleConfig
    }, rest), children)));
}
var StyleSlide = _system.chakra(_transition.Slide);
/**
 * ModalContent is used to group modal's content. It has all the
 * necessary `aria-*` properties to indicate that it is a modal
 */ var DrawerContent = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "className",
        "children"
    ]);
    var _useModalContext = _modal.useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps, isOpen = _useModalContext.isOpen;
    var dialogProps = getDialogProps(rest, ref);
    var containerProps = getDialogContainerProps();
    var _className = _utils.cx("chakra-modal__content", className);
    var styles = _system.useStyles();
    var dialogStyles = _extends({
        display: "flex",
        flexDirection: "column",
        position: "relative",
        width: "100%",
        outline: 0
    }, styles.dialog);
    var dialogContainerStyles = _extends({
        display: "flex",
        width: "100vw",
        height: "100vh",
        position: "fixed",
        left: 0,
        top: 0
    }, styles.dialogContainer);
    var _useDrawerContext = useDrawerContext(), placement = _useDrawerContext.placement;
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, containerProps, {
        className: "chakra-modal__content-container",
        __css: dialogContainerStyles
    }), /*#__PURE__*/ React.createElement(_modal.ModalFocusScope, null, /*#__PURE__*/ React.createElement(StyleSlide, _extends({
        direction: placement,
        "in": isOpen,
        className: _className
    }, dialogProps, {
        __css: dialogStyles
    }), children))));
});
exports.DrawerContent = DrawerContent;
if (_utils.__DEV__) DrawerContent.displayName = "DrawerContent";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/transition":"63bwb","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./modal":"1qi5Q"}],"2hmfO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _numberInput = require("./number-input");
Object.keys(_numberInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _numberInput[key]) return;
    exports[key] = _numberInput[key];
});
var _useNumberInput = require("./use-number-input");
Object.keys(_useNumberInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useNumberInput[key]) return;
    exports[key] = _useNumberInput[key];
});

},{"./number-input":"6luiV","./use-number-input":"4BHDQ"}],"6luiV":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.NumberIncrementStepper = exports.NumberDecrementStepper = exports.StyledStepper = exports.NumberInputField = exports.NumberInputStepper = exports.NumberInput = void 0;
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _icons = require("./icons");
var _useNumberInput2 = require("./use-number-input");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React context used to communicate between components
 */ var _createContext = _reactUtils.createContext({
    name: "NumberInputContext",
    errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
}), NumberInputProvider = _createContext[0], useNumberInputContext = _createContext[1];
/**
 * NumberInput
 *
 * React component that provides context and logic to all
 * number input sub-components.
 *
 * It renders a `div` by default.
 *
 * @see Docs http://chakra-ui.com/numberinput
 */ var NumberInput = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("NumberInput", props);
    var ownProps = _system.omitThemingProps(props);
    var controlProps = _formControl.useFormControlProps(ownProps);
    var _useNumberInput = _useNumberInput2.useNumberInput(controlProps), htmlProps = _useNumberInput.htmlProps, context = _objectWithoutPropertiesLoose(_useNumberInput, [
        "htmlProps"
    ]);
    var ctx = React.useMemo(function() {
        return context;
    }, [
        context
    ]);
    return(/*#__PURE__*/ React.createElement(NumberInputProvider, {
        value: ctx
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, htmlProps, {
        ref: ref,
        className: _utils.cx("chakra-numberinput", props.className),
        __css: _extends({
            position: "relative",
            zIndex: 0
        }, styles.root)
    })))));
});
exports.NumberInput = NumberInput;
if (_utils.__DEV__) NumberInput.displayName = "NumberInput";
/**
 * NumberInputStepper
 *
 * React component used to group the increment and decrement
 * button spinners.
 *
 * It renders a `div` by default.
 *
 * @see Docs http://chakra-ui.com/components/number-input
 */ var NumberInputStepper = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        "aria-hidden": true,
        ref: ref
    }, props, {
        __css: _extends({
            display: "flex",
            flexDirection: "column",
            position: "absolute",
            top: "0",
            insetEnd: "0px",
            margin: "1px",
            height: "calc(100% - 2px)",
            zIndex: 1
        }, styles.stepperGroup)
    })));
});
exports.NumberInputStepper = NumberInputStepper;
if (_utils.__DEV__) NumberInputStepper.displayName = "NumberInputStepper";
/**
 * NumberInputField
 *
 * React component that represents the actual `input` field
 * where users can type to edit numeric values.
 *
 * It renders an `input` by default and ensures only numeric
 * values can be typed.
 *
 * @see Docs http://chakra-ui.com/numberinput
 */ var NumberInputField = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useNumberInputContex = useNumberInputContext(), getInputProps = _useNumberInputContex.getInputProps;
    var input = getInputProps(props, ref);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.input, _extends({
    }, input, {
        className: _utils.cx("chakra-numberinput__field", props.className),
        __css: _extends({
            width: "100%"
        }, styles.field)
    })));
});
exports.NumberInputField = NumberInputField;
if (_utils.__DEV__) NumberInputField.displayName = "NumberInputField";
var StyledStepper = _system.chakra("div", {
    baseStyle: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        flex: 1,
        transition: "all 0.3s",
        userSelect: "none",
        cursor: "pointer",
        lineHeight: "normal"
    }
});
exports.StyledStepper = StyledStepper;
/**
 * NumberDecrementStepper
 *
 * React component used to decrement the number input's value
 *
 * It renders a `div` with `role=button` by default
 */ var NumberDecrementStepper = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$children;
    var styles = _system.useStyles();
    var _useNumberInputContex2 = useNumberInputContext(), getDecrementButtonProps = _useNumberInputContex2.getDecrementButtonProps;
    var decrement = getDecrementButtonProps(props, ref);
    return(/*#__PURE__*/ React.createElement(StyledStepper, _extends({
    }, decrement, {
        __css: styles.stepper
    }), (_props$children = props.children) != null ? _props$children : /*#__PURE__*/ React.createElement(_icons.TriangleDownIcon, null)));
});
exports.NumberDecrementStepper = NumberDecrementStepper;
if (_utils.__DEV__) NumberDecrementStepper.displayName = "NumberDecrementStepper";
/**
 * NumberIncrementStepper
 *
 * React component used to increment the number input's value
 *
 * It renders a `div` with `role=button` by default
 */ var NumberIncrementStepper = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$children2;
    var _useNumberInputContex3 = useNumberInputContext(), getIncrementButtonProps = _useNumberInputContex3.getIncrementButtonProps;
    var increment = getIncrementButtonProps(props, ref);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(StyledStepper, _extends({
    }, increment, {
        __css: styles.stepper
    }), (_props$children2 = props.children) != null ? _props$children2 : /*#__PURE__*/ React.createElement(_icons.TriangleUpIcon, null)));
});
exports.NumberIncrementStepper = NumberIncrementStepper;
if (_utils.__DEV__) NumberIncrementStepper.displayName = "NumberIncrementStepper";

},{"@chakra-ui/form-control":"1VzrL","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./icons":"74pa0","./use-number-input":"4BHDQ"}],"74pa0":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.TriangleUpIcon = exports.TriangleDownIcon = void 0;
var React = _interopRequireWildcard(require("react"));
var _icon = require("@chakra-ui/icon");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var TriangleDownIcon = function TriangleDownIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
    })));
};
exports.TriangleDownIcon = TriangleDownIcon;
var TriangleUpIcon = function TriangleUpIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
    })));
};
exports.TriangleUpIcon = TriangleUpIcon;

},{"react":"3f97z","@chakra-ui/icon":"2mBZX"}],"4BHDQ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useNumberInput = useNumberInput;
var _counter = require("@chakra-ui/counter");
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useSpinner = require("./use-spinner");
var _utils2 = require("./utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var sanitize = function sanitize1(value) {
    return value.split("").filter(_utils2.isFloatingPointNumericCharacter).join("");
};
/**
 * React hook that implements the WAI-ARIA Spin Button widget
 * and used to create numeric input fields.
 *
 * It returns prop getters you can use to build your own
 * custom number inputs.
 *
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton
 * @see Docs     https://www.chakra-ui.com/useNumberInput
 * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)
 */ function useNumberInput(props) {
    if (props === void 0) props = {
    };
    var _props = props, _props$focusInputOnCh = _props.focusInputOnChange, focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh, _props$clampValueOnBl = _props.clampValueOnBlur, clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl, _props$keepWithinRang = _props.keepWithinRange, keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang, _props$min = _props.min, min = _props$min === void 0 ? _utils.minSafeInteger : _props$min, _props$max = _props.max, max = _props$max === void 0 ? _utils.maxSafeInteger : _props$max, _props$step = _props.step, stepProp = _props$step === void 0 ? 1 : _props$step, isReadOnly = _props.isReadOnly, isDisabled = _props.isDisabled, isRequired = _props.isRequired, getAriaValueText = _props.getAriaValueText, isInvalid = _props.isInvalid, _props$pattern = _props.pattern, pattern = _props$pattern === void 0 ? "[0-9]*(.[0-9]+)?" : _props$pattern, _props$inputMode = _props.inputMode, inputMode = _props$inputMode === void 0 ? "decimal" : _props$inputMode, allowMouseWheel = _props.allowMouseWheel, id = _props.id, _ = _props.onChange, precision = _props.precision, name = _props.name, ariaDescBy = _props["aria-describedby"], ariaLabel = _props["aria-label"], ariaLabelledBy = _props["aria-labelledby"], onFocus = _props.onFocus, onBlur = _props.onBlur, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "focusInputOnChange",
        "clampValueOnBlur",
        "keepWithinRange",
        "min",
        "max",
        "step",
        "isReadOnly",
        "isDisabled",
        "isRequired",
        "getAriaValueText",
        "isInvalid",
        "pattern",
        "inputMode",
        "allowMouseWheel",
        "id",
        "onChange",
        "precision",
        "name",
        "aria-describedby",
        "aria-label",
        "aria-labelledby",
        "onFocus",
        "onBlur"
    ]);
    var onFocusProp = _hooks.useCallbackRef(onFocus);
    var onBlurProp = _hooks.useCallbackRef(onBlur);
    var getAriaValueTextProp = _hooks.useCallbackRef(getAriaValueText);
    /**
   * Leverage the `useCounter` hook since it provides
   * the functionality to `increment`, `decrement` and `update`
   * counter values
   */ var counter = _counter.useCounter(props);
    var updateFn = counter.update, incrementFn = counter.increment, decrementFn = counter.decrement;
    /**
   * Keep track of the focused state of the input,
   * so user can this to change the styles of the
   * `spinners`, maybe :)
   */ var _useBoolean = _hooks.useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
    var inputRef = React.useRef(null);
    /**
   * Sync state with uncontrolled form libraries like `react-hook-form`.
   */ _hooks.useSafeLayoutEffect(function() {
        if (!inputRef.current) return;
        var notInSync = inputRef.current.value != counter.value;
        if (notInSync) counter.setValue(sanitize(inputRef.current.value));
    }, []);
    var isInteractive = !(isReadOnly || isDisabled);
    var increment = React.useCallback(function(step) {
        if (step === void 0) step = stepProp;
        if (isInteractive) incrementFn(step);
    }, [
        incrementFn,
        isInteractive,
        stepProp
    ]);
    var decrement = React.useCallback(function(step) {
        if (step === void 0) step = stepProp;
        if (isInteractive) decrementFn(step);
    }, [
        decrementFn,
        isInteractive,
        stepProp
    ]);
    /**
   * Leverage the `useSpinner` hook to spin the input's value
   * when long press on the up and down buttons.
   *
   * This leverages `setInterval` internally
   */ var spinner = _useSpinner.useSpinner(increment, decrement);
    /**
   * The `onChange` handler filters out any character typed
   * that isn't floating point compatible.
   */ var onChange = React.useCallback(function(event) {
        updateFn(sanitize(event.target.value));
    }, [
        updateFn
    ]);
    var onKeyDown = React.useCallback(function(event) {
        /**
     * only allow valid numeric keys
     */ if (!_utils2.isValidNumericKeyboardEvent(event)) event.preventDefault();
        /**
     * Keyboard Accessibility
     *
     * We want to increase or decrease the input's value
     * based on if the user the arrow keys.
     *
     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17
     */ var stepFactor = getStepFactor(event) * stepProp;
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            ArrowUp: function ArrowUp() {
                return increment(stepFactor);
            },
            ArrowDown: function ArrowDown() {
                return decrement(stepFactor);
            },
            Home: function Home() {
                return updateFn(min);
            },
            End: function End() {
                return updateFn(max);
            }
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        updateFn,
        decrement,
        increment,
        max,
        min,
        stepProp
    ]);
    var getStepFactor = function getStepFactor1(event) {
        var ratio = 1;
        if (event.metaKey || event.ctrlKey) ratio = 0.1;
        if (event.shiftKey) ratio = 10;
        return ratio;
    };
    /**
   * If user would like to use a human-readable representation
   * of the value, rather than the value itself they can pass `getAriaValueText`
   *
   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18
   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext
   */ var ariaValueText = React.useMemo(function() {
        var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);
        if (!_utils.isNull(text)) return text;
        var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value
        return !defaultText ? undefined : defaultText;
    }, [
        counter.value,
        getAriaValueTextProp
    ]);
    /**
   * Function that clamps the input's value on blur
   */ var validateAndClamp = React.useCallback(function() {
        var next = counter.value;
        if (next === "") return;
        if (counter.valueAsNumber < min) next = min;
        if (counter.valueAsNumber > max) next = max;
        /**
     * `counter.cast` does 2 things:
     *
     * - sanitize the value by using parseFloat and some Regex
     * - used to round value to computed precision or decimal points
     */ counter.cast(next);
    }, [
        counter,
        max,
        min
    ]);
    var onInputBlur = React.useCallback(function() {
        setFocused.off();
        if (clampValueOnBlur) validateAndClamp();
    }, [
        clampValueOnBlur,
        setFocused,
        validateAndClamp
    ]);
    var focusInput = React.useCallback(function() {
        if (focusInputOnChange) _utils.focus(inputRef.current, {
            nextTick: true
        });
    }, [
        focusInputOnChange
    ]);
    var spinUp = React.useCallback(function(event) {
        event.preventDefault();
        spinner.up();
        focusInput();
    }, [
        focusInput,
        spinner
    ]);
    var spinDown = React.useCallback(function(event) {
        event.preventDefault();
        spinner.down();
        focusInput();
    }, [
        focusInput,
        spinner
    ]);
    var pointerDown = _utils.isBrowser && !!document.documentElement.ontouchstart ? "onTouchStart" : "onMouseDown";
    _hooks.useEventListener("wheel", function(event) {
        var isInputFocused = document.activeElement === inputRef.current;
        if (!allowMouseWheel || !isInputFocused) return;
        event.preventDefault();
        var stepFactor = getStepFactor(event) * stepProp;
        var direction = Math.sign(event.deltaY);
        if (direction === -1) increment(stepFactor);
        else if (direction === 1) decrement(stepFactor);
    }, inputRef.current, {
        passive: false
    });
    var getIncrementButtonProps = React.useCallback(function(props1, ref) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var disabled = isDisabled || keepWithinRange && counter.isAtMax;
        return _extends({
        }, props1, (_extends2 = {
            ref: ref,
            role: "button",
            tabIndex: -1
        }, _extends2[pointerDown] = _utils.callAllHandlers(props1[pointerDown], spinUp), _extends2.onMouseUp = _utils.callAllHandlers(props1.onMouseUp, spinner.stop), _extends2.onMouseLeave = _utils.callAllHandlers(props1.onMouseUp, spinner.stop), _extends2.onTouchEnd = _utils.callAllHandlers(props1.onTouchEnd, spinner.stop), _extends2.disabled = disabled, _extends2["aria-disabled"] = _utils.ariaAttr(disabled), _extends2));
    }, [
        pointerDown,
        counter.isAtMax,
        keepWithinRange,
        spinUp,
        spinner.stop,
        isDisabled
    ]);
    var getDecrementButtonProps = React.useCallback(function(props1, ref) {
        var _extends3;
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var disabled = isDisabled || keepWithinRange && counter.isAtMin;
        return _extends({
        }, props1, (_extends3 = {
            ref: ref,
            role: "button",
            tabIndex: -1
        }, _extends3[pointerDown] = _utils.callAllHandlers(props1[pointerDown], spinDown), _extends3.onMouseLeave = _utils.callAllHandlers(props1.onMouseLeave, spinner.stop), _extends3.onMouseUp = _utils.callAllHandlers(props1.onMouseUp, spinner.stop), _extends3.onTouchEnd = _utils.callAllHandlers(props1.onTouchEnd, spinner.stop), _extends3.disabled = disabled, _extends3["aria-disabled"] = _utils.ariaAttr(disabled), _extends3));
    }, [
        pointerDown,
        counter.isAtMin,
        keepWithinRange,
        spinDown,
        spinner.stop,
        isDisabled
    ]);
    var getInputProps = React.useCallback(function(props1, ref) {
        var _props$readOnly, _props$readOnly2, _props$required, _props$required2;
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
            name: name,
            inputMode: inputMode,
            type: "text",
            pattern: pattern,
            "aria-labelledby": ariaLabelledBy,
            "aria-label": ariaLabel,
            "aria-describedby": ariaDescBy,
            id: id,
            disabled: isDisabled
        }, props1, {
            readOnly: (_props$readOnly = props1.readOnly) != null ? _props$readOnly : isReadOnly,
            "aria-readonly": (_props$readOnly2 = props1.readOnly) != null ? _props$readOnly2 : isReadOnly,
            "aria-required": (_props$required = props1.required) != null ? _props$required : isRequired,
            required: (_props$required2 = props1.required) != null ? _props$required2 : isRequired,
            ref: _reactUtils.mergeRefs(inputRef, ref),
            value: counter.value,
            role: "spinbutton",
            "aria-valuemin": min,
            "aria-valuemax": max,
            "aria-valuenow": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,
            "aria-invalid": _utils.ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),
            "aria-valuetext": ariaValueText,
            autoComplete: "off",
            autoCorrect: "off",
            onChange: _utils.callAllHandlers(props1.onChange, onChange),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onFocus: _utils.callAllHandlers(props1.onFocus, onFocusProp, function() {
                return _utils.scheduleMicrotask(setFocused.on);
            }),
            onBlur: _utils.callAllHandlers(props1.onBlur, onBlurProp, onInputBlur)
        });
    }, [
        name,
        inputMode,
        pattern,
        ariaLabelledBy,
        ariaLabel,
        ariaDescBy,
        id,
        isDisabled,
        isRequired,
        isReadOnly,
        isInvalid,
        counter.value,
        counter.valueAsNumber,
        counter.isOutOfRange,
        min,
        max,
        ariaValueText,
        onChange,
        onKeyDown,
        onFocusProp,
        setFocused.on,
        onBlurProp,
        onInputBlur
    ]);
    return {
        value: counter.value,
        valueAsNumber: counter.valueAsNumber,
        isFocused: isFocused,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        getIncrementButtonProps: getIncrementButtonProps,
        getDecrementButtonProps: getDecrementButtonProps,
        getInputProps: getInputProps,
        htmlProps: htmlProps
    };
}

},{"@chakra-ui/counter":"rA1l7","@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-spinner":"59R7W","./utils":"NPZNb"}],"59R7W":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useSpinner = useSpinner;
var _hooks = require("@chakra-ui/hooks");
var _react = require("react");
/**
 * When click and hold on a button - the speed of auto changing the value.
 */ var CONTINUOUS_CHANGE_INTERVAL = 50;
/**
 * When click and hold on a button - the delay before auto changing the value.
 */ var CONTINUOUS_CHANGE_DELAY = 300;
/**
 * React hook used in the number input to spin its
 * value on long press of the spin buttons
 *
 * @param increment the function to increment
 * @param decrement the function to decrement
 */ function useSpinner(increment, decrement) {
    /**
   * To keep incrementing/decrementing on press, we call that `spinning`
   */ var _useState = _react.useState(false), isSpinning = _useState[0], setIsSpinning = _useState[1]; // This state keeps track of the action ("increment" or "decrement")
    var _useState2 = _react.useState(null), action = _useState2[0], setAction = _useState2[1]; // To increment the value the first time you mousedown, we call that `runOnce`
    var _useState3 = _react.useState(true), runOnce = _useState3[0], setRunOnce = _useState3[1]; // Store the timeout instance id in a ref, so we can clear the timeout later
    var timeoutRef = _react.useRef(null); // Clears the timeout from memory
    var removeTimeout = function removeTimeout1() {
        return clearTimeout(timeoutRef.current);
    };
    /**
   * useInterval hook provides a performant way to
   * update the state value at specific interval
   */ _hooks.useInterval(function() {
        if (action === "increment") increment();
        if (action === "decrement") decrement();
    }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null); // Function to activate the spinning and increment the value
    var up = _react.useCallback(function() {
        // increment the first fime
        if (runOnce) increment();
         // after a delay, keep incrementing at interval ("spinning up")
        timeoutRef.current = setTimeout(function() {
            setRunOnce(false);
            setIsSpinning(true);
            setAction("increment");
        }, CONTINUOUS_CHANGE_DELAY);
    }, [
        increment,
        runOnce
    ]); // Function to activate the spinning and increment the value
    var down = _react.useCallback(function() {
        // decrement the first fime
        if (runOnce) decrement();
         // after a delay, keep decrementing at interval ("spinning down")
        timeoutRef.current = setTimeout(function() {
            setRunOnce(false);
            setIsSpinning(true);
            setAction("decrement");
        }, CONTINUOUS_CHANGE_DELAY);
    }, [
        decrement,
        runOnce
    ]); // Function to stop spinng (useful for mouseup, keyup handlers)
    var stop = _react.useCallback(function() {
        setRunOnce(true);
        setIsSpinning(false);
        removeTimeout();
    }, []);
    /**
   * If the component unmounts while spinning,
   * let's clear the timeout as well
   */ _hooks.useUnmountEffect(removeTimeout);
    return {
        up: up,
        down: down,
        stop: stop
    };
}

},{"@chakra-ui/hooks":"ak6Dj","react":"3f97z"}],"NPZNb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.isFloatingPointNumericCharacter = isFloatingPointNumericCharacter;
exports.isValidNumericKeyboardEvent = isValidNumericKeyboardEvent;
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
/**
 * Determine if a character is a DOM floating point character
 * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float
 */ function isFloatingPointNumericCharacter(character) {
    return FLOATING_POINT_REGEX.test(character);
}
/**
 * Determine if the event is a valid numeric keyboard event.
 * We use this so we can prevent non-number characters in the input
 */ function isValidNumericKeyboardEvent(event) {
    if (event.key == null) return true;
    var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
    if (isModifierKey) return true;
    var isSingleCharacterKey = event.key.length === 1;
    if (!isSingleCharacterKey) return true;
    return isFloatingPointNumericCharacter(event.key);
}

},{}],"4S3jZ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _pinInput = require("./pin-input");
Object.keys(_pinInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _pinInput[key]) return;
    exports[key] = _pinInput[key];
});
var _usePinInput = require("./use-pin-input");
Object.keys(_usePinInput).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _usePinInput[key]) return;
    exports[key] = _usePinInput[key];
});

},{"./pin-input":"5K8Km","./use-pin-input":"1UZjO"}],"5K8Km":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.PinInputField = exports.PinInput = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _usePinInput2 = require("./use-pin-input");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var PinInput = function PinInput1(props) {
    var styles = _system.useStyleConfig("PinInput", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children"
    ]);
    var _usePinInput = _usePinInput2.usePinInput(rest), descendants = _usePinInput.descendants, context = _objectWithoutPropertiesLoose(_usePinInput, [
        "descendants"
    ]);
    var clones = _reactUtils.getValidChildren(children).map(function(child) {
        return(/*#__PURE__*/ React.cloneElement(child, {
            __css: styles
        }));
    });
    return(/*#__PURE__*/ React.createElement(_usePinInput2.PinInputDescendantsProvider, {
        value: descendants
    }, /*#__PURE__*/ React.createElement(_usePinInput2.PinInputProvider, {
        value: context
    }, clones)));
};
exports.PinInput = PinInput;
if (_utils.__DEV__) PinInput.displayName = "PinInput";
var PinInputField = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var inputProps = _usePinInput2.usePinInputField(props, ref);
    return(/*#__PURE__*/ React.createElement(_system.chakra.input, _extends({
    }, inputProps, {
        className: _utils.cx("chakra-pin-input", props.className)
    })));
});
exports.PinInputField = PinInputField;
if (_utils.__DEV__) PinInputField.displayName = "PinInputField";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-pin-input":"1UZjO"}],"1UZjO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePinInput = usePinInput;
exports.usePinInputField = usePinInputField;
exports.usePinInputContext = exports.PinInputProvider = exports.usePinInputDescendant = exports.usePinInputDescendants = exports.usePinInputDescendantsContext = exports.PinInputDescendantsProvider = void 0;
var _descendant = require("@chakra-ui/descendant");
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/ var _createDescendantCont = _descendant.createDescendantContext(), PinInputDescendantsProvider = _createDescendantCont[0], usePinInputDescendantsContext = _createDescendantCont[1], usePinInputDescendants = _createDescendantCont[2], usePinInputDescendant = _createDescendantCont[3];
/* -------------------------------------------------------------------------------------------------
 * Create context that stores pin-input logic
 * -----------------------------------------------------------------------------------------------*/ exports.usePinInputDescendant = usePinInputDescendant;
exports.usePinInputDescendants = usePinInputDescendants;
exports.usePinInputDescendantsContext = usePinInputDescendantsContext;
exports.PinInputDescendantsProvider = PinInputDescendantsProvider;
var _createContext = _reactUtils.createContext({
    name: "PinInputContext",
    errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
}), PinInputProvider = _createContext[0], usePinInputContext = _createContext[1];
/* -------------------------------------------------------------------------------------------------
 * usePinInput hook
 * -----------------------------------------------------------------------------------------------*/ exports.usePinInputContext = usePinInputContext;
exports.PinInputProvider = PinInputProvider;
var toArray = function toArray1(value) {
    return value == null ? void 0 : value.split("");
};
function validate(value, type) {
    var NUMERIC_REGEX = /^[0-9]+$/;
    var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
    var regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
    return regex.test(value);
}
/* -------------------------------------------------------------------------------------------------
 * usePinInput - handles the general pin input logic
 * -----------------------------------------------------------------------------------------------*/ /**
 * @internal
 */ function usePinInput(props) {
    if (props === void 0) props = {
    };
    var _props = props, autoFocus = _props.autoFocus, value = _props.value, defaultValue = _props.defaultValue, _onChange = _props.onChange, onComplete = _props.onComplete, _props$placeholder = _props.placeholder, placeholder = _props$placeholder === void 0 ? "○" : _props$placeholder, _props$manageFocus = _props.manageFocus, manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus, _props$otp = _props.otp, otp = _props$otp === void 0 ? false : _props$otp, idProp = _props.id, isDisabled = _props.isDisabled, isInvalid = _props.isInvalid, _props$type = _props.type, type = _props$type === void 0 ? "number" : _props$type, mask = _props.mask;
    var uuid = _hooks.useId();
    var id = idProp != null ? idProp : "pin-input-" + uuid;
    var descendants = usePinInputDescendants();
    var _React$useState = React.useState(true), moveFocus = _React$useState[0], setMoveFocus = _React$useState[1];
    var _React$useState2 = React.useState(-1), focusedIndex = _React$useState2[0], setFocusedIndex = _React$useState2[1];
    var _useControllableState = _hooks.useControllableState({
        defaultValue: toArray(defaultValue) || [],
        value: toArray(value),
        onChange: function onChange(values) {
            return _onChange == null ? void 0 : _onChange(values.join(""));
        }
    }), values = _useControllableState[0], setValues = _useControllableState[1];
    React.useEffect(function() {
        if (autoFocus) {
            var first = descendants.first();
            if (first) _utils.focus(first.node, {
                nextTick: true
            });
        } // We don't want to listen for updates to `autoFocus` since it only runs initially
    // eslint-disable-next-line
    }, [
        descendants
    ]);
    var focusNext = React.useCallback(function(index) {
        if (!moveFocus || !manageFocus) return;
        var next = descendants.next(index, false);
        if (next) _utils.focus(next.node, {
            nextTick: true
        });
    }, [
        descendants,
        moveFocus,
        manageFocus
    ]);
    var setValue = React.useCallback(function(value1, index) {
        var nextValues = [].concat(values);
        nextValues[index] = value1;
        setValues(nextValues);
        var isComplete = value1 !== "" && nextValues.length === descendants.count() && nextValues.every(function(inputValue) {
            return inputValue != null && inputValue !== "";
        });
        if (isComplete) onComplete == null || onComplete(nextValues.join(""));
        else focusNext(index);
    }, [
        values,
        setValues,
        focusNext,
        onComplete,
        descendants
    ]);
    var clear = React.useCallback(function() {
        var values1 = Array(descendants.count()).fill("");
        setValues(values1);
        var first = descendants.first();
        if (first) _utils.focus(first.node);
    }, [
        descendants,
        setValues
    ]);
    var getNextValue = React.useCallback(function(value1, eventValue) {
        var nextValue = eventValue;
        if ((value1 == null ? void 0 : value1.length) > 0) {
            if (value1[0] === eventValue.charAt(0)) nextValue = eventValue.charAt(1);
            else if (value1[0] === eventValue.charAt(1)) nextValue = eventValue.charAt(0);
        }
        return nextValue;
    }, []);
    var getInputProps = React.useCallback(function(props1) {
        var index = props1.index, rest = _objectWithoutPropertiesLoose(props1, [
            "index"
        ]);
        /**
     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js
     */ var onChange = function onChange1(event) {
            var eventValue = event.target.value;
            var currentValue = values[index];
            var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace
            if (nextValue === "") {
                setValue("", index);
                return;
            } // in the case of an autocomplete or copy and paste
            if (eventValue.length > 2) // see if we can use the string to fill out our values
            {
                if (validate(eventValue, type)) {
                    // Ensure the value matches the number of inputs
                    var _nextValue = eventValue.split("").filter(function(_, index1) {
                        return index1 < descendants.count();
                    });
                    setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`
                    if (_nextValue.length === descendants.count()) onComplete == null || onComplete(_nextValue.join(""));
                }
            } else {
                // only set if the new value is a number
                if (validate(nextValue, type)) setValue(nextValue, index);
                setMoveFocus(true);
            }
        };
        var onKeyDown = function onKeyDown1(event) {
            if (event.key === "Backspace" && manageFocus) {
                if (event.target.value === "") {
                    var prevInput = descendants.prev(index, false);
                    if (prevInput) {
                        setValue("", index - 1);
                        _utils.focus(prevInput.node);
                        setMoveFocus(true);
                    }
                } else setMoveFocus(false);
            }
        };
        var onFocus = function onFocus1() {
            setFocusedIndex(index);
        };
        var onBlur = function onBlur1() {
            setFocusedIndex(-1);
        };
        var hasFocus = focusedIndex === index;
        var inputType = type === "number" ? "tel" : "text";
        return _extends({
            "aria-label": "Please enter your pin code",
            inputMode: type === "number" ? "numeric" : "text",
            type: mask ? "password" : inputType
        }, rest, {
            id: id + "-" + index,
            disabled: isDisabled,
            "aria-invalid": _utils.ariaAttr(isInvalid),
            onChange: _utils.callAllHandlers(rest.onChange, onChange),
            onKeyDown: _utils.callAllHandlers(rest.onKeyDown, onKeyDown),
            onFocus: _utils.callAllHandlers(rest.onFocus, onFocus),
            onBlur: _utils.callAllHandlers(rest.onBlur, onBlur),
            value: values[index] || "",
            autoComplete: otp ? "one-time-code" : "off",
            placeholder: hasFocus ? "" : placeholder
        });
    }, [
        descendants,
        focusedIndex,
        getNextValue,
        id,
        isDisabled,
        mask,
        isInvalid,
        manageFocus,
        onComplete,
        otp,
        placeholder,
        setValue,
        setValues,
        type,
        values
    ]);
    return {
        // prop getter
        getInputProps: getInputProps,
        // state
        id: id,
        descendants: descendants,
        values: values,
        // actions
        setValue: setValue,
        setValues: setValues,
        clear: clear
    };
}
/**
 * @internal
 */ function usePinInputField(props, ref) {
    if (props === void 0) props = {
    };
    if (ref === void 0) ref = null;
    var _usePinInputContext = usePinInputContext(), getInputProps = _usePinInputContext.getInputProps;
    var _usePinInputDescendan = usePinInputDescendant(), index = _usePinInputDescendan.index, register = _usePinInputDescendan.register;
    return getInputProps(_extends({
    }, props, {
        ref: _reactUtils.mergeRefs(register, ref),
        index: index
    }));
}

},{"@chakra-ui/descendant":"37ueY","@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"7C2wR":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _popover = require("./popover");
Object.keys(_popover).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _popover[key]) return;
    exports[key] = _popover[key];
});
var _usePopover = require("./use-popover");
Object.keys(_usePopover).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _usePopover[key]) return;
    exports[key] = _usePopover[key];
});

},{"./popover":"2B7HC","./use-popover":"6uk0R"}],"2B7HC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.PopoverArrow = exports.PopoverCloseButton = exports.PopoverFooter = exports.PopoverBody = exports.PopoverHeader = exports.PopoverContent = exports.PopoverTrigger = exports.Popover = void 0;
var _closeButton = require("@chakra-ui/close-button");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _popoverContext = require("./popover-context");
exports.usePopoverContext = _popoverContext.usePopoverContext;
var _popoverTransition = require("./popover-transition");
var _usePopover = require("./use-popover");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Popover is used to bring attention to specific user interface elements,
 * typically to suggest an action or to guide users through a new experience.
 */ var Popover = function Popover1(props) {
    var styles = _system.useMultiStyleConfig("Popover", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children"
    ]);
    var context = _usePopover.usePopover(rest);
    return(/*#__PURE__*/ React.createElement(_popoverContext.PopoverProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, _utils.runIfFn(children, {
        isOpen: context.isOpen,
        onClose: context.onClose,
        forceUpdate: context.forceUpdate
    }))));
};
exports.Popover = Popover;
if (_utils.__DEV__) Popover.displayName = "Popover";
/**
 * PopoverTrigger opens the popover's content. It must be an interactive element
 * such as `button` or `a`.
 */ var PopoverTrigger = function PopoverTrigger1(props) {
    // enforce a single child
    var child = React.Children.only(props.children);
    var _usePopoverContext = _popoverContext.usePopoverContext(), getTriggerProps = _usePopoverContext.getTriggerProps;
    return(/*#__PURE__*/ React.cloneElement(child, getTriggerProps(child.props, child.ref)));
};
exports.PopoverTrigger = PopoverTrigger;
if (_utils.__DEV__) PopoverTrigger.displayName = "PopoverTrigger";
var PopoverContent = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var rootProps = props.rootProps, contentProps = _objectWithoutPropertiesLoose(props, [
        "rootProps"
    ]);
    var _usePopoverContext2 = _popoverContext.usePopoverContext(), getPopoverProps = _usePopoverContext2.getPopoverProps, getPopoverPositionerProps = _usePopoverContext2.getPopoverPositionerProps;
    var styles = _system.useStyles();
    var contentStyles = _extends({
        position: "relative",
        display: "flex",
        flexDirection: "column"
    }, styles.content);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, getPopoverPositionerProps(rootProps), {
        __css: styles.popper,
        className: "chakra-popover__popper"
    }), /*#__PURE__*/ React.createElement(_popoverTransition.PopoverTransition, _extends({
    }, getPopoverProps(contentProps, ref), {
        className: _utils.cx("chakra-popover__content", props.className),
        __css: contentStyles
    }))));
});
exports.PopoverContent = PopoverContent;
if (_utils.__DEV__) PopoverContent.displayName = "PopoverContent";
/**
 * PopoverHeader is the accessible header or label
 * for the popover's content and it is first announced by screenreaders.
 */ var PopoverHeader = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _usePopoverContext3 = _popoverContext.usePopoverContext(), getHeaderProps = _usePopoverContext3.getHeaderProps;
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.header, _extends({
    }, getHeaderProps(props, ref), {
        className: _utils.cx("chakra-popover__header", props.className),
        __css: styles.header
    })));
});
exports.PopoverHeader = PopoverHeader;
if (_utils.__DEV__) PopoverHeader.displayName = "PopoverHeader";
/**
 * PopoverBody is the main content area for the popover. Should contain
 * at least one interactive element.
 */ var PopoverBody = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _usePopoverContext4 = _popoverContext.usePopoverContext(), getBodyProps = _usePopoverContext4.getBodyProps;
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, getBodyProps(props, ref), {
        className: _utils.cx("chakra-popover__body", props.className),
        __css: styles.body
    })));
});
exports.PopoverBody = PopoverBody;
if (_utils.__DEV__) PopoverBody.displayName = "PopoverBody";
var PopoverFooter = function PopoverFooter1(props) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.footer, _extends({
    }, props, {
        className: _utils.cx("chakra-popover__footer", props.className),
        __css: styles.footer
    })));
};
exports.PopoverFooter = PopoverFooter;
if (_utils.__DEV__) PopoverFooter.displayName = "PopoverFooter";
var PopoverCloseButton = function PopoverCloseButton1(props) {
    var _usePopoverContext5 = _popoverContext.usePopoverContext(), onClose = _usePopoverContext5.onClose;
    return(/*#__PURE__*/ React.createElement(_closeButton.CloseButton, _extends({
        size: "sm",
        onClick: onClose,
        position: "absolute",
        borderRadius: "md",
        top: "0.25rem",
        insetEnd: "0.5rem",
        padding: "0.5rem"
    }, props)));
};
exports.PopoverCloseButton = PopoverCloseButton;
if (_utils.__DEV__) PopoverCloseButton.displayName = "PopoverCloseButton";
var PopoverArrow = function PopoverArrow1(props) {
    var _ref;
    var bg = props.bg, bgColor = props.bgColor, backgroundColor = props.backgroundColor;
    var _usePopoverContext6 = _popoverContext.usePopoverContext(), getArrowProps = _usePopoverContext6.getArrowProps, getArrowInnerProps = _usePopoverContext6.getArrowInnerProps;
    var styles = _system.useStyles();
    var arrowBg = (_ref = bg != null ? bg : bgColor) != null ? _ref : backgroundColor;
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, getArrowProps(), {
        className: "chakra-popover__arrow-positioner"
    }), /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _utils.cx("chakra-popover__arrow", props.className)
    }, getArrowInnerProps(props), {
        __css: _extends({
        }, styles.arrow, {
            "--popper-arrow-bg": arrowBg ? "colors." + arrowBg + ", " + arrowBg : undefined
        })
    }))));
};
exports.PopoverArrow = PopoverArrow;
if (_utils.__DEV__) PopoverArrow.displayName = "PopoverArrow";

},{"@chakra-ui/close-button":"6ZT8s","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./popover-context":"6x321","./popover-transition":"1NQI0","./use-popover":"6uk0R"}],"6x321":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePopoverContext = exports.PopoverProvider = void 0;
var _reactUtils = require("@chakra-ui/react-utils");
var _createContext = _reactUtils.createContext({
    name: "PopoverContext",
    errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
}), PopoverProvider = _createContext[0], usePopoverContext = _createContext[1];
exports.usePopoverContext = usePopoverContext;
exports.PopoverProvider = PopoverProvider;

},{"@chakra-ui/react-utils":"5UBnZ"}],"1NQI0":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.PopoverTransition = void 0;
var _system = require("@chakra-ui/system");
var _framerMotion = require("framer-motion");
var _utils = require("@chakra-ui/utils");
var _react = _interopRequireDefault(require("react"));
var _popoverContext = require("./popover-context");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var mergeVariants = function mergeVariants1(variants) {
    if (!variants) return;
    return _utils.mergeWith(variants, {
        enter: {
            visibility: "visible"
        },
        exit: {
            transitionEnd: {
                visibility: "hidden"
            }
        }
    });
};
var scaleFade = {
    exit: {
        opacity: 0,
        scale: 0.95,
        transition: {
            duration: 0.1,
            ease: [
                0.4,
                0,
                1,
                1
            ]
        }
    },
    enter: {
        scale: 1,
        opacity: 1,
        transition: {
            duration: 0.15,
            ease: [
                0,
                0,
                0.2,
                1
            ]
        }
    }
};
var Section = _framerMotion.motion(_system.chakra.section);
var PopoverTransition = /*#__PURE__*/ _react["default"].forwardRef(function(props, ref) {
    var _usePopoverContext = _popoverContext.usePopoverContext(), isOpen = _usePopoverContext.isOpen;
    return(/*#__PURE__*/ _react["default"].createElement(Section, _extends({
        ref: ref,
        variants: mergeVariants(props.variants)
    }, props, {
        initial: false,
        animate: isOpen ? "enter" : "exit"
    })));
});
exports.PopoverTransition = PopoverTransition;
PopoverTransition.defaultProps = {
    variants: scaleFade
};

},{"@chakra-ui/system":"4QBuE","framer-motion":"5ufJB","@chakra-ui/utils":"3364O","react":"3f97z","./popover-context":"6x321"}],"6uk0R":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.usePopover = usePopover;
var _hooks = require("@chakra-ui/hooks");
var _popper = require("@chakra-ui/popper");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var TRIGGER = {
    click: "click",
    hover: "hover"
};
/**
 * @internal
 */ function usePopover(props) {
    if (props === void 0) props = {
    };
    var _props = props, _props$closeOnBlur = _props.closeOnBlur, closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur, _props$closeOnEsc = _props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, initialFocusRef = _props.initialFocusRef, id = _props.id, _props$returnFocusOnC = _props.returnFocusOnClose, returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC, _props$autoFocus = _props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, arrowSize = _props.arrowSize, arrowShadowColor = _props.arrowShadowColor, _props$trigger = _props.trigger, trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger, _props$openDelay = _props.openDelay, openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay, _props$closeDelay = _props.closeDelay, closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay, isLazy = _props.isLazy, _props$lazyBehavior = _props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, popperProps = _objectWithoutPropertiesLoose(_props, [
        "closeOnBlur",
        "closeOnEsc",
        "initialFocusRef",
        "id",
        "returnFocusOnClose",
        "autoFocus",
        "arrowSize",
        "arrowShadowColor",
        "trigger",
        "openDelay",
        "closeDelay",
        "isLazy",
        "lazyBehavior"
    ]);
    var _useDisclosure = _hooks.useDisclosure(props), isOpen = _useDisclosure.isOpen, onClose = _useDisclosure.onClose, onOpen = _useDisclosure.onOpen, onToggle = _useDisclosure.onToggle;
    var triggerRef = _react.useRef(null);
    var popoverRef = _react.useRef(null);
    var isHoveringRef = _react.useRef(false);
    var hasBeenOpened = _react.useRef(false);
    if (isOpen) hasBeenOpened.current = true;
    var _useState = _react.useState(false), hasHeader = _useState[0], setHasHeader = _useState[1];
    var _useState2 = _react.useState(false), hasBody = _useState2[0], setHasBody = _useState2[1];
    var _useIds = _hooks.useIds(id, "popover-trigger", "popover-content", "popover-header", "popover-body"), triggerId = _useIds[0], popoverId = _useIds[1], headerId = _useIds[2], bodyId = _useIds[3];
    var _usePopper = _popper.usePopper(_extends({
    }, popperProps, {
        enabled: isOpen
    })), referenceRef = _usePopper.referenceRef, getArrowProps = _usePopper.getArrowProps, getPopperProps = _usePopper.getPopperProps, getArrowInnerProps = _usePopper.getArrowInnerProps, forceUpdate = _usePopper.forceUpdate;
    _hooks.useFocusOnPointerDown({
        enabled: isOpen,
        ref: triggerRef
    });
    _hooks.useFocusOnHide(popoverRef, {
        focusRef: triggerRef,
        visible: isOpen,
        shouldFocus: returnFocusOnClose && trigger === TRIGGER.click
    });
    _hooks.useFocusOnShow(popoverRef, {
        focusRef: initialFocusRef,
        visible: isOpen,
        shouldFocus: autoFocus && trigger === TRIGGER.click
    });
    var shouldRenderChildren = _utils.determineLazyBehavior({
        hasBeenSelected: hasBeenOpened.current,
        isLazy: isLazy,
        lazyBehavior: lazyBehavior,
        isSelected: isOpen
    });
    var getPopoverProps = _react.useCallback(function(props1, _ref) {
        if (props1 === void 0) props1 = {
        };
        if (_ref === void 0) _ref = null;
        var popoverProps = _extends({
        }, props1, {
            style: _extends({
            }, props1.style, {
                transformOrigin: _popper.popperCSSVars.transformOrigin.varRef
            }),
            ref: _reactUtils.mergeRefs(popoverRef, _ref),
            children: shouldRenderChildren ? props1.children : null,
            id: popoverId,
            tabIndex: -1,
            role: "dialog",
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, function(event) {
                if (closeOnEsc && event.key === "Escape") onClose();
            }),
            onBlur: _utils.callAllHandlers(props1.onBlur, function(event) {
                var relatedTarget = _utils.getRelatedTarget(event);
                var targetIsPopover = _utils.contains(popoverRef.current, relatedTarget);
                var targetIsTrigger = _utils.contains(triggerRef.current, relatedTarget);
                var isValidBlur = !targetIsPopover && !targetIsTrigger;
                if (isOpen && closeOnBlur && isValidBlur) onClose();
            }),
            "aria-labelledby": hasHeader ? headerId : undefined,
            "aria-describedby": hasBody ? bodyId : undefined
        });
        if (trigger === TRIGGER.hover) {
            popoverProps.role = "tooltip";
            popoverProps.onMouseEnter = _utils.callAllHandlers(props1.onMouseEnter, function() {
                isHoveringRef.current = true;
            });
            popoverProps.onMouseLeave = _utils.callAllHandlers(props1.onMouseLeave, function() {
                isHoveringRef.current = false;
                setTimeout(onClose, closeDelay);
            });
        }
        return popoverProps;
    }, [
        shouldRenderChildren,
        popoverId,
        hasHeader,
        headerId,
        hasBody,
        bodyId,
        trigger,
        closeOnEsc,
        onClose,
        isOpen,
        closeOnBlur,
        closeDelay
    ]);
    var getPopoverPositionerProps = _react.useCallback(function(props1, forwardedRef) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return getPopperProps(_extends({
        }, props1, {
            style: _extends((_extends2 = {
            }, _extends2[_popper.popperCSSVars.arrowSize["var"]] = arrowSize ? _utils.px(arrowSize) : undefined, _extends2[_popper.popperCSSVars.arrowShadowColor["var"]] = arrowShadowColor, _extends2.visibility = isOpen ? "visible" : "hidden", _extends2), props1.style)
        }), forwardedRef);
    }, [
        arrowShadowColor,
        arrowSize,
        isOpen,
        getPopperProps
    ]);
    var openTimeout = _react.useRef();
    var closeTimeout = _react.useRef();
    var getTriggerProps = _react.useCallback(function(props1, _ref) {
        if (props1 === void 0) props1 = {
        };
        if (_ref === void 0) _ref = null;
        var triggerProps = _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(triggerRef, _ref, referenceRef),
            id: triggerId,
            "aria-haspopup": "dialog",
            "aria-expanded": isOpen,
            "aria-controls": popoverId
        });
        if (trigger === TRIGGER.click) triggerProps.onClick = _utils.callAllHandlers(props1.onClick, onToggle);
        if (trigger === TRIGGER.hover) {
            /**
       * Any content that shows on pointer hover should also show on keyboard focus.
       * Consider focus and blur to be the `hover` for keyboard users.
       *
       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html
       */ triggerProps.onFocus = _utils.callAllHandlers(props1.onFocus, onOpen);
            triggerProps.onBlur = _utils.callAllHandlers(props1.onBlur, onClose);
            /**
       * Any content that shows on hover or focus must be dismissible.
       * This case pressing `Escape` will dismiss the popover
       */ triggerProps.onKeyDown = _utils.callAllHandlers(props1.onKeyDown, function(event) {
                if (event.key === "Escape") onClose();
            });
            triggerProps.onMouseEnter = _utils.callAllHandlers(props1.onMouseEnter, function() {
                isHoveringRef.current = true;
                openTimeout.current = window.setTimeout(onOpen, openDelay);
            });
            triggerProps.onMouseLeave = _utils.callAllHandlers(props1.onMouseLeave, function() {
                isHoveringRef.current = false;
                if (openTimeout.current) {
                    clearTimeout(openTimeout.current);
                    openTimeout.current = undefined;
                }
                closeTimeout.current = window.setTimeout(function() {
                    if (isHoveringRef.current === false) onClose();
                }, closeDelay);
            });
        }
        return triggerProps;
    }, [
        triggerId,
        isOpen,
        popoverId,
        trigger,
        referenceRef,
        onToggle,
        onOpen,
        onClose,
        openDelay,
        closeDelay
    ]);
    _react.useEffect(function() {
        return function() {
            if (openTimeout.current) clearTimeout(openTimeout.current);
            if (closeTimeout.current) clearTimeout(closeTimeout.current);
        };
    }, []);
    var getHeaderProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            id: headerId,
            ref: _reactUtils.mergeRefs(ref, function(node) {
                setHasHeader(!!node);
            })
        });
    }, [
        headerId
    ]);
    var getBodyProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            id: bodyId,
            ref: _reactUtils.mergeRefs(ref, function(node) {
                setHasBody(!!node);
            })
        });
    }, [
        bodyId
    ]);
    return {
        forceUpdate: forceUpdate,
        isOpen: isOpen,
        onClose: onClose,
        getArrowProps: getArrowProps,
        getArrowInnerProps: getArrowInnerProps,
        getPopoverPositionerProps: getPopoverPositionerProps,
        getPopoverProps: getPopoverProps,
        getTriggerProps: getTriggerProps,
        getHeaderProps: getHeaderProps,
        getBodyProps: getBodyProps
    };
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/popper":"5zSIv","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z"}],"5x6dK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _circularProgress = require("./circular-progress");
Object.keys(_circularProgress).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _circularProgress[key]) return;
    exports[key] = _circularProgress[key];
});
var _progress = require("./progress");
Object.keys(_progress).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _progress[key]) return;
    exports[key] = _progress[key];
});

},{"./circular-progress":"1Kijt","./progress":"5YcEh"}],"1Kijt":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.CircularProgressLabel = exports.CircularProgress = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _progress = require("./progress.utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var Circle = function Circle1(props) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.circle, _extends({
        cx: 50,
        cy: 50,
        r: 42,
        fill: "transparent"
    }, props)));
};
if (_utils.__DEV__) Circle.displayName = "Circle";
var Shape = function Shape1(props) {
    var size = props.size, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose(props, [
        "size",
        "isIndeterminate"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.svg, _extends({
        viewBox: "0 0 100 100",
        __css: {
            width: size,
            height: size,
            animation: isIndeterminate ? _progress.rotate + " 2s linear infinite" : undefined
        }
    }, rest)));
};
if (_utils.__DEV__) Shape.displayName = "Shape";
/**
 * CircularProgress is used to indicate the progress of an activity.
 * It is built using `svg` and `circle` components with support for
 * theming and `indeterminate` state
 *
 * @see Docs https://chakra-ui.com/docs/feedback/circular-progress
 * @todo add theming support for circular progress
 */ var CircularProgress = function CircularProgress1(props) {
    var _progress$percent;
    var _props$size = props.size, size = _props$size === void 0 ? "48px" : _props$size, _props$max = props.max, max = _props$max === void 0 ? 100 : _props$max, _props$min = props.min, min = _props$min === void 0 ? 0 : _props$min, valueText = props.valueText, getValueText = props.getValueText, value = props.value, capIsRound = props.capIsRound, children = props.children, _props$thickness = props.thickness, thickness = _props$thickness === void 0 ? "10px" : _props$thickness, _props$color = props.color, color = _props$color === void 0 ? "#0078d4" : _props$color, _props$trackColor = props.trackColor, trackColor = _props$trackColor === void 0 ? "#edebe9" : _props$trackColor, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose(props, [
        "size",
        "max",
        "min",
        "valueText",
        "getValueText",
        "value",
        "capIsRound",
        "children",
        "thickness",
        "color",
        "trackColor",
        "isIndeterminate"
    ]);
    var progress = _progress.getProgressProps({
        min: min,
        max: max,
        value: value,
        valueText: valueText,
        getValueText: getValueText,
        isIndeterminate: isIndeterminate
    });
    var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;
    var strokeDasharray = _utils.isUndefined(determinant) ? undefined : determinant + " " + (264 - determinant);
    var indicatorProps = isIndeterminate ? {
        css: {
            animation: _progress.spin + " 1.5s linear infinite"
        }
    } : {
        strokeDashoffset: 66,
        strokeDasharray: strokeDasharray,
        transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
    };
    var rootStyles = {
        display: "inline-block",
        position: "relative",
        verticalAlign: "middle",
        fontSize: size
    };
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: "chakra-progress"
    }, progress.bind, rest, {
        __css: rootStyles
    }), /*#__PURE__*/ React.createElement(Shape, {
        size: size,
        isIndeterminate: isIndeterminate
    }, /*#__PURE__*/ React.createElement(Circle, {
        stroke: trackColor,
        strokeWidth: thickness,
        className: "chakra-progress__track"
    }), /*#__PURE__*/ React.createElement(Circle, _extends({
        stroke: color,
        strokeWidth: thickness,
        className: "chakra-progress__indicator",
        strokeLinecap: capIsRound ? "round" : undefined,
        opacity: progress.value === 0 && !isIndeterminate ? 0 : undefined
    }, indicatorProps))), children));
};
exports.CircularProgress = CircularProgress;
if (_utils.__DEV__) CircularProgress.displayName = "CircularProgress";
/**
 * CircularProgress component label. In most cases it is a numeric indicator
 * of the circular progress component's value
 */ var CircularProgressLabel = _system.chakra("div", {
    baseStyle: {
        fontSize: "0.24em",
        top: "50%",
        left: "50%",
        width: "100%",
        textAlign: "center",
        position: "absolute",
        transform: "translate(-50%, -50%)"
    }
});
exports.CircularProgressLabel = CircularProgressLabel;
if (_utils.__DEV__) CircularProgressLabel.displayName = "CircularProgressLabel";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./progress.utils":"3SttG"}],"3SttG":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getProgressProps = getProgressProps;
exports.stripe = exports.progress = exports.rotate = exports.spin = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var spin = _system.keyframes({
    "0%": {
        strokeDasharray: "1, 400",
        strokeDashoffset: "0"
    },
    "50%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-100"
    },
    "100%": {
        strokeDasharray: "400, 400",
        strokeDashoffset: "-260"
    }
});
exports.spin = spin;
var rotate = _system.keyframes({
    "0%": {
        transform: "rotate(0deg)"
    },
    "100%": {
        transform: "rotate(360deg)"
    }
});
exports.rotate = rotate;
var progress = _system.keyframes({
    "0%": {
        left: "-40%"
    },
    "100%": {
        left: "100%"
    }
});
exports.progress = progress;
var stripe = _system.keyframes({
    from: {
        backgroundPosition: "1rem 0"
    },
    to: {
        backgroundPosition: "0 0"
    }
});
exports.stripe = stripe;
/**
 * Get the common `aria-*` attributes for both the linear and circular
 * progress components.
 */ function getProgressProps(options) {
    var _options$value = options.value, value = _options$value === void 0 ? 0 : _options$value, min = options.min, max = options.max, valueText = options.valueText, getValueText = options.getValueText, isIndeterminate = options.isIndeterminate;
    var percent = _utils.valueToPercent(value, min, max);
    var getAriaValueText = function getAriaValueText1() {
        if (value == null) return undefined;
        return _utils.isFunction(getValueText) ? getValueText(value, percent) : valueText;
    };
    return {
        bind: {
            "data-indeterminate": isIndeterminate ? "" : undefined,
            "aria-valuemax": max,
            "aria-valuemin": min,
            "aria-valuenow": isIndeterminate ? undefined : value,
            "aria-valuetext": getAriaValueText(),
            role: "progressbar"
        },
        percent: percent,
        value: value
    };
}

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O"}],"5YcEh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Progress = exports.ProgressLabel = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _progress = require("./progress.utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * ProgressLabel is used to show the numeric value of the progress.
 * @see Docs https://chakra-ui.com/docs/feedback/progress
 */ var ProgressLabel = function ProgressLabel1(props) {
    var styles = _system.useStyles();
    var labelStyles = _extends({
        top: "50%",
        left: "50%",
        width: "100%",
        textAlign: "center",
        position: "absolute",
        transform: "translate(-50%, -50%)"
    }, styles.label);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, props, {
        __css: labelStyles
    })));
};
exports.ProgressLabel = ProgressLabel;
if (_utils.__DEV__) ProgressLabel.displayName = "ProgressLabel";
/**
 * ProgressFilledTrack (Linear)
 *
 * The progress component that visually indicates the current level of the progress bar.
 * It applies `background-color` and changes its width.
 *
 * @see Docs https://chakra-ui.com/docs/components/progress
 */ var ProgressFilledTrack = function ProgressFilledTrack1(props) {
    var min = props.min, max = props.max, value = props.value, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose(props, [
        "min",
        "max",
        "value",
        "isIndeterminate"
    ]);
    var progress = _progress.getProgressProps({
        value: value,
        min: min,
        max: max,
        isIndeterminate: isIndeterminate
    });
    var styles = _system.useStyles();
    var trackStyles = _extends({
        height: "100%"
    }, styles.filledTrack);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        style: _extends({
            width: progress.percent + "%"
        }, rest.style)
    }, progress.bind, rest, {
        __css: trackStyles
    })));
};
/**
 * Progress (Linear)
 *
 * Progress is used to display the progress status for a task that takes a long
 * time or consists of several steps.
 *
 * It includes accessible attributes to help assistive technologies understand
 * and speak the progress values.
 *
 * @see Docs https://chakra-ui.com/docs/components/progress
 */ var Progress = function Progress1(props) {
    var _styles$track;
    var _omitThemingProps = _system.omitThemingProps(props), value = _omitThemingProps.value, _omitThemingProps$min = _omitThemingProps.min, min = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min, _omitThemingProps$max = _omitThemingProps.max, max = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max, hasStripe = _omitThemingProps.hasStripe, isAnimated = _omitThemingProps.isAnimated, children = _omitThemingProps.children, propBorderRadius = _omitThemingProps.borderRadius, isIndeterminate = _omitThemingProps.isIndeterminate, ariaLabel = _omitThemingProps["aria-label"], ariaLabelledBy = _omitThemingProps["aria-labelledby"], rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "value",
        "min",
        "max",
        "hasStripe",
        "isAnimated",
        "children",
        "borderRadius",
        "isIndeterminate",
        "aria-label",
        "aria-labelledby"
    ]);
    var styles = _system.useMultiStyleConfig("Progress", props);
    var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles.track) == null ? void 0 : _styles$track.borderRadius;
    var stripAnimation = {
        animation: _progress.stripe + " 1s linear infinite"
    };
    /**
   * We should not use stripe if it is `indeterminate`
   */ var shouldAddStripe = !isIndeterminate && hasStripe;
    var shouldAnimateStripe = shouldAddStripe && isAnimated;
    /**
   * Generate styles for stripe and stripe animation
   */ var css = _extends({
    }, shouldAnimateStripe && stripAnimation, isIndeterminate && {
        position: "absolute",
        willChange: "left",
        minWidth: "50%",
        animation: _progress.progress + " 1s ease infinite normal none running"
    });
    var trackStyles = _extends({
        overflow: "hidden",
        position: "relative"
    }, styles.track);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        borderRadius: borderRadius,
        __css: trackStyles
    }, rest), /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(ProgressFilledTrack, {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        min: min,
        max: max,
        value: value,
        isIndeterminate: isIndeterminate,
        css: css,
        borderRadius: borderRadius
    }), children)));
};
exports.Progress = Progress;
if (_utils.__DEV__) Progress.displayName = "Progress";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./progress.utils":"3SttG"}],"5A5bE":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _radio = require("./radio");
Object.keys(_radio).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _radio[key]) return;
    exports[key] = _radio[key];
});
var _useRadio = require("./use-radio");
Object.keys(_useRadio).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useRadio[key]) return;
    exports[key] = _useRadio[key];
});
var _useRadioGroup = require("./use-radio-group");
Object.keys(_useRadioGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useRadioGroup[key]) return;
    exports[key] = _useRadioGroup[key];
});
var _radioGroup = require("./radio-group");
Object.keys(_radioGroup).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _radioGroup[key]) return;
    exports[key] = _radioGroup[key];
});

},{"./radio":"6KXdp","./use-radio":"6HXIO","./use-radio-group":"2tRz5","./radio-group":"6kk7l"}],"6KXdp":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Radio = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _radioGroup = require("./radio-group");
var _useRadio2 = require("./use-radio");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * Radio component is used in forms when a user needs to select a single value from
 * several options.
 *
 * @see Docs https://chakra-ui.com/docs/form/radio
 */ var Radio = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _props$name;
    var onChangeProp = props.onChange, valueProp = props.value;
    var group = _radioGroup.useRadioGroupContext();
    var styles = _system.useMultiStyleConfig("Radio", _extends({
    }, group, props));
    var _omitThemingProps = _system.omitThemingProps(props), _omitThemingProps$spa = _omitThemingProps.spacing, spacing = _omitThemingProps$spa === void 0 ? "0.5rem" : _omitThemingProps$spa, children = _omitThemingProps.children, isFullWidth = _omitThemingProps.isFullWidth, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "spacing",
        "children",
        "isFullWidth"
    ]);
    var isChecked = props.isChecked;
    if ((group == null ? void 0 : group.value) != null && valueProp != null) isChecked = group.value === valueProp;
    var onChange = onChangeProp;
    if (group != null && group.onChange && valueProp != null) onChange = _utils.callAll(group.onChange, onChangeProp);
    var name = (_props$name = props == null ? void 0 : props.name) != null ? _props$name : group == null ? void 0 : group.name;
    var _useRadio = _useRadio2.useRadio(_extends({
    }, rest, {
        isChecked: isChecked,
        onChange: onChange,
        name: name
    })), getInputProps = _useRadio.getInputProps, getCheckboxProps = _useRadio.getCheckboxProps, getLabelProps = _useRadio.getLabelProps, htmlProps = _useRadio.htmlProps;
    var _split = _utils.split(htmlProps, _system.layoutPropNames), layoutProps = _split[0], otherProps = _split[1];
    var checkboxProps = getCheckboxProps(otherProps);
    var inputProps = getInputProps({
    }, ref);
    var labelProps = getLabelProps();
    var rootStyles = _extends({
        width: isFullWidth ? "full" : undefined,
        display: "inline-flex",
        alignItems: "center",
        verticalAlign: "top"
    }, styles.container);
    var checkboxStyles = _extends({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0
    }, styles.control);
    var labelStyles = _extends({
        userSelect: "none",
        marginStart: spacing
    }, styles.label);
    return(/*#__PURE__*/ React.createElement(_system.chakra.label, _extends({
        className: "chakra-radio"
    }, layoutProps, {
        __css: rootStyles
    }), /*#__PURE__*/ React.createElement("input", _extends({
        className: "chakra-radio__input"
    }, inputProps)), /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        className: "chakra-radio__control"
    }, checkboxProps, {
        __css: checkboxStyles
    })), children && /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        className: "chakra-radio__label"
    }, labelProps, {
        __css: labelStyles
    }), children)));
});
exports.Radio = Radio;
if (_utils.__DEV__) Radio.displayName = "Radio";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./radio-group":"6kk7l","./use-radio":"6HXIO"}],"6kk7l":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.RadioGroup = exports.useRadioGroupContext = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useRadioGroup2 = require("./use-radio-group");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    name: "RadioGroupContext",
    strict: false
}), RadioGroupProvider = _createContext[0], useRadioGroupContext = _createContext[1];
exports.useRadioGroupContext = useRadioGroupContext;
/**
 * Used for multiple radios which are bound in one group,
 * and it indicates which option is selected.
 *
 * @see Docs https://chakra-ui.com/docs/form/radio
 */ var RadioGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var colorScheme = props.colorScheme, size = props.size, variant = props.variant, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "colorScheme",
        "size",
        "variant",
        "children",
        "className"
    ]);
    var _useRadioGroup = _useRadioGroup2.useRadioGroup(rest), value = _useRadioGroup.value, onChange = _useRadioGroup.onChange, getRootProps = _useRadioGroup.getRootProps, name = _useRadioGroup.name, htmlProps = _useRadioGroup.htmlProps;
    var group = React.useMemo(function() {
        return {
            name: name,
            size: size,
            onChange: onChange,
            colorScheme: colorScheme,
            value: value,
            variant: variant
        };
    }, [
        size,
        name,
        onChange,
        colorScheme,
        value,
        variant
    ]);
    var groupProps = getRootProps(htmlProps, ref);
    var _className = _utils.cx("chakra-radio-group", className);
    return(/*#__PURE__*/ React.createElement(RadioGroupProvider, {
        value: group
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, groupProps, {
        className: _className
    }), children)));
});
exports.RadioGroup = RadioGroup;
if (_utils.__DEV__) RadioGroup.displayName = "RadioGroup";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-radio-group":"2tRz5"}],"2tRz5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useRadioGroup = useRadioGroup;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _reactUtils = require("@chakra-ui/react-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook to manage a group of radio inputs
 */ function useRadioGroup(props) {
    if (props === void 0) props = {
    };
    var _props = props, onChangeProp = _props.onChange, valueProp = _props.value, defaultValue = _props.defaultValue, nameProp = _props.name, isNative = _props.isNative, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "onChange",
        "value",
        "defaultValue",
        "name",
        "isNative"
    ]);
    var _React$useState = React.useState(defaultValue || ""), valueState = _React$useState[0], setValue = _React$useState[1];
    var _useControllableProp = _hooks.useControllableProp(valueProp, valueState), isControlled = _useControllableProp[0], value = _useControllableProp[1];
    var ref = React.useRef(null);
    var focus = React.useCallback(function() {
        var rootNode = ref.current;
        if (!rootNode) return;
        var query = "input:not(:disabled):checked";
        var firstEnabledAndCheckedInput = rootNode.querySelector(query);
        if (firstEnabledAndCheckedInput) {
            firstEnabledAndCheckedInput.focus();
            return;
        }
        query = "input:not(:disabled)";
        var firstEnabledInput = rootNode.querySelector(query);
        firstEnabledInput == null || firstEnabledInput.focus();
    }, []);
    /**
   * All radio options must use the same name
   */ var fallbackName = _hooks.useId(undefined, "radio");
    var name = nameProp || fallbackName;
    var onChange = React.useCallback(function(eventOrValue) {
        var nextValue = _utils.isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
        if (!isControlled) setValue(nextValue);
        onChangeProp == null || onChangeProp(String(nextValue));
    }, [
        onChangeProp,
        isControlled
    ]);
    var getRootProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(forwardedRef, ref),
            role: "radiogroup"
        });
    }, []);
    var getRadioProps = React.useCallback(function(props1, ref1) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        var checkedKey = isNative ? "checked" : "isChecked";
        return _extends({
        }, props1, (_extends2 = {
            ref: ref1,
            name: name
        }, _extends2[checkedKey] = value != null ? props1.value === value : undefined, _extends2.onChange = onChange, _extends2["data-radiogroup"] = true, _extends2));
    }, [
        isNative,
        name,
        onChange,
        value
    ]);
    return {
        getRootProps: getRootProps,
        getRadioProps: getRadioProps,
        name: name,
        ref: ref,
        focus: focus,
        setValue: setValue,
        value: value,
        onChange: onChange,
        htmlProps: htmlProps
    };
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","react":"3f97z","@chakra-ui/react-utils":"5UBnZ"}],"6HXIO":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useRadio = useRadio;
var _formControl = require("@chakra-ui/form-control");
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var _react = require("react");
var _radioGroup = require("./radio-group");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useRadio(props) {
    if (props === void 0) props = {
    };
    var _props = props, defaultIsChecked = _props.defaultIsChecked, _props$defaultChecked = _props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked, isCheckedProp = _props.isChecked, isFocusable = _props.isFocusable, isDisabledProp = _props.isDisabled, isReadOnlyProp = _props.isReadOnly, isRequiredProp = _props.isRequired, onChange = _props.onChange, isInvalidProp = _props.isInvalid, name = _props.name, value = _props.value, idProp = _props.id, dataRadioGroup = _props["data-radiogroup"], htmlProps = _objectWithoutPropertiesLoose(_props, [
        "defaultIsChecked",
        "defaultChecked",
        "isChecked",
        "isFocusable",
        "isDisabled",
        "isReadOnly",
        "isRequired",
        "onChange",
        "isInvalid",
        "name",
        "value",
        "id",
        "data-radiogroup"
    ]);
    var uuid = _hooks.useId(undefined, "radio");
    var formControl = _formControl.useFormControlContext();
    var group = _radioGroup.useRadioGroupContext();
    var isWithinRadioGroup = !!group || !!dataRadioGroup;
    var isWithinFormControl = !!formControl;
    var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
    id = idProp != null ? idProp : id;
    var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
    var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
    var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
    var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
    var _useBoolean = _hooks.useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
    var _useBoolean2 = _hooks.useBoolean(), isHovered = _useBoolean2[0], setHovering = _useBoolean2[1];
    var _useBoolean3 = _hooks.useBoolean(), isActive = _useBoolean3[0], setActive = _useBoolean3[1];
    var ref = _react.useRef(null);
    var _useState = _react.useState(Boolean(defaultChecked)), isCheckedState = _useState[0], setChecked = _useState[1];
    var _useControllableProp = _hooks.useControllableProp(isCheckedProp, isCheckedState), isControlled = _useControllableProp[0], isChecked = _useControllableProp[1];
    _utils.warn({
        condition: !!defaultIsChecked,
        message: "The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior."
    });
    var handleChange = _react.useCallback(function(event) {
        if (isReadOnly || isDisabled) {
            event.preventDefault();
            return;
        }
        if (!isControlled) setChecked(event.target.checked);
        onChange == null || onChange(event);
    }, [
        isControlled,
        isDisabled,
        isReadOnly,
        onChange
    ]);
    var onKeyDown = _react.useCallback(function(event) {
        if (event.key === " ") setActive.on();
    }, [
        setActive
    ]);
    var onKeyUp = _react.useCallback(function(event) {
        if (event.key === " ") setActive.off();
    }, [
        setActive
    ]);
    var getCheckboxProps = _react.useCallback(function(props1, ref1) {
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        return _extends({
        }, props1, {
            ref: ref1,
            "data-active": _utils.dataAttr(isActive),
            "data-hover": _utils.dataAttr(isHovered),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(isInvalid),
            "data-checked": _utils.dataAttr(isChecked),
            "data-focus": _utils.dataAttr(isFocused),
            "data-readonly": _utils.dataAttr(isReadOnly),
            "aria-hidden": true,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, setActive.on),
            onMouseUp: _utils.callAllHandlers(props1.onMouseUp, setActive.off),
            onMouseEnter: _utils.callAllHandlers(props1.onMouseEnter, setHovering.on),
            onMouseLeave: _utils.callAllHandlers(props1.onMouseLeave, setHovering.off)
        });
    }, [
        isActive,
        isHovered,
        isDisabled,
        isInvalid,
        isChecked,
        isFocused,
        isReadOnly,
        setActive.on,
        setActive.off,
        setHovering.on,
        setHovering.off
    ]);
    var _ref = formControl != null ? formControl : {
    }, onFocus = _ref.onFocus, onBlur = _ref.onBlur;
    var getInputProps = _react.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        /**
     * This is a workaround for React Concurrent Mode issue.
     * @see Issue https://github.com/facebook/react/issues/18591.
     *
     * Remove once it's fixed.
     */ var focus = function focus1() {
            _utils.scheduleMicrotask(function() {
                setFocused.on();
            });
        };
        var trulyDisabled = isDisabled && !isFocusable;
        return _extends({
        }, props1, {
            id: id,
            ref: _reactUtils.mergeRefs(forwardedRef, ref),
            type: "radio",
            name: name,
            value: value,
            onChange: _utils.callAllHandlers(props1.onChange, handleChange),
            onBlur: _utils.callAllHandlers(onBlur, props1.onBlur, setFocused.off),
            onFocus: _utils.callAllHandlers(onFocus, props1.onFocus, focus),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onKeyUp: _utils.callAllHandlers(props1.onKeyUp, onKeyUp),
            checked: isChecked,
            disabled: trulyDisabled,
            readOnly: isReadOnly,
            required: isRequired,
            "aria-invalid": _utils.ariaAttr(isInvalid),
            "aria-disabled": _utils.ariaAttr(trulyDisabled),
            "aria-readonly": _utils.ariaAttr(isReadOnly),
            "aria-required": _utils.ariaAttr(isRequired),
            style: _visuallyHidden.visuallyHiddenStyle
        });
    }, [
        isDisabled,
        isFocusable,
        id,
        name,
        value,
        handleChange,
        onBlur,
        setFocused,
        onFocus,
        onKeyDown,
        onKeyUp,
        isChecked,
        isReadOnly,
        isRequired,
        isInvalid
    ]);
    var getLabelProps = function getLabelProps1(props1, ref1) {
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        return _extends({
        }, props1, {
            ref: ref1,
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, stop),
            onTouchStart: _utils.callAllHandlers(props1.onTouchStart, stop),
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-checked": _utils.dataAttr(isChecked),
            "data-invalid": _utils.dataAttr(isInvalid)
        });
    };
    return {
        state: {
            isInvalid: isInvalid,
            isFocused: isFocused,
            isChecked: isChecked,
            isActive: isActive,
            isHovered: isHovered,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired
        },
        getCheckboxProps: getCheckboxProps,
        getInputProps: getInputProps,
        getLabelProps: getLabelProps,
        htmlProps: htmlProps
    };
}
/**
 * Prevent `onBlur` being fired when the checkbox label is touched
 */ function stop(event) {
    event.preventDefault();
    event.stopPropagation();
}

},{"@chakra-ui/form-control":"1VzrL","@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","@chakra-ui/visually-hidden":"77YGo","react":"3f97z","./radio-group":"6kk7l"}],"7yprg":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _select = require("./select");
Object.keys(_select).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _select[key]) return;
    exports[key] = _select[key];
});

},{"./select":"1Y9Vk"}],"1Y9Vk":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.DefaultIcon = exports.Select = exports.SelectField = void 0;
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var SelectField = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var children = props.children, placeholder = props.placeholder, className = props.className, rest = _objectWithoutPropertiesLoose(props, [
        "children",
        "placeholder",
        "className"
    ]);
    var ownProps = _formControl.useFormControl(rest);
    return(/*#__PURE__*/ React.createElement(_system.chakra.select, _extends({
    }, ownProps, {
        ref: ref,
        className: _utils.cx("chakra-select", className)
    }), placeholder && /*#__PURE__*/ React.createElement("option", {
        value: ""
    }, placeholder), children));
});
exports.SelectField = SelectField;
if (_utils.__DEV__) SelectField.displayName = "SelectField";
/**
 * React component used to select one item from a list of options.
 */ var Select = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Select", props);
    var _omitThemingProps = _system.omitThemingProps(props), rootProps = _omitThemingProps.rootProps, placeholder = _omitThemingProps.placeholder, icon = _omitThemingProps.icon, color = _omitThemingProps.color, height = _omitThemingProps.height, h = _omitThemingProps.h, minH = _omitThemingProps.minH, minHeight = _omitThemingProps.minHeight, iconColor = _omitThemingProps.iconColor, iconSize = _omitThemingProps.iconSize, isFullWidth = _omitThemingProps.isFullWidth, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "rootProps",
        "placeholder",
        "icon",
        "color",
        "height",
        "h",
        "minH",
        "minHeight",
        "iconColor",
        "iconSize",
        "isFullWidth"
    ]);
    var _split = _utils.split(rest, _system.layoutPropNames), layoutProps = _split[0], otherProps = _split[1];
    var rootStyles = {
        width: "100%",
        height: "fit-content",
        position: "relative",
        color: color
    };
    var fieldStyles = _utils.mergeWith({
    }, styles.field, {
        paddingEnd: "2rem",
        _focus: {
            zIndex: "unset"
        }
    });
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: "chakra-select__wrapper",
        __css: rootStyles
    }, layoutProps, rootProps), /*#__PURE__*/ React.createElement(SelectField, _extends({
        ref: ref,
        height: h != null ? h : height,
        minH: minH != null ? minH : minHeight,
        placeholder: placeholder
    }, otherProps, {
        __css: fieldStyles
    }), props.children), /*#__PURE__*/ React.createElement(SelectIcon, _extends({
        "data-disabled": props.isDisabled
    }, (iconColor || color) && {
        color: iconColor || color
    }, {
        __css: styles.icon
    }, iconSize && {
        fontSize: iconSize
    }), icon)));
});
exports.Select = Select;
if (_utils.__DEV__) Select.displayName = "Select";
var DefaultIcon = function DefaultIcon1(props) {
    return(/*#__PURE__*/ React.createElement("svg", _extends({
        viewBox: "0 0 24 24"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
    })));
};
exports.DefaultIcon = DefaultIcon;
var IconWrapper = _system.chakra("div", {
    baseStyle: {
        position: "absolute",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none",
        top: "50%",
        transform: "translateY(-50%)"
    }
});
var SelectIcon = function SelectIcon1(props) {
    var _props$children = props.children, children = _props$children === void 0 ? /*#__PURE__*/ React.createElement(DefaultIcon, null) : _props$children, rest = _objectWithoutPropertiesLoose(props, [
        "children"
    ]);
    var clone = /*#__PURE__*/ React.cloneElement(children, {
        role: "presentation",
        className: "chakra-select__icon",
        focusable: false,
        "aria-hidden": true,
        // force icon to adhere to `IconWrapper` styles
        style: {
            width: "1em",
            height: "1em",
            color: "currentColor"
        }
    });
    return(/*#__PURE__*/ React.createElement(IconWrapper, _extends({
    }, rest, {
        className: "chakra-select__icon-wrapper"
    }), /*#__PURE__*/ React.isValidElement(children) ? clone : null));
};
if (_utils.__DEV__) SelectIcon.displayName = "SelectIcon";

},{"@chakra-ui/form-control":"1VzrL","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"69LeQ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _skeleton = require("./skeleton");
Object.keys(_skeleton).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _skeleton[key]) return;
    exports[key] = _skeleton[key];
});

},{"./skeleton":"01f7r"}],"01f7r":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.SkeletonCircle = exports.SkeletonText = exports.Skeleton = void 0;
var _mediaQuery = require("@chakra-ui/media-query");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var StyledSkeleton = _system.chakra("div", {
    baseStyle: {
        boxShadow: "none",
        backgroundClip: "padding-box",
        cursor: "default",
        color: "transparent",
        pointerEvents: "none",
        userSelect: "none",
        "&::before, &::after, *": {
            visibility: "hidden"
        }
    }
});
var fade = _system.keyframes({
    from: {
        opacity: 0
    },
    to: {
        opacity: 1
    }
});
var useIsFirstRender = function useIsFirstRender1() {
    var isFirstRender = React.useRef(true);
    React.useEffect(function() {
        isFirstRender.current = false;
    }, []);
    return isFirstRender.current;
};
var Skeleton = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Skeleton", props);
    var isFirstRender = useIsFirstRender();
    var _omitThemingProps = _system.omitThemingProps(props), startColor = _omitThemingProps.startColor, endColor = _omitThemingProps.endColor, isLoaded = _omitThemingProps.isLoaded, fadeDuration = _omitThemingProps.fadeDuration, speed = _omitThemingProps.speed, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "startColor",
        "endColor",
        "isLoaded",
        "fadeDuration",
        "speed",
        "className"
    ]);
    var _className = _utils.cx("chakra-skeleton", className);
    if (isLoaded) {
        var animation = isFirstRender ? "none" : fade + " " + fadeDuration + "s";
        return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
            ref: ref,
            className: _className,
            __css: {
                animation: animation
            }
        }, rest)));
    }
    return(/*#__PURE__*/ React.createElement(StyledSkeleton, _extends({
        ref: ref,
        className: _className
    }, rest, {
        __css: styles
    })));
});
exports.Skeleton = Skeleton;
Skeleton.defaultProps = {
    fadeDuration: 0.4,
    speed: 0.8
};
if (_utils.__DEV__) Skeleton.displayName = "Skeleton";
function range(count) {
    return Array(count).fill(1).map(function(_, index) {
        return index + 1;
    });
}
var defaultNoOfLines = 3;
var SkeletonText = function SkeletonText1(props) {
    var _props$noOfLines = props.noOfLines, noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, _props$skeletonHeight = props.skeletonHeight, skeletonHeight = _props$skeletonHeight === void 0 ? "0.5rem" : _props$skeletonHeight, className = props.className, startColor = props.startColor, endColor = props.endColor, isLoaded = props.isLoaded, fadeDuration = props.fadeDuration, speed = props.speed, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "noOfLines",
        "spacing",
        "skeletonHeight",
        "className",
        "startColor",
        "endColor",
        "isLoaded",
        "fadeDuration",
        "speed",
        "children"
    ]);
    var noOfLinesValue = _mediaQuery.useBreakpointValue(typeof noOfLines === "number" ? [
        noOfLines
    ] : noOfLines) || defaultNoOfLines;
    var numbers = range(noOfLinesValue);
    var getWidth = function getWidth1(index) {
        if (noOfLinesValue > 1) return index === numbers.length ? "80%" : "100%";
        return "100%";
    };
    var _className = _utils.cx("chakra-skeleton__group", className);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _className
    }, rest), numbers.map(function(number, index) {
        if (isLoaded && index > 0) // skip other lines
        return null;
        var sizeProps = isLoaded ? null : {
            mb: number === numbers.length ? "0" : spacing,
            width: getWidth(number),
            height: skeletonHeight
        };
        return(/*#__PURE__*/ React.createElement(Skeleton, _extends({
            key: numbers.length.toString() + number,
            startColor: startColor,
            endColor: endColor,
            isLoaded: isLoaded,
            fadeDuration: fadeDuration,
            speed: speed
        }, sizeProps), index === 0 ? children : undefined));
    })));
};
exports.SkeletonText = SkeletonText;
if (_utils.__DEV__) SkeletonText.displayName = "SkeletonText";
var SkeletonCircle = function SkeletonCircle1(_ref) {
    var _ref$size = _ref.size, size = _ref$size === void 0 ? "2rem" : _ref$size, rest = _objectWithoutPropertiesLoose(_ref, [
        "size"
    ]);
    return(/*#__PURE__*/ React.createElement(Skeleton, _extends({
        borderRadius: "full",
        boxSize: size
    }, rest)));
};
exports.SkeletonCircle = SkeletonCircle;
if (_utils.__DEV__) SkeletonCircle.displayName = "SkeletonCircle";

},{"@chakra-ui/media-query":"4NQXd","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"4jVyl":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _slider = require("./slider");
Object.keys(_slider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _slider[key]) return;
    exports[key] = _slider[key];
});
var _useSlider = require("./use-slider");
Object.keys(_useSlider).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useSlider[key]) return;
    exports[key] = _useSlider[key];
});

},{"./slider":"z9N9t","./use-slider":"1DswQ"}],"z9N9t":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.SliderMark = exports.SliderFilledTrack = exports.SliderTrack = exports.SliderThumb = exports.Slider = exports.useSliderContext = exports.SliderProvider = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
var _useSlider2 = require("./use-slider");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _createContext = _reactUtils.createContext({
    name: "SliderContext",
    errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />"
}), SliderProvider = _createContext[0], useSliderContext = _createContext[1];
exports.useSliderContext = useSliderContext;
exports.SliderProvider = SliderProvider;
/**
 * The Slider is used to allow users to make selections from a range of values.
 * It provides context and functionality for all slider components
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider
 */ var Slider = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Slider", props);
    var ownProps = _system.omitThemingProps(props);
    var _useSlider = _useSlider2.useSlider(ownProps), getInputProps = _useSlider.getInputProps, getRootProps = _useSlider.getRootProps, context = _objectWithoutPropertiesLoose(_useSlider, [
        "getInputProps",
        "getRootProps"
    ]);
    var rootProps = getRootProps();
    var inputProps = getInputProps({
    }, ref);
    var rootStyles = _extends({
        display: "inline-block",
        position: "relative",
        cursor: "pointer"
    }, styles.container);
    return(/*#__PURE__*/ React.createElement(SliderProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, rootProps, {
        className: "chakra-slider",
        __css: rootStyles
    }), props.children, /*#__PURE__*/ React.createElement("input", inputProps)))));
});
exports.Slider = Slider;
Slider.defaultProps = {
    orientation: "horizontal"
};
if (_utils.__DEV__) Slider.displayName = "Slider";
/**
 * Slider component that acts as the handle used to select predefined
 * values by dragging its handle along the track
 */ var SliderThumb = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useSliderContext = useSliderContext(), getThumbProps = _useSliderContext.getThumbProps;
    var styles = _system.useStyles();
    var thumbStyles = _extends({
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        outline: 0
    }, styles.thumb);
    var thumbProps = getThumbProps(props, ref);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, thumbProps, {
        className: _utils.cx("chakra-slider__thumb", props.className),
        __css: thumbStyles
    })));
});
exports.SliderThumb = SliderThumb;
if (_utils.__DEV__) SliderThumb.displayName = "SliderThumb";
var SliderTrack = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useSliderContext2 = useSliderContext(), getTrackProps = _useSliderContext2.getTrackProps;
    var styles = _system.useStyles();
    var trackStyles = _extends({
        overflow: "hidden"
    }, styles.track);
    var trackProps = getTrackProps(props, ref);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, trackProps, {
        className: _utils.cx("chakra-slider__track", props.className),
        __css: trackStyles
    })));
});
exports.SliderTrack = SliderTrack;
if (_utils.__DEV__) SliderTrack.displayName = "SliderTrack";
var SliderFilledTrack = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useSliderContext3 = useSliderContext(), getInnerTrackProps = _useSliderContext3.getInnerTrackProps;
    var styles = _system.useStyles();
    var trackStyles = _extends({
        width: "inherit",
        height: "inherit"
    }, styles.filledTrack);
    var trackProps = getInnerTrackProps(props, ref);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, trackProps, {
        className: "chakra-slider__filled-track",
        __css: trackStyles
    })));
});
exports.SliderFilledTrack = SliderFilledTrack;
if (_utils.__DEV__) SliderFilledTrack.displayName = "SliderFilledTrack";
/**
 * SliderMark is used to provide names for specific Slider
 * values by defining labels or markers along the track.
 *
 * @see Docs https://chakra-ui.com/docs/components/slider
 */ var SliderMark = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var _useSliderContext4 = useSliderContext(), getMarkerProps = _useSliderContext4.getMarkerProps;
    var markProps = getMarkerProps(props, ref);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, markProps, {
        className: _utils.cx("chakra-slider__marker", props.className)
    })));
});
exports.SliderMark = SliderMark;
if (_utils.__DEV__) SliderMark.displayName = "SliderMark";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z","./use-slider":"1DswQ"}],"1DswQ":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useSlider = useSlider;
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var _react = require("react");
var _sliderUtils = require("./slider-utils");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook that implements an accessible range slider.
 *
 * It is an alternative to `<input type="range" />`, and returns
 * prop getters for the component parts
 *
 * @see Docs     https://chakra-ui.com/docs/form/slider
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider
 */ function useSlider(props) {
    var _getAriaValueText;
    var _props$min = props.min, min = _props$min === void 0 ? 0 : _props$min, _props$max = props.max, max = _props$max === void 0 ? 100 : _props$max, onChange = props.onChange, valueProp = props.value, defaultValue = props.defaultValue, isReversed = props.isReversed, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, idProp = props.id, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, onChangeStartProp = props.onChangeStart, onChangeEndProp = props.onChangeEnd, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, getAriaValueTextProp = props.getAriaValueText, ariaValueText = props["aria-valuetext"], ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], name = props.name, _props$focusThumbOnCh = props.focusThumbOnChange, focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh, htmlProps = _objectWithoutPropertiesLoose(props, [
        "min",
        "max",
        "onChange",
        "value",
        "defaultValue",
        "isReversed",
        "orientation",
        "id",
        "isDisabled",
        "isReadOnly",
        "onChangeStart",
        "onChangeEnd",
        "step",
        "getAriaValueText",
        "aria-valuetext",
        "aria-label",
        "aria-labelledby",
        "name",
        "focusThumbOnChange"
    ]);
    var onChangeStart = _hooks.useCallbackRef(onChangeStartProp);
    var onChangeEnd = _hooks.useCallbackRef(onChangeEndProp);
    var getAriaValueText = _hooks.useCallbackRef(getAriaValueTextProp);
    /**
   * Enable the slider handle controlled and uncontrolled scenarios
   */ var _useControllableState = _hooks.useControllableState({
        value: valueProp,
        defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),
        onChange: onChange
    }), computedValue = _useControllableState[0], setValue = _useControllableState[1];
    var _useBoolean = _hooks.useBoolean(), isDragging = _useBoolean[0], setDragging = _useBoolean[1];
    var prevIsDragging = _hooks.usePrevious(isDragging);
    var _useBoolean2 = _hooks.useBoolean(), isFocused = _useBoolean2[0], setFocused = _useBoolean2[1];
    var eventSourceRef = _react.useRef(null);
    var isInteractive = !(isDisabled || isReadOnly);
    /**
   * Constrain the value because it can't be less than min
   * or greater than max
   */ var value = _utils.clampValue(computedValue, min, max);
    var valueRef = _hooks.useLatestRef(value);
    var prevRef = _react.useRef(valueRef.current);
    var reversedValue = max - value + min;
    var trackValue = isReversed ? reversedValue : value;
    var trackPercent = _utils.valueToPercent(trackValue, min, max);
    var isVertical = orientation === "vertical";
    /**
   * Let's keep a reference to the slider track and thumb
   */ var trackRef = _react.useRef(null);
    var thumbRef = _react.useRef(null);
    var rootRef = _react.useRef(null);
    /**
   * Generate unique ids for component parts
   */ var _useIds = _hooks.useIds(idProp, "slider-thumb", "slider-track"), thumbId = _useIds[0], trackId = _useIds[1];
    /**
   * Get relative value of slider from the event by tracking
   * how far you clicked within the track to determine the value
   *
   * @todo - Refactor this later on to use info from pan session
   */ var getValueFromPointer = _react.useCallback(function(event) {
        var _event$touches$, _event$touches;
        if (!trackRef.current) return;
        eventSourceRef.current = "pointer";
        var trackRect = _utils.getBox(trackRef.current).borderBox;
        var _ref = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event, clientX = _ref.clientX, clientY = _ref.clientY;
        var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
        var length = isVertical ? trackRect.height : trackRect.width;
        var percent = diff / length;
        if (isReversed) percent = 1 - percent;
        var nextValue = _utils.percentToValue(percent, min, max);
        if (step) nextValue = parseFloat(_utils.roundValueToStep(nextValue, min, step));
        nextValue = _utils.clampValue(nextValue, min, max);
        return nextValue;
    }, [
        isVertical,
        isReversed,
        max,
        min,
        step
    ]);
    var tenSteps = (max - min) / 10;
    var oneStep = step || (max - min) / 100;
    var constrain = _react.useCallback(function(value1) {
        if (!isInteractive) return;
        value1 = parseFloat(_utils.roundValueToStep(value1, min, oneStep));
        value1 = _utils.clampValue(value1, min, max);
        setValue(value1);
    }, [
        oneStep,
        max,
        min,
        setValue,
        isInteractive
    ]);
    var actions = _react.useMemo(function() {
        return {
            stepUp: function stepUp(step1) {
                if (step1 === void 0) step1 = oneStep;
                var next = isReversed ? value - step1 : value + step1;
                constrain(next);
            },
            stepDown: function stepDown(step1) {
                if (step1 === void 0) step1 = oneStep;
                var next = isReversed ? value + step1 : value - step1;
                constrain(next);
            },
            reset: function reset() {
                return constrain(defaultValue || 0);
            },
            stepTo: function stepTo(value1) {
                return constrain(value1);
            }
        };
    }, [
        constrain,
        isReversed,
        value,
        oneStep,
        defaultValue
    ]);
    /**
   * Keyboard interaction to ensure users can operate
   * the slider using only their keyboard.
   */ var onKeyDown = _react.useCallback(function(event) {
        var eventKey = _utils.normalizeEventKey(event);
        var keyMap = {
            ArrowRight: function ArrowRight() {
                return actions.stepUp();
            },
            ArrowUp: function ArrowUp() {
                return actions.stepUp();
            },
            ArrowLeft: function ArrowLeft() {
                return actions.stepDown();
            },
            ArrowDown: function ArrowDown() {
                return actions.stepDown();
            },
            PageUp: function PageUp() {
                return actions.stepUp(tenSteps);
            },
            PageDown: function PageDown() {
                return actions.stepDown(tenSteps);
            },
            Home: function Home() {
                return constrain(min);
            },
            End: function End() {
                return constrain(max);
            }
        };
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            event.stopPropagation();
            action(event);
            eventSourceRef.current = "keyboard";
        }
    }, [
        actions,
        constrain,
        max,
        min,
        tenSteps
    ]);
    /**
   * ARIA (Optional): To define a human readable representation of the value,
   * we allow users pass aria-valuetext.
   */ var valueText = (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _getAriaValueText : ariaValueText;
    /**
   * Measure the dimensions of the thumb so
   * we can center it within the track properly
   */ var thumbBoxModel = _hooks.useDimensions(thumbRef);
    /**
   * Compute styles for all component parts.
   */ var _useMemo = _react.useMemo(function() {
        var _thumbBoxModel$border;
        var thumbRect = (_thumbBoxModel$border = thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox) != null ? _thumbBoxModel$border : {
            width: 0,
            height: 0
        };
        return _sliderUtils.getPartsStyle({
            isReversed: isReversed,
            orientation: orientation,
            thumbRect: thumbRect,
            trackPercent: trackPercent
        });
    }, [
        isReversed,
        orientation,
        thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox,
        trackPercent
    ]), thumbStyle = _useMemo.thumbStyle, rootStyle = _useMemo.rootStyle, trackStyle = _useMemo.trackStyle, innerTrackStyle = _useMemo.innerTrackStyle;
    var focusThumb = _react.useCallback(function() {
        if (thumbRef.current && focusThumbOnChange) setTimeout(function() {
            return _utils.focus(thumbRef.current);
        });
    }, [
        focusThumbOnChange
    ]);
    _hooks.useUpdateEffect(function() {
        focusThumb();
        if (eventSourceRef.current === "keyboard") onChangeEndProp == null || onChangeEndProp(valueRef.current);
    }, [
        value,
        onChangeEndProp
    ]);
    var setValueFromPointer = function setValueFromPointer1(event) {
        var nextValue = getValueFromPointer(event);
        if (nextValue != null && nextValue !== valueRef.current) setValue(nextValue);
    };
    _hooks.usePanGesture(rootRef, {
        onPanSessionStart: function onPanSessionStart(event) {
            if (!isInteractive) return;
            setValueFromPointer(event);
        },
        onPanSessionEnd: function onPanSessionEnd() {
            if (!isInteractive) return;
            if (!prevIsDragging && prevRef.current !== valueRef.current) {
                onChangeEnd == null || onChangeEnd(valueRef.current);
                prevRef.current = valueRef.current;
            }
        },
        onPanStart: function onPanStart() {
            if (!isInteractive) return;
            setDragging.on();
            onChangeStart == null || onChangeStart(valueRef.current);
        },
        onPan: function onPan(event) {
            if (!isInteractive) return;
            setValueFromPointer(event);
        },
        onPanEnd: function onPanEnd() {
            if (!isInteractive) return;
            setDragging.off();
            onChangeEnd == null || onChangeEnd(valueRef.current);
        }
    });
    var getRootProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, htmlProps, {
            ref: _reactUtils.mergeRefs(ref, rootRef),
            tabIndex: -1,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            "data-focused": _utils.dataAttr(isFocused),
            style: _extends({
            }, props1.style, rootStyle)
        });
    }, [
        htmlProps,
        isDisabled,
        isFocused,
        rootStyle
    ]);
    var getTrackProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, trackRef),
            id: trackId,
            "data-disabled": _utils.dataAttr(isDisabled),
            style: _extends({
            }, props1.style, trackStyle)
        });
    }, [
        isDisabled,
        trackId,
        trackStyle
    ]);
    var getInnerTrackProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            style: _extends({
            }, props1.style, innerTrackStyle)
        });
    }, [
        innerTrackStyle
    ]);
    var getThumbProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, thumbRef),
            role: "slider",
            tabIndex: isInteractive ? 0 : undefined,
            id: thumbId,
            "data-active": _utils.dataAttr(isDragging),
            "aria-valuetext": valueText,
            "aria-valuemin": min,
            "aria-valuemax": max,
            "aria-valuenow": value,
            "aria-orientation": orientation,
            "aria-disabled": _utils.ariaAttr(isDisabled),
            "aria-readonly": _utils.ariaAttr(isReadOnly),
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabel ? undefined : ariaLabelledBy,
            style: _extends({
            }, props1.style, thumbStyle),
            onKeyDown: _utils.callAllHandlers(props1.onKeyDown, onKeyDown),
            onFocus: _utils.callAllHandlers(props1.onFocus, setFocused.on),
            onBlur: _utils.callAllHandlers(props1.onBlur, setFocused.off)
        });
    }, [
        ariaLabel,
        ariaLabelledBy,
        isDisabled,
        isDragging,
        isReadOnly,
        isInteractive,
        max,
        min,
        onKeyDown,
        orientation,
        setFocused.off,
        setFocused.on,
        thumbId,
        thumbStyle,
        value,
        valueText
    ]);
    var getMarkerProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        var isInRange = !(props1.value < min || props1.value > max);
        var isHighlighted = value >= props1.value;
        var markerPercent = _utils.valueToPercent(props1.value, min, max);
        var markerStyle = _extends({
            position: "absolute",
            pointerEvents: "none"
        }, orient({
            orientation: orientation,
            vertical: {
                bottom: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
            },
            horizontal: {
                left: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
            }
        }));
        return _extends({
        }, props1, {
            ref: ref,
            role: "presentation",
            "aria-hidden": true,
            "data-disabled": _utils.dataAttr(isDisabled),
            "data-invalid": _utils.dataAttr(!isInRange),
            "data-highlighted": _utils.dataAttr(isHighlighted),
            style: _extends({
            }, props1.style, markerStyle)
        });
    }, [
        isDisabled,
        isReversed,
        max,
        min,
        orientation,
        value
    ]);
    var getInputProps = _react.useCallback(function(props1, ref) {
        if (props1 === void 0) props1 = {
        };
        if (ref === void 0) ref = null;
        return _extends({
        }, props1, {
            ref: ref,
            type: "hidden",
            value: value,
            name: name
        });
    }, [
        name,
        value
    ]);
    return {
        state: {
            value: value,
            isFocused: isFocused,
            isDragging: isDragging
        },
        actions: actions,
        getRootProps: getRootProps,
        getTrackProps: getTrackProps,
        getInnerTrackProps: getInnerTrackProps,
        getThumbProps: getThumbProps,
        getMarkerProps: getMarkerProps,
        getInputProps: getInputProps
    };
}
function orient(options) {
    var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
    return orientation === "vertical" ? vertical : horizontal;
}
/**
 * The browser <input type="range" /> calculates
 * the default value of a slider by using mid-point
 * between the min and the max.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range
 */ function getDefaultValue(min, max) {
    return max < min ? min : min + (max - min) / 2;
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z","./slider-utils":"9Kh43"}],"9Kh43":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.getPartsStyle = getPartsStyle;
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function orient(options) {
    var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
    return orientation === "vertical" ? vertical : horizontal;
}
function getPartsStyle(options) {
    var orientation = options.orientation, trackPercent = options.trackPercent, thumbRect = options.thumbRect, isReversed = options.isReversed;
    var thumbStyle = _extends({
        position: "absolute",
        userSelect: "none",
        WebkitUserSelect: "none",
        MozUserSelect: "none",
        msUserSelect: "none",
        touchAction: "none"
    }, orient({
        orientation: orientation,
        vertical: {
            bottom: "calc(" + trackPercent + "% - " + thumbRect.height / 2 + "px)"
        },
        horizontal: {
            left: "calc(" + trackPercent + "% - " + thumbRect.width / 2 + "px)"
        }
    }));
    var rootStyle = _extends({
        position: "relative",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0,0,0,0)",
        userSelect: "none",
        outline: 0
    }, orient({
        orientation: orientation,
        vertical: {
            paddingLeft: thumbRect.width / 2,
            paddingRight: thumbRect.width / 2
        },
        horizontal: {
            paddingTop: thumbRect.height / 2,
            paddingBottom: thumbRect.height / 2
        }
    }));
    var trackStyle = _extends({
        position: "absolute"
    }, orient({
        orientation: orientation,
        vertical: {
            left: "50%",
            transform: "translateX(-50%)",
            height: "100%"
        },
        horizontal: {
            top: "50%",
            transform: "translateY(-50%)",
            width: "100%"
        }
    }));
    var innerTrackStyle = _extends({
    }, trackStyle, orient({
        orientation: orientation,
        vertical: isReversed ? {
            height: 100 - trackPercent + "%",
            top: 0
        } : {
            height: trackPercent + "%",
            bottom: 0
        },
        horizontal: isReversed ? {
            width: 100 - trackPercent + "%",
            right: 0
        } : {
            width: trackPercent + "%",
            left: 0
        }
    }));
    return {
        trackStyle: trackStyle,
        innerTrackStyle: innerTrackStyle,
        rootStyle: rootStyle,
        thumbStyle: thumbStyle
    };
}

},{}],"4nJd1":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _stat = require("./stat");
Object.keys(_stat).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _stat[key]) return;
    exports[key] = _stat[key];
});

},{"./stat":"6koY4"}],"6koY4":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.StatGroup = exports.Stat = exports.StatArrow = exports.StatUpArrow = exports.StatDownArrow = exports.StatNumber = exports.StatHelpText = exports.StatLabel = void 0;
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var StatLabel = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.dt, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-stat__label", props.className),
        __css: styles.label
    })));
});
exports.StatLabel = StatLabel;
if (_utils.__DEV__) StatLabel.displayName = "StatLabel";
var StatHelpText = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.dd, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-stat__help-text", props.className),
        __css: styles.helpText
    })));
});
exports.StatHelpText = StatHelpText;
if (_utils.__DEV__) StatHelpText.displayName = "StatHelpText";
var StatNumber = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.dd, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-stat__number", props.className),
        __css: _extends({
        }, styles.number, {
            fontFeatureSettings: "pnum",
            fontVariantNumeric: "proportional-nums"
        })
    })));
});
exports.StatNumber = StatNumber;
if (_utils.__DEV__) StatNumber.displayName = "StatNumber";
var StatDownArrow = function StatDownArrow1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        color: "red.400"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
    })));
};
exports.StatDownArrow = StatDownArrow;
if (_utils.__DEV__) StatDownArrow.displayName = "StatDownArrow";
var StatUpArrow = function StatUpArrow1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        color: "green.400"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
    })));
};
exports.StatUpArrow = StatUpArrow;
if (_utils.__DEV__) StatUpArrow.displayName = "StatUpArrow";
var StatArrow = function StatArrow1(props) {
    var type = props.type, ariaLabel = props["aria-label"], rest = _objectWithoutPropertiesLoose(props, [
        "type",
        "aria-label"
    ]);
    var styles = _system.useStyles();
    var IconComponent = type === "increase" ? StatUpArrow : StatDownArrow;
    var defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
    var label = ariaLabel || defaultAriaLabel;
    return(/*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(_visuallyHidden.VisuallyHidden, null, label), /*#__PURE__*/ React.createElement(IconComponent, _extends({
        "aria-hidden": true
    }, rest, {
        __css: styles.icon
    }))));
};
exports.StatArrow = StatArrow;
if (_utils.__DEV__) StatArrow.displayName = "StatArrow";
var Stat = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Stat", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "children"
    ]);
    return(/*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _utils.cx("chakra-stat", className),
        ref: ref,
        position: "relative",
        flex: "1 1 0%"
    }, rest), /*#__PURE__*/ React.createElement("dl", null, children))));
});
exports.Stat = Stat;
if (_utils.__DEV__) Stat.displayName = "Stat";
var StatGroup = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, props, {
        ref: ref,
        role: "group",
        className: _utils.cx("chakra-stat__group", props.className),
        __css: {
            display: "flex",
            flexWrap: "wrap",
            justifyContent: "space-around",
            alignItems: "flex-start"
        }
    })));
});
exports.StatGroup = StatGroup;
if (_utils.__DEV__) StatGroup.displayName = "StatGroup";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/visually-hidden":"77YGo","react":"3f97z"}],"64AhU":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _switch = require("./switch");
Object.keys(_switch).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _switch[key]) return;
    exports[key] = _switch[key];
});

},{"./switch":"6hLzy"}],"6hLzy":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Switch = void 0;
var _checkbox = require("@chakra-ui/checkbox");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var Switch = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Switch", props);
    var _omitThemingProps = _system.omitThemingProps(props), _omitThemingProps$spa = _omitThemingProps.spacing, spacing = _omitThemingProps$spa === void 0 ? "0.5rem" : _omitThemingProps$spa, children = _omitThemingProps.children, ownProps = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "spacing",
        "children"
    ]);
    var _useCheckbox = _checkbox.useCheckbox(ownProps), state = _useCheckbox.state, getInputProps = _useCheckbox.getInputProps, getCheckboxProps = _useCheckbox.getCheckboxProps, getRootProps = _useCheckbox.getRootProps, getLabelProps = _useCheckbox.getLabelProps;
    var containerStyles = React.useMemo(function() {
        return _extends({
            display: "inline-block",
            verticalAlign: "middle",
            lineHeight: "normal"
        }, styles.container);
    }, [
        styles.container
    ]);
    var trackStyles = React.useMemo(function() {
        return _extends({
            display: "inline-flex",
            flexShrink: 0,
            justifyContent: "flex-start",
            boxSizing: "content-box",
            cursor: "pointer"
        }, styles.track);
    }, [
        styles.track
    ]);
    var labelStyles = React.useMemo(function() {
        return _extends({
            userSelect: "none",
            marginStart: spacing
        }, styles.label);
    }, [
        spacing,
        styles.label
    ]);
    return(/*#__PURE__*/ React.createElement(_system.chakra.label, _extends({
    }, getRootProps(), {
        className: _utils.cx("chakra-switch", props.className),
        __css: containerStyles
    }), /*#__PURE__*/ React.createElement("input", _extends({
        className: "chakra-switch__input"
    }, getInputProps({
    }, ref))), /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
    }, getCheckboxProps(), {
        className: "chakra-switch__track",
        __css: trackStyles
    }), /*#__PURE__*/ React.createElement(_system.chakra.span, {
        __css: styles.thumb,
        className: "chakra-switch__thumb",
        "data-checked": _utils.dataAttr(state.isChecked),
        "data-hover": _utils.dataAttr(state.isHovered)
    })), children && /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        className: "chakra-switch__label"
    }, getLabelProps(), {
        __css: labelStyles
    }), children)));
});
exports.Switch = Switch;
if (_utils.__DEV__) Switch.displayName = "Switch";

},{"@chakra-ui/checkbox":"4bxfc","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"3sBL0":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _tabs = require("./tabs");
Object.keys(_tabs).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tabs[key]) return;
    exports[key] = _tabs[key];
});
var _useTabs = require("./use-tabs");
Object.keys(_useTabs).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useTabs[key]) return;
    exports[key] = _useTabs[key];
});

},{"./tabs":"yV2KG","./use-tabs":"3FvqK"}],"yV2KG":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.TabIndicator = exports.TabPanels = exports.TabPanel = exports.TabList = exports.Tab = exports.Tabs = void 0;
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _useTabs2 = require("./use-tabs");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Tabs
 *
 * Provides context and logic for all tabs components. It doesn't render
 * any DOM node.
 */ var Tabs = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Tabs", props);
    var _omitThemingProps = _system.omitThemingProps(props), children = _omitThemingProps.children, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "children",
        "className"
    ]);
    var _useTabs = _useTabs2.useTabs(rest), htmlProps = _useTabs.htmlProps, descendants = _useTabs.descendants, ctx = _objectWithoutPropertiesLoose(_useTabs, [
        "htmlProps",
        "descendants"
    ]);
    var context = React.useMemo(function() {
        return ctx;
    }, [
        ctx
    ]);
    var rootProps = _utils.omit(htmlProps, [
        "isFitted"
    ]);
    return(/*#__PURE__*/ React.createElement(_useTabs2.TabsDescendantsProvider, {
        value: descendants
    }, /*#__PURE__*/ React.createElement(_useTabs2.TabsProvider, {
        value: context
    }, /*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        className: _utils.cx("chakra-tabs", className),
        ref: ref
    }, rootProps, {
        __css: styles.root
    }), children)))));
});
exports.Tabs = Tabs;
if (_utils.__DEV__) Tabs.displayName = "Tabs";
/**
 * Tab button used to activate a specific tab panel. It renders a `button`,
 * and is responsible for automatic and manual selection modes.
 */ var Tab = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    var tabProps = _useTabs2.useTab(_extends({
    }, props, {
        ref: ref
    }));
    var tabStyles = _extends({
        outline: "0",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
    }, styles.tab);
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
    }, tabProps, {
        className: _utils.cx("chakra-tabs__tab", props.className),
        __css: tabStyles
    })));
});
exports.Tab = Tab;
if (_utils.__DEV__) Tab.displayName = "Tab";
/**
 * TabList is used to manage a list of tab buttons. It renders a `div` by default,
 * and is responsible the keyboard interaction between tabs.
 */ var TabList = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var tablistProps = _useTabs2.useTabList(_extends({
    }, props, {
        ref: ref
    }));
    var styles = _system.useStyles();
    var tablistStyles = _extends({
        display: "flex"
    }, styles.tablist);
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, tablistProps, {
        className: _utils.cx("chakra-tabs__tablist", props.className),
        __css: tablistStyles
    })));
});
exports.TabList = TabList;
if (_utils.__DEV__) TabList.displayName = "TabList";
/**
 * TabPanel
 * Used to render the content for a specific tab.
 */ var TabPanel = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var panelProps = _useTabs2.useTabPanel(_extends({
    }, props, {
        ref: ref
    }));
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        outline: "0"
    }, panelProps, {
        className: _utils.cx("chakra-tabs__tab-panel", props.className),
        __css: styles.tabpanel
    })));
});
exports.TabPanel = TabPanel;
if (_utils.__DEV__) TabPanel.displayName = "TabPanel";
/**
 * TabPanel
 *
 * Used to manage the rendering of multiple tab panels. It uses
 * `cloneElement` to hide/show tab panels.
 *
 * It renders a `div` by default.
 */ var TabPanels = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var panelsProps = _useTabs2.useTabPanels(props);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, panelsProps, {
        width: "100%",
        ref: ref,
        className: _utils.cx("chakra-tabs__tab-panels", props.className),
        __css: styles.tabpanels
    })));
});
exports.TabPanels = TabPanels;
if (_utils.__DEV__) TabPanels.displayName = "TabPanels";
/**
 * TabIndicator
 *
 * Used to render an active tab indicator that animates between
 * selected tabs.
 */ var TabIndicator = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var indicatorStyle = _useTabs2.useTabIndicator();
    var style = _extends({
    }, props.style, indicatorStyle);
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
        ref: ref
    }, props, {
        className: _utils.cx("chakra-tabs__tab-indicator", props.className),
        style: style,
        __css: styles.indicator
    })));
});
exports.TabIndicator = TabIndicator;
if (_utils.__DEV__) TabIndicator.displayName = "TabIndicator";

},{"@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z","./use-tabs":"3FvqK"}],"3FvqK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useTabs = useTabs;
exports.useTabList = useTabList;
exports.useTab = useTab;
exports.useTabPanels = useTabPanels;
exports.useTabPanel = useTabPanel;
exports.useTabIndicator = useTabIndicator;
exports.useTabsContext = exports.TabsProvider = exports.useTabsDescendant = exports.useTabsDescendants = exports.useTabsDescendantsContext = exports.TabsDescendantsProvider = void 0;
var _clickable = require("@chakra-ui/clickable");
var _descendant = require("@chakra-ui/descendant");
var _hooks = require("@chakra-ui/hooks");
var _reactUtils = require("@chakra-ui/react-utils");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/* -------------------------------------------------------------------------------------------------
 * Create context to track descendants and their indices
 * -----------------------------------------------------------------------------------------------*/ var _createDescendantCont = _descendant.createDescendantContext(), TabsDescendantsProvider = _createDescendantCont[0], useTabsDescendantsContext = _createDescendantCont[1], useTabsDescendants = _createDescendantCont[2], useTabsDescendant = _createDescendantCont[3];
/* -------------------------------------------------------------------------------------------------
 * useTabs - The root react hook that manages all tab items
 * -----------------------------------------------------------------------------------------------*/ exports.useTabsDescendant = useTabsDescendant;
exports.useTabsDescendants = useTabsDescendants;
exports.useTabsDescendantsContext = useTabsDescendantsContext;
exports.TabsDescendantsProvider = TabsDescendantsProvider;
/**
 * Tabs hooks that provides all the states, and accessibility
 * helpers to keep all things working properly.
 *
 * Its returned object will be passed unto a Context Provider
 * so all child components can read from it.
 * There is no document link yet
 * @see Docs https://chakra-ui.com/docs/components/useTabs
 */ function useTabs(props) {
    var defaultIndex = props.defaultIndex, onChange = props.onChange, index = props.index, isManual = props.isManual, isLazy = props.isLazy, _props$lazyBehavior = props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, htmlProps = _objectWithoutPropertiesLoose(props, [
        "defaultIndex",
        "onChange",
        "index",
        "isManual",
        "isLazy",
        "lazyBehavior",
        "orientation",
        "direction"
    ]);
    /**
   * We use this to keep track of the index of the focused tab.
   *
   * Tabs can be automatically activated, this means selection follows focus.
   * When we navigate with the arrow keys, we move focus and selection to next/prev tab
   *
   * Tabs can also be manually activated, this means selection does not follow focus.
   * When we navigate with the arrow keys, we only move focus NOT selection. The user
   * will need not manually activate the tab using `Enter` or `Space`.
   *
   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`
   */ var _React$useState = React.useState(defaultIndex != null ? defaultIndex : 0), focusedIndex = _React$useState[0], setFocusedIndex = _React$useState[1];
    var _useControllableState = _hooks.useControllableState({
        defaultValue: defaultIndex != null ? defaultIndex : 0,
        value: index,
        onChange: onChange
    }), selectedIndex = _useControllableState[0], setSelectedIndex = _useControllableState[1];
    /**
   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)
   */ React.useEffect(function() {
        if (index != null) setFocusedIndex(index);
    }, [
        index
    ]);
    /**
   * Think of `useDescendants` as a register for the tab nodes.
   */ var descendants = useTabsDescendants();
    /**
   * Generate a unique id or use user-provided id for the tabs widget
   */ var id = _hooks.useId(props.id, "tabs");
    return {
        id: id,
        selectedIndex: selectedIndex,
        focusedIndex: focusedIndex,
        setSelectedIndex: setSelectedIndex,
        setFocusedIndex: setFocusedIndex,
        isManual: isManual,
        isLazy: isLazy,
        lazyBehavior: lazyBehavior,
        orientation: orientation,
        descendants: descendants,
        direction: direction,
        htmlProps: htmlProps
    };
}
var _createContext = _reactUtils.createContext({
    name: "TabsContext",
    errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
}), TabsProvider = _createContext[0], useTabsContext = _createContext[1];
exports.useTabsContext = useTabsContext;
exports.TabsProvider = TabsProvider;
/**
 * Tabs hook to manage multiple tab buttons,
 * and ensures only one tab is selected per time.
 *
 * @param props props object for the tablist
 */ function useTabList(props) {
    var _useTabsContext = useTabsContext(), focusedIndex = _useTabsContext.focusedIndex, orientation = _useTabsContext.orientation, direction = _useTabsContext.direction;
    var descendants = useTabsDescendantsContext();
    var onKeyDown = React.useCallback(function(event) {
        var _keyMap;
        var nextTab = function nextTab1() {
            var next = descendants.nextEnabled(focusedIndex);
            if (next) _utils.focus(next.node);
        };
        var prevTab = function prevTab1() {
            var prev = descendants.prevEnabled(focusedIndex);
            if (prev) _utils.focus(prev.node);
        };
        var firstTab = function firstTab1() {
            var first = descendants.firstEnabled();
            if (first) _utils.focus(first.node);
        };
        var lastTab = function lastTab1() {
            var last = descendants.lastEnabled();
            if (last) _utils.focus(last.node);
        };
        var isHorizontal = orientation === "horizontal";
        var isVertical = orientation === "vertical";
        var eventKey = _utils.normalizeEventKey(event);
        var ArrowStart = direction === "ltr" ? "ArrowLeft" : "ArrowRight";
        var ArrowEnd = direction === "ltr" ? "ArrowRight" : "ArrowLeft";
        var keyMap = (_keyMap = {
        }, _keyMap[ArrowStart] = function() {
            return isHorizontal && prevTab();
        }, _keyMap[ArrowEnd] = function() {
            return isHorizontal && nextTab();
        }, _keyMap.ArrowDown = function ArrowDown() {
            return isVertical && nextTab();
        }, _keyMap.ArrowUp = function ArrowUp() {
            return isVertical && prevTab();
        }, _keyMap.Home = firstTab, _keyMap.End = lastTab, _keyMap);
        var action = keyMap[eventKey];
        if (action) {
            event.preventDefault();
            action(event);
        }
    }, [
        descendants,
        focusedIndex,
        orientation,
        direction
    ]);
    return _extends({
    }, props, {
        role: "tablist",
        "aria-orientation": orientation,
        onKeyDown: _utils.callAllHandlers(props.onKeyDown, onKeyDown)
    });
}
/**
 * Tabs hook to manage each tab button.
 *
 * A tab can be disabled and focusable, or both,
 * hence the use of `useClickable` to handle this scenario
 */ function useTab(props) {
    var isDisabled = props.isDisabled, isFocusable = props.isFocusable, htmlProps = _objectWithoutPropertiesLoose(props, [
        "isDisabled",
        "isFocusable"
    ]);
    var _useTabsContext2 = useTabsContext(), setSelectedIndex = _useTabsContext2.setSelectedIndex, isManual = _useTabsContext2.isManual, id = _useTabsContext2.id, setFocusedIndex = _useTabsContext2.setFocusedIndex, selectedIndex = _useTabsContext2.selectedIndex;
    var _useTabsDescendant = useTabsDescendant({
        disabled: isDisabled && !isFocusable
    }), index = _useTabsDescendant.index, register = _useTabsDescendant.register;
    var isSelected = index === selectedIndex;
    var onClick = function onClick1() {
        setSelectedIndex(index);
    };
    var onFocus = function onFocus1() {
        setFocusedIndex(index);
        var isDisabledButFocusable = isDisabled && isFocusable;
        var shouldSelect = !isManual && !isDisabledButFocusable;
        if (shouldSelect) setSelectedIndex(index);
    };
    var clickableProps = _clickable.useClickable(_extends({
    }, htmlProps, {
        ref: _reactUtils.mergeRefs(register, props.ref),
        isDisabled: isDisabled,
        isFocusable: isFocusable,
        onClick: _utils.callAllHandlers(props.onClick, onClick)
    }));
    var type = "button";
    return _extends({
    }, clickableProps, {
        id: makeTabId(id, index),
        role: "tab",
        tabIndex: isSelected ? 0 : -1,
        type: type,
        "aria-selected": isSelected,
        "aria-controls": makeTabPanelId(id, index),
        onFocus: isDisabled ? undefined : _utils.callAllHandlers(props.onFocus, onFocus)
    });
}
/**
 * Tabs hook for managing the visibility of multiple tab panels.
 *
 * Since only one panel can be show at a time, we use `cloneElement`
 * to inject `selected` panel to each TabPanel.
 *
 * It returns a cloned version of its children with
 * all functionality included.
 */ function useTabPanels(props) {
    var context = useTabsContext();
    var id = context.id, selectedIndex = context.selectedIndex;
    var validChildren = _reactUtils.getValidChildren(props.children);
    var children = validChildren.map(function(child, index) {
        return(/*#__PURE__*/ React.cloneElement(child, {
            isSelected: index === selectedIndex,
            id: makeTabPanelId(id, index),
            // Refers to the associated tab element, and also provides an accessible name to the tab panel.
            "aria-labelledby": makeTabId(id, index)
        }));
    });
    return _extends({
    }, props, {
        children: children
    });
}
/**
 * Tabs hook for managing the visible/hidden states
 * of the tab panel.
 *
 * @param props props object for the tab panel
 */ function useTabPanel(props) {
    var isSelected = props.isSelected, id = props.id, children = props.children, htmlProps = _objectWithoutPropertiesLoose(props, [
        "isSelected",
        "id",
        "children"
    ]);
    var _useTabsContext3 = useTabsContext(), isLazy = _useTabsContext3.isLazy, lazyBehavior = _useTabsContext3.lazyBehavior;
    var hasBeenSelected = React.useRef(false);
    if (isSelected) hasBeenSelected.current = true;
    var shouldRenderChildren = _utils.determineLazyBehavior({
        hasBeenSelected: hasBeenSelected.current,
        isSelected: isSelected,
        isLazy: isLazy,
        lazyBehavior: lazyBehavior
    });
    return _extends({
        // Puts the tabpanel in the page `Tab` sequence.
        tabIndex: 0
    }, htmlProps, {
        children: shouldRenderChildren ? children : null,
        role: "tabpanel",
        hidden: !isSelected,
        id: id
    });
}
/**
 * Tabs hook to show an animated indicators that
 * follows the active tab.
 *
 * The way we do it is by measuring the DOM Rect (or dimensions)
 * of the active tab, and return that as CSS style for
 * the indicator.
 */ function useTabIndicator() {
    var context = useTabsContext();
    var descendants = useTabsDescendantsContext();
    var selectedIndex = context.selectedIndex, orientation = context.orientation;
    var isHorizontal = orientation === "horizontal";
    var isVertical = orientation === "vertical"; // Get the clientRect of the selected tab
    var _React$useState2 = React.useState(function() {
        if (isHorizontal) return {
            left: 0,
            width: 0
        };
        if (isVertical) return {
            top: 0,
            height: 0
        };
        return undefined;
    }), rect = _React$useState2[0], setRect = _React$useState2[1];
    var _React$useState3 = React.useState(false), hasMeasured = _React$useState3[0], setHasMeasured = _React$useState3[1]; // Update the selected tab rect when the selectedIndex changes
    _hooks.useSafeLayoutEffect(function() {
        var _tab$node;
        if (_utils.isUndefined(selectedIndex)) return undefined;
        var tab = descendants.item(selectedIndex);
        var tabRect = tab == null ? void 0 : (_tab$node = tab.node) == null ? void 0 : _tab$node.getBoundingClientRect(); // Horizontal Tab: Calculate width and left distance
        if (isHorizontal && tabRect) {
            var left = tabRect.left, width = tabRect.width;
            setRect({
                left: left,
                width: width
            });
        } // Vertical Tab: Calculate height and top distance
        if (isVertical && tabRect) {
            var top = tabRect.top, height = tabRect.height;
            setRect({
                top: top,
                height: height
            });
        } // Prevent unwanted transition from 0 to measured rect
        // by setting the measured state in the next tick
        var id = requestAnimationFrame(function() {
            setHasMeasured(true);
        });
        return function() {
            if (id) cancelAnimationFrame(id);
        };
    }, [
        selectedIndex,
        isHorizontal,
        isVertical,
        descendants
    ]);
    return _extends({
        position: "absolute",
        transition: hasMeasured ? "all 200ms cubic-bezier(0, 0, 0.2, 1)" : "none"
    }, rect);
}
function makeTabId(id, index) {
    return id + "--tab-" + index;
}
function makeTabPanelId(id, index) {
    return id + "--tabpanel-" + index;
}

},{"@chakra-ui/clickable":"7hdLN","@chakra-ui/descendant":"37ueY","@chakra-ui/hooks":"ak6Dj","@chakra-ui/react-utils":"5UBnZ","@chakra-ui/utils":"3364O","react":"3f97z"}],"5TOq5":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _tag = require("./tag");
Object.keys(_tag).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tag[key]) return;
    exports[key] = _tag[key];
});

},{"./tag":"6oHkY"}],"6oHkY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.TagCloseButton = exports.TagRightIcon = exports.TagLeftIcon = exports.TagLabel = exports.Tag = void 0;
var _icon = require("@chakra-ui/icon");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * The tag component is used to label or categorize UI elements.
 * To style the tag globally, change the styles in `theme.components.Tag`
 * @see Docs https://chakra-ui.com/docs/data-display/tag
 */ var Tag = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useMultiStyleConfig("Tag", props);
    var ownProps = _system.omitThemingProps(props);
    var containerStyles = _extends({
        display: "inline-flex",
        verticalAlign: "top",
        alignItems: "center",
        maxWidth: "100%"
    }, styles.container);
    return(/*#__PURE__*/ React.createElement(_system.StylesProvider, {
        value: styles
    }, /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref
    }, ownProps, {
        __css: containerStyles
    }))));
});
exports.Tag = Tag;
if (_utils.__DEV__) Tag.displayName = "Tag";
var TagLabel = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyles();
    return(/*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        ref: ref,
        isTruncated: true
    }, props, {
        __css: styles.label
    })));
});
exports.TagLabel = TagLabel;
if (_utils.__DEV__) TagLabel.displayName = "TagLabel";
var TagLeftIcon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        ref: ref,
        verticalAlign: "top",
        marginEnd: "0.5rem"
    }, props)));
});
exports.TagLeftIcon = TagLeftIcon;
if (_utils.__DEV__) TagLeftIcon.displayName = "TagLeftIcon";
var TagRightIcon = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        ref: ref,
        verticalAlign: "top",
        marginStart: "0.5rem"
    }, props)));
});
exports.TagRightIcon = TagRightIcon;
if (_utils.__DEV__) TagRightIcon.displayName = "TagRightIcon";
var TagCloseIcon = function TagCloseIcon1(props) {
    return(/*#__PURE__*/ React.createElement(_icon.Icon, _extends({
        verticalAlign: "inherit",
        viewBox: "0 0 512 512"
    }, props), /*#__PURE__*/ React.createElement("path", {
        fill: "currentColor",
        d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
    })));
};
if (_utils.__DEV__) TagCloseIcon.displayName = "TagCloseIcon";
/**
 * TagCloseButton is used to close "remove" the tag
 * @see Docs https://chakra-ui.com/docs/components/tag
 */ var TagCloseButton = function TagCloseButton1(props) {
    var isDisabled = props.isDisabled, children = props.children, rest = _objectWithoutPropertiesLoose(props, [
        "isDisabled",
        "children"
    ]);
    var styles = _system.useStyles();
    var btnStyles = _extends({
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        outline: "0",
        transition: "all 0.2s"
    }, styles.closeButton);
    return(/*#__PURE__*/ React.createElement(_system.chakra.button, _extends({
    }, rest, {
        type: "button",
        "aria-label": "close",
        disabled: isDisabled,
        __css: btnStyles
    }), children || /*#__PURE__*/ React.createElement(TagCloseIcon, null)));
};
exports.TagCloseButton = TagCloseButton;
if (_utils.__DEV__) TagCloseButton.displayName = "TagCloseButton";

},{"@chakra-ui/icon":"2mBZX","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"6EZuA":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _textarea = require("./textarea");
Object.keys(_textarea).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _textarea[key]) return;
    exports[key] = _textarea[key];
});

},{"./textarea":"6ztbY"}],"6ztbY":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Textarea = void 0;
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * Textarea is used to enter an amount of text that's longer than a single line
 * @see Docs https://chakra-ui.com/docs/form/textarea
 */ var Textarea = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Textarea", props);
    var _omitThemingProps = _system.omitThemingProps(props), className = _omitThemingProps.className, rows = _omitThemingProps.rows, rest = _objectWithoutPropertiesLoose(_omitThemingProps, [
        "className",
        "rows"
    ]);
    var textareaProps = _formControl.useFormControl(rest);
    var omitted = [
        "h",
        "minH",
        "height",
        "minHeight"
    ];
    var textareaStyles = rows ? _utils.omit(styles, omitted) : styles;
    return(/*#__PURE__*/ React.createElement(_system.chakra.textarea, _extends({
        ref: ref,
        rows: rows
    }, textareaProps, {
        className: _utils.cx("chakra-textarea", className),
        __css: textareaStyles
    })));
});
exports.Textarea = Textarea;
if (_utils.__DEV__) Textarea.displayName = "Textarea";

},{"@chakra-ui/form-control":"1VzrL","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","react":"3f97z"}],"2Q7Wn":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _exportNames = {
    toast: true
};
exports.toast = void 0;
var _useToast = require("./use-toast");
Object.keys(_useToast).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _useToast[key]) return;
    exports[key] = _useToast[key];
});
var _toast = require("./toast.class");
exports.toast = _toast.toast;
var _toast2 = require("./toast.types");
Object.keys(_toast2).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _toast2[key]) return;
    exports[key] = _toast2[key];
});

},{"./use-toast":"5tMkC","./toast.class":"3fFnm","./toast.types":"38ZT0"}],"5tMkC":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.createStandaloneToast = createStandaloneToast;
exports.useToast = useToast;
exports["default"] = exports.defaultStandaloneParam = void 0;
var _alert = require("@chakra-ui/alert");
var _closeButton = require("@chakra-ui/close-button");
var _system = require("@chakra-ui/system");
var _theme = _interopRequireDefault(require("@chakra-ui/theme"));
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _toast = require("./toast.class");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var Toast = function Toast1(props) {
    var status = props.status, variant = props.variant, id = props.id, title = props.title, isClosable = props.isClosable, onClose = props.onClose, description = props.description;
    return(/*#__PURE__*/ React.createElement(_alert.Alert, {
        status: status,
        variant: variant,
        id: id,
        alignItems: "start",
        borderRadius: "md",
        boxShadow: "lg",
        paddingEnd: 8,
        textAlign: "start",
        width: "auto"
    }, /*#__PURE__*/ React.createElement(_alert.AlertIcon, null), /*#__PURE__*/ React.createElement(_system.chakra.div, {
        flex: "1"
    }, title && /*#__PURE__*/ React.createElement(_alert.AlertTitle, null, title), description && /*#__PURE__*/ React.createElement(_alert.AlertDescription, {
        display: "block"
    }, description)), isClosable && /*#__PURE__*/ React.createElement(_closeButton.CloseButton, {
        size: "sm",
        onClick: onClose,
        position: "absolute",
        insetEnd: 1,
        top: 1
    })));
};
var defaults = {
    duration: 5000,
    position: "bottom",
    variant: "solid"
};
var defaultStandaloneParam = {
    theme: _theme["default"],
    colorMode: "light",
    toggleColorMode: _utils.noop,
    setColorMode: _utils.noop,
    defaultOptions: defaults
};
/**
 * Create a toast from outside of React Components
 */ exports.defaultStandaloneParam = defaultStandaloneParam;
function createStandaloneToast(_temp) {
    var _ref = _temp === void 0 ? defaultStandaloneParam : _temp, _ref$theme = _ref.theme, theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme, _ref$colorMode = _ref.colorMode, colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode, _ref$toggleColorMode = _ref.toggleColorMode, toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode, _ref$setColorMode = _ref.setColorMode, setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode, _ref$defaultOptions = _ref.defaultOptions, defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions;
    var renderWithProviders = function renderWithProviders1(props, options) {
        return(/*#__PURE__*/ React.createElement(_system.ThemeProvider, {
            theme: theme
        }, /*#__PURE__*/ React.createElement(_system.ColorModeContext.Provider, {
            value: {
                colorMode: colorMode,
                setColorMode: setColorMode,
                toggleColorMode: toggleColorMode
            }
        }, _utils.isFunction(options.render) ? options.render(props) : /*#__PURE__*/ React.createElement(Toast, _extends({
        }, props, options)))));
    };
    var toastImpl = function toastImpl1(options) {
        var opts = _extends({
        }, defaultOptions, options);
        var Message = function Message1(props) {
            return renderWithProviders(props, opts);
        };
        return _toast.toast.notify(Message, opts);
    };
    toastImpl.close = _toast.toast.close;
    toastImpl.closeAll = _toast.toast.closeAll; // toasts can only be updated if they have a valid id
    toastImpl.update = function(id, options) {
        if (!id) return;
        var opts = _extends({
        }, defaultOptions, options);
        _toast.toast.update(id, _extends({
        }, opts, {
            message: function message(props) {
                return renderWithProviders(props, opts);
            }
        }));
    };
    toastImpl.isActive = _toast.toast.isActive;
    return toastImpl;
}
/**
 * React hook used to create a function that can be used
 * to show toasts in an application.
 */ function useToast(options) {
    var _useChakra = _system.useChakra(), theme = _useChakra.theme, setColorMode = _useChakra.setColorMode, toggleColorMode = _useChakra.toggleColorMode, colorMode = _useChakra.colorMode;
    return React.useMemo(function() {
        return createStandaloneToast({
            theme: theme,
            colorMode: colorMode,
            setColorMode: setColorMode,
            toggleColorMode: toggleColorMode,
            defaultOptions: options
        });
    }, [
        theme,
        setColorMode,
        toggleColorMode,
        colorMode,
        options
    ]);
}
var _default = useToast;
exports["default"] = _default;

},{"@chakra-ui/alert":"5bEDe","@chakra-ui/close-button":"6ZT8s","@chakra-ui/system":"4QBuE","@chakra-ui/theme":"4ht9o","@chakra-ui/utils":"3364O","react":"3f97z","./toast.class":"3fFnm"}],"3fFnm":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.toast = void 0;
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _toastManager = require("./toast-manager");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var portalId = "chakra-toast-portal";
var Toaster = /**
 * Initialize the manager and mount it in the DOM
 * inside the portal node.
 *
 * @todo
 *
 * Update toast constructor to use `PortalManager`'s node or document.body.
 * Once done, we can remove the `zIndex` in `toast.manager.tsx`
 */ function Toaster1() {
    var _this = this;
    _defineProperty(this, "createToast", void 0);
    _defineProperty(this, "removeAll", void 0);
    _defineProperty(this, "closeToast", void 0);
    _defineProperty(this, "updateToast", void 0);
    _defineProperty(this, "isToastActive", void 0);
    _defineProperty(this, "bindFunctions", function(methods) {
        _this.createToast = methods.notify;
        _this.removeAll = methods.closeAll;
        _this.closeToast = methods.close;
        _this.updateToast = methods.update;
        _this.isToastActive = methods.isActive;
    });
    _defineProperty(this, "notify", function(message, options) {
        if (options === void 0) options = {
        };
        return _this.createToast == null ? void 0 : _this.createToast(message, options);
    });
    _defineProperty(this, "close", function(id) {
        _this.closeToast == null || _this.closeToast(id);
    });
    _defineProperty(this, "closeAll", function(options) {
        _this.removeAll == null || _this.removeAll(options);
    });
    _defineProperty(this, "update", function(id, options) {
        if (options === void 0) options = {
        };
        _this.updateToast == null || _this.updateToast(id, options);
    });
    _defineProperty(this, "isActive", function(id) {
        return _this.isToastActive == null ? void 0 : _this.isToastActive(id);
    });
    if (!_utils.isBrowser) return;
    var portal;
    var existingPortal = document.getElementById(portalId);
    if (existingPortal) portal = existingPortal;
    else {
        var _document$body;
        var div = document.createElement("div");
        div.id = portalId;
        (_document$body = document.body) == null || _document$body.appendChild(div);
        portal = div;
    }
    _reactDom.render(/*#__PURE__*/ React.createElement(_toastManager.ToastManager, {
        notify: this.bindFunctions
    }), portal);
};
var toast = new Toaster();
exports.toast = toast;

},{"@chakra-ui/utils":"3364O","react":"3f97z","react-dom":"PWMei","./toast-manager":"1woYs"}],"1woYs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.ToastManager = void 0;
var _utils = require("@chakra-ui/utils");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _toast = require("./toast");
var _toast2 = require("./toast.utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
/**
 * Manages the creation, and removal of toasts
 * across all corners ("top", "bottom", etc.)
 */ var ToastManager1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLoose(ToastManager2, _React$Component);
    /**
   * Static id counter to create unique ids
   * for each toast
   */ /**
   * State to track all the toast across all positions
   */ function ToastManager2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _defineProperty(_assertThisInitialized(_this), "state", {
            top: [],
            "top-left": [],
            "top-right": [],
            "bottom-left": [],
            bottom: [],
            "bottom-right": []
        });
        _defineProperty(_assertThisInitialized(_this), "notify", function(message, options) {
            var toast = _this.createToast(message, options);
            var position = toast.position, id = toast.id;
            _this.setState(function(prevToasts) {
                var _extends2;
                var isTop = position.includes("top");
                /**
         * - If the toast is positioned at the top edges, the
         * recent toast stacks on top of the other toasts.
         *
         * - If the toast is positioned at the bottom edges, the recent
         * toast stacks below the other toasts.
         */ var toasts = isTop ? [
                    toast
                ].concat(prevToasts[position]) : [].concat(prevToasts[position], [
                    toast
                ]);
                return _extends({
                }, prevToasts, (_extends2 = {
                }, _extends2[position] = toasts, _extends2));
            });
            return id;
        });
        _defineProperty(_assertThisInitialized(_this), "updateToast", function(id, options) {
            _this.setState(function(prevState) {
                var nextState = _extends({
                }, prevState);
                var _findToast = _toast2.findToast(nextState, id), position = _findToast.position, index = _findToast.index;
                if (position && index !== -1) nextState[position][index] = _extends({
                }, nextState[position][index], options);
                return nextState;
            });
        });
        _defineProperty(_assertThisInitialized(_this), "closeAll", function(_temp) {
            var _ref = _temp === void 0 ? {
            } : _temp, positions = _ref.positions;
            // only one setState here for perf reasons
            // instead of spamming this.closeToast
            _this.setState(function(prev) {
                var allPositions = [
                    "bottom",
                    "bottom-right",
                    "bottom-left",
                    "top",
                    "top-left",
                    "top-right"
                ];
                var positionsToClose = positions != null ? positions : allPositions;
                return positionsToClose.reduce(function(acc, position) {
                    acc[position] = prev[position].map(function(toast) {
                        return _extends({
                        }, toast, {
                            requestClose: true
                        });
                    });
                    return acc;
                }, {
                });
            });
        });
        _defineProperty(_assertThisInitialized(_this), "createToast", function(message, options) {
            var _options$id, _options$position;
            ToastManager2.counter += 1;
            var id = (_options$id = options.id) != null ? _options$id : ToastManager2.counter;
            var position = (_options$position = options.position) != null ? _options$position : "top";
            return {
                id: id,
                message: message,
                position: position,
                duration: options.duration,
                onCloseComplete: options.onCloseComplete,
                onRequestRemove: function onRequestRemove() {
                    return _this.removeToast(String(id), position);
                },
                status: options.status,
                requestClose: false
            };
        });
        _defineProperty(_assertThisInitialized(_this), "closeToast", function(id) {
            _this.setState(function(prevState) {
                var _extends3;
                var position = _toast2.getToastPosition(prevState, id);
                if (!position) return prevState;
                return _extends({
                }, prevState, (_extends3 = {
                }, _extends3[position] = prevState[position].map(function(toast) {
                    // id may be string or number
                    // eslint-disable-next-line eqeqeq
                    if (toast.id == id) return _extends({
                    }, toast, {
                        requestClose: true
                    });
                    return toast;
                }), _extends3));
            });
        });
        _defineProperty(_assertThisInitialized(_this), "removeToast", function(id, position) {
            _this.setState(function(prevState) {
                var _extends4;
                return _extends({
                }, prevState, (_extends4 = {
                }, _extends4[position] = prevState[position].filter(function(toast) {
                    return toast.id != id;
                }), _extends4));
            });
        });
        _defineProperty(_assertThisInitialized(_this), "isVisible", function(id) {
            var _findToast2 = _toast2.findToast(_this.state, id), position = _findToast2.position;
            return Boolean(position);
        });
        _defineProperty(_assertThisInitialized(_this), "getStyle", function(position) {
            var isTopOrBottom = position === "top" || position === "bottom";
            var margin = isTopOrBottom ? "0 auto" : undefined;
            var top = position.includes("top") ? "env(safe-area-inset-top, 0px)" : undefined;
            var bottom = position.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : undefined;
            var right = !position.includes("left") ? "env(safe-area-inset-right, 0px)" : undefined;
            var left = !position.includes("right") ? "env(safe-area-inset-left, 0px)" : undefined;
            return {
                position: "fixed",
                zIndex: 5500,
                pointerEvents: "none",
                display: "flex",
                flexDirection: "column",
                margin: margin,
                top: top,
                bottom: bottom,
                right: right,
                left: left
            };
        });
        var methods = {
            notify: _this.notify,
            closeAll: _this.closeAll,
            close: _this.closeToast,
            update: _this.updateToast,
            isActive: _this.isVisible
        };
        props.notify(methods);
        return _this;
    }
    /**
   * Function to actually create a toast and add it
   * to state at the specified position
   */ var _proto = ToastManager2.prototype;
    _proto.render = function render() {
        var _this2 = this;
        return _utils.objectKeys(this.state).map(function(position) {
            var toasts = _this2.state[position];
            return(/*#__PURE__*/ React.createElement("ul", {
                key: position,
                id: "chakra-toast-manager-" + position,
                style: _this2.getStyle(position)
            }, /*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, {
                initial: false
            }, toasts.map(function(toast) {
                return(/*#__PURE__*/ React.createElement(_toast.Toast, _extends({
                    key: toast.id
                }, toast)));
            }))));
        });
    };
    return ToastManager2;
}(React.Component);
exports.ToastManager = ToastManager1;
_defineProperty(ToastManager1, "counter", 0);

},{"@chakra-ui/utils":"3364O","framer-motion":"5ufJB","react":"3f97z","./toast":"2eL2c","./toast.utils":"3O2Fs"}],"2eL2c":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Toast = void 0;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var _alert = _interopRequireDefault(require("@reach/alert"));
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _toast = require("./toast.utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
/**
 * @todo After Gerrit refactors this implementation,
 * allow users to change the toast transition direction from
 * a `ToastProvider` component.
 *
 * Here's an API example:
 *
 * ```jsx
 * <ToastProvider
 *   motion={customVariants}
 *   component={CustomToastComponent}
 *   autoCloseTimeout={3000}
 *   toastSpacing={32} // this will control the `margin` value applied
 * >
 * </ToastProvider>
 * ```
 */ var toastMotionVariants = {
    initial: function initial(props) {
        var _ref;
        var position = props.position;
        var dir = [
            "top",
            "bottom"
        ].includes(position) ? "y" : "x";
        var factor = [
            "top-right",
            "bottom-right"
        ].includes(position) ? 1 : -1;
        if (position === "bottom") factor = 1;
        return _ref = {
            opacity: 0
        }, _ref[dir] = factor * 24, _ref;
    },
    animate: {
        opacity: 1,
        y: 0,
        x: 0,
        scale: 1,
        transition: {
            duration: 0.4,
            ease: [
                0.4,
                0,
                0.2,
                1
            ]
        }
    },
    exit: {
        opacity: 0,
        scale: 0.85,
        transition: {
            duration: 0.2,
            ease: [
                0.4,
                0,
                1,
                1
            ]
        }
    }
};
var Toast = function Toast1(props) {
    var id = props.id, message = props.message, onCloseComplete = props.onCloseComplete, onRequestRemove = props.onRequestRemove, _props$requestClose = props.requestClose, requestClose = _props$requestClose === void 0 ? false : _props$requestClose, _props$position = props.position, position = _props$position === void 0 ? "bottom" : _props$position, _props$duration = props.duration, duration = _props$duration === void 0 ? 5000 : _props$duration;
    var _React$useState = React.useState(duration), delay = _React$useState[0], setDelay = _React$useState[1];
    var isPresent = _framerMotion.useIsPresent();
    _hooks.useUpdateEffect(function() {
        if (!isPresent) onCloseComplete == null || onCloseComplete();
    }, [
        isPresent
    ]);
    _hooks.useUpdateEffect(function() {
        setDelay(duration);
    }, [
        duration
    ]);
    var onMouseEnter = function onMouseEnter1() {
        return setDelay(null);
    };
    var onMouseLeave = function onMouseLeave1() {
        return setDelay(duration);
    };
    var close = function close1() {
        if (isPresent) onRequestRemove();
    };
    React.useEffect(function() {
        if (isPresent && requestClose) onRequestRemove();
    }, [
        isPresent,
        requestClose,
        onRequestRemove
    ]);
    _hooks.useTimeout(close, delay);
    var style = React.useMemo(function() {
        return _toast.getToastStyle(position);
    }, [
        position
    ]);
    return(/*#__PURE__*/ React.createElement(_framerMotion.motion.li, {
        layout: true,
        className: "chakra-toast",
        variants: toastMotionVariants,
        initial: "initial",
        animate: "animate",
        exit: "exit",
        onHoverStart: onMouseEnter,
        onHoverEnd: onMouseLeave,
        custom: {
            position: position
        },
        style: style
    }, /*#__PURE__*/ React.createElement(_alert["default"], {
        className: "chakra-toast__inner",
        style: {
            pointerEvents: "auto",
            maxWidth: 560,
            minWidth: 300,
            margin: "0.5rem"
        }
    }, _utils.isFunction(message) ? message({
        id: id,
        onClose: close
    }) : message)));
};
exports.Toast = Toast;
if (_utils.__DEV__) Toast.displayName = "Toast";

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/utils":"3364O","@reach/alert":"2p65m","framer-motion":"5ufJB","react":"3f97z","./toast.utils":"3O2Fs"}],"2p65m":[function(require,module,exports) {
'use strict';
module.exports = require("./reach-alert.cjs.dev.js");

},{"./reach-alert.cjs.dev.js":"19guS"}],"19guS":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var React = require('react');
var ReactDOM = require('react-dom');
var visuallyHidden = require('@reach/visually-hidden');
var utils = require('@reach/utils');
var PropTypes = require('prop-types');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var PropTypes__default = /*#__PURE__*/ _interopDefault(PropTypes);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/*
 * Singleton state is fine because you don't server render
 * an alert (SRs don't read them on first load anyway)
 */ var keys = {
    polite: -1,
    assertive: -1
};
var elements = {
    polite: {
    },
    assertive: {
    }
};
var liveRegions = {
    polite: null,
    assertive: null
};
var renderTimer; ////////////////////////////////////////////////////////////////////////////////
/**
 * Alert
 *
 * Screen-reader-friendly alert messages. In many apps developers add "alert"
 * messages when network events or other things happen. Users with assistive
 * technologies may not know about the message unless you develop for it.
 *
 * @see Docs https://reach.tech/alert
 */ var Alert = /*#__PURE__*/ utils.forwardRefWithAs(function Alert1(_ref, forwardedRef) {
    var _ref$as = _ref.as, Comp = _ref$as === void 0 ? "div" : _ref$as, children = _ref.children, _ref$type = _ref.type, regionType = _ref$type === void 0 ? "polite" : _ref$type, props = _objectWithoutPropertiesLoose(_ref, [
        "as",
        "children",
        "type"
    ]);
    var ownRef = React.useRef(null);
    var ref = utils.useForkedRef(forwardedRef, ownRef);
    var child = React.useMemo(function() {
        return(/*#__PURE__*/ React.createElement(Comp, _extends({
        }, props, {
            ref: ref,
            "data-reach-alert": true
        }), children));
    }, [
        children,
        props
    ]);
    useMirrorEffects(regionType, child, ownRef);
    return child;
});
Alert.displayName = "Alert";
Alert.propTypes = {
    children: PropTypes__default['default'].node,
    type: /*#__PURE__*/ PropTypes__default['default'].oneOf([
        "assertive",
        "polite"
    ])
};
function createMirror(type, doc) {
    var key = ++keys[type];
    var mount = function mount1(element) {
        if (liveRegions[type]) {
            elements[type][key] = element;
            renderAlerts();
        } else {
            var node = doc.createElement("div");
            node.setAttribute("data-reach-live-" + type, "true");
            liveRegions[type] = node;
            doc.body.appendChild(liveRegions[type]);
            mount1(element);
        }
    };
    var update = function update1(element) {
        elements[type][key] = element;
        renderAlerts();
    };
    var unmount = function unmount1() {
        delete elements[type][key];
        renderAlerts();
    };
    return {
        mount: mount,
        update: update,
        unmount: unmount
    };
}
function renderAlerts() {
    if (renderTimer != null) window.clearTimeout(renderTimer);
    renderTimer = window.setTimeout(function() {
        Object.keys(elements).forEach(function(elementType) {
            var regionType = elementType;
            var container = liveRegions[regionType];
            if (container) ReactDOM.render(/*#__PURE__*/ React.createElement(visuallyHidden.VisuallyHidden, {
                as: "div"
            }, /*#__PURE__*/ React.createElement("div", {
                // The status role is a type of live region and a container whose
                // content is advisory information for the user that is not
                // important enough to justify an alert, and is often presented as
                // a status bar. When the role is added to an element, the browser
                // will send out an accessible status event to assistive
                // technology products which can then notify the user about it.
                // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role
                role: regionType === "assertive" ? "alert" : "status",
                "aria-live": regionType
            }, Object.keys(elements[regionType]).map(function(key) {
                return(/*#__PURE__*/ React.cloneElement(elements[regionType][key], {
                    key: key,
                    ref: null
                }));
            }))), liveRegions[regionType]);
        });
    }, 500);
}
function useMirrorEffects(regionType, element, ref) {
    var prevType = utils.usePrevious(regionType);
    var mirror = React.useRef(null);
    var mounted = React.useRef(false);
    React.useEffect(function() {
        var ownerDocument = utils.getOwnerDocument(ref.current);
        if (!mounted.current) {
            mounted.current = true;
            mirror.current = createMirror(regionType, ownerDocument);
            mirror.current.mount(element);
        } else if (prevType !== regionType) {
            mirror.current && mirror.current.unmount();
            mirror.current = createMirror(regionType, ownerDocument);
            mirror.current.mount(element);
        } else mirror.current && mirror.current.update(element);
    }, [
        element,
        regionType,
        prevType,
        ref
    ]);
    React.useEffect(function() {
        return function() {
            mirror.current && mirror.current.unmount();
        };
    }, []);
} ////////////////////////////////////////////////////////////////////////////////
exports.Alert = Alert;
exports.default = Alert;

},{"react":"3f97z","react-dom":"PWMei","@reach/visually-hidden":"2aXEY","@reach/utils":"7lfKs","prop-types":"4dfy5"}],"2aXEY":[function(require,module,exports) {
'use strict';
module.exports = require("./reach-visually-hidden.cjs.dev.js");

},{"./reach-visually-hidden.cjs.dev.js":"G6YYJ"}],"G6YYJ":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var React = require('react');
var PropTypes = require('prop-types');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
var PropTypes__default = /*#__PURE__*/ _interopDefault(PropTypes);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * VisuallyHidden
 *
 * Provides text for screen readers that is visually hidden.
 * It is the logical opposite of the `aria-hidden` attribute.
 */ var VisuallyHidden = /*#__PURE__*/ React.forwardRef(function VisuallyHidden1(_ref, ref) {
    var _ref$as = _ref.as, Comp = _ref$as === void 0 ? "span" : _ref$as, _ref$style = _ref.style, style = _ref$style === void 0 ? {
    } : _ref$style, props = _objectWithoutPropertiesLoose(_ref, [
        "as",
        "style"
    ]);
    return(/*#__PURE__*/ React.createElement(Comp, _extends({
        ref: ref,
        style: _extends({
            border: 0,
            clip: "rect(0 0 0 0)",
            height: "1px",
            margin: "-1px",
            overflow: "hidden",
            padding: 0,
            position: "absolute",
            width: "1px",
            // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
            whiteSpace: "nowrap",
            wordWrap: "normal"
        }, style)
    }, props)));
});
VisuallyHidden.displayName = "VisuallyHidden";
VisuallyHidden.propTypes = {
    as: PropTypes__default['default'].any,
    children: PropTypes__default['default'].node
};
exports.VisuallyHidden = VisuallyHidden;
exports.default = VisuallyHidden;

},{"react":"3f97z","prop-types":"4dfy5"}],"7lfKs":[function(require,module,exports) {
'use strict';
module.exports = require("./reach-utils.cjs.dev.js");

},{"./reach-utils.cjs.dev.js":"2lb9K"}],"2lb9K":[function(require,module,exports) {
var process = require("process");
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var React = require('react');
var fbWarning = require('warning');
function _interopDefault(e) {
    return e && e.__esModule ? e : {
        'default': e
    };
}
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        if (k !== 'default') {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                    return e[k];
                }
            });
        }
    });
    n['default'] = e;
    return Object.freeze(n);
}
var React__namespace = /*#__PURE__*/ _interopNamespace(React);
var fbWarning__default = /*#__PURE__*/ _interopDefault(fbWarning);
/* eslint-disable no-restricted-globals, eqeqeq  */ /**
 * React currently throws a warning when using useLayoutEffect on the server.
 * To get around it, we can conditionally useEffect on the server (no-op) and
 * useLayoutEffect in the browser. We occasionally need useLayoutEffect to
 * ensure we don't get a render flash for certain operations, but we may also
 * need affected components to render on the server. One example is when setting
 * a component's descendants to retrieve their index values.
 *
 * Important to note that using this hook as an escape hatch will break the
 * eslint dependency warnings unless you rename the import to `useLayoutEffect`.
 * Use sparingly only when the effect won't effect the rendered HTML to avoid
 * any server/client mismatch.
 *
 * If a useLayoutEffect is needed and the result would create a mismatch, it's
 * likely that the component in question shouldn't be rendered on the server at
 * all, so a better approach would be to lazily render those in a parent
 * component after client-side hydration.
 *
 * TODO: We are calling useLayoutEffect in a couple of places that will likely
 * cause some issues for SSR users, whether the warning shows or not. Audit and
 * fix these.
 *
 * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
 * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js
 *
 * @param effect
 * @param deps
 */ var useIsomorphicLayoutEffect = /*#__PURE__*/ canUseDOM() ? React.useLayoutEffect : React.useEffect;
var checkedPkgs = {
};
/**
 * Copy of Facebook's warning package.
 *
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical paths.
 * Removing the logging code for production environments will keep the same
 * logic and follow the same code paths.
 *
 * @see https://github.com/BerkeleyTrue/warning/blob/master/warning.js
 */ var warning = fbWarning__default['default'];
/**
 * When in dev mode, checks that styles for a given @reach package are loaded.
 *
 * @param packageName Name of the package to check.
 * @example checkStyles("dialog") will check for styles for @reach/dialog
 */ exports.checkStyles = noop;
// In CJS files, process.env.NODE_ENV is stripped from our build, but we need
// it to prevent style checks from clogging up user logs while testing.
// This is a workaround until we can tweak the build a bit to accommodate.
var _ref = typeof process !== "undefined" ? process : {
    env: {
        NODE_ENV: "development"
    }
}, env = _ref.env;
exports.checkStyles = function checkStyles(packageName) {
    // only check once per package
    if (checkedPkgs[packageName]) return;
    checkedPkgs[packageName] = true;
    if (env.NODE_ENV !== "test" && parseInt(window.getComputedStyle(document.body).getPropertyValue("--reach-" + packageName), 10) !== 1) console.warn("@reach/" + packageName + " styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import \"@reach/" + packageName + "/styles.css\";\n\n  Otherwise you'll need to include them some other way:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"node_modules/@reach/" + packageName + "/styles.css\" />\n\n  For more information visit https://ui.reach.tech/styling.\n  ");
};
/**
 * Ponyfill for the global object in some environments.
 *
 * @link https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
 */ var ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : /*#__PURE__*/ // eslint-disable-next-line no-new-func
Function("return this")();
/**
 * Passes or assigns an arbitrary value to a ref function or object.
 *
 * @param ref
 * @param value
 */ function assignRef(ref, value) {
    if (ref == null) return;
    if (isFunction(ref)) ref(value);
    else try {
        ref.current = value;
    } catch (error) {
        throw new Error("Cannot assign value \"" + value + "\" to ref \"" + ref + "\"");
    }
}
/**
 * Checks true|"true" vs false|"false"
 *
 * @param value
 */ function boolOrBoolString(value) {
    return value === "true" ? true : isBoolean(value) ? value : false;
}
function canUseDOM() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
/**
 * Type-safe clone element
 *
 * @param element
 * @param props
 * @param children
 */ function cloneValidElement(element, props) {
    for(var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)children[_key - 2] = arguments[_key];
    return(/*#__PURE__*/ React.isValidElement(element) ? React.cloneElement.apply(React__namespace, [
        element,
        props
    ].concat(children)) : element);
}
function createNamedContext(name, defaultValue) {
    var Ctx = /*#__PURE__*/ React.createContext(defaultValue);
    Ctx.displayName = name;
    return Ctx;
}
/**
 * This is a hack for sure. The thing is, getting a component to intelligently
 * infer props based on a component or JSX string passed into an `as` prop is
 * kind of a huge pain. Getting it to work and satisfy the constraints of
 * `forwardRef` seems dang near impossible. To avoid needing to do this awkward
 * type song-and-dance every time we want to forward a ref into a component
 * that accepts an `as` prop, we abstract all of that mess to this function for
 * the time time being.
 */ function forwardRefWithAs(render) {
    return(/*#__PURE__*/ React.forwardRef(render));
}
function memoWithAs(Component, propsAreEqual) {
    return(/*#__PURE__*/ React.memo(Component, propsAreEqual));
}
/**
 * Get the size of the working document minus the scrollbar offset.
 *
 * @param element
 */ function getDocumentDimensions(element) {
    var _ownerDocument$docume, _ownerDocument$docume2;
    var ownerDocument = getOwnerDocument(element);
    var ownerWindow = ownerDocument.defaultView || window;
    if (!ownerDocument) return {
        width: 0,
        height: 0
    };
    return {
        width: (_ownerDocument$docume = ownerDocument.documentElement.clientWidth) != null ? _ownerDocument$docume : ownerWindow.innerWidth,
        height: (_ownerDocument$docume2 = ownerDocument.documentElement.clientHeight) != null ? _ownerDocument$docume2 : ownerWindow.innerHeight
    };
}
/**
 * Get the scoll position of the global window object relative to a given node.
 *
 * @param element
 */ function getScrollPosition(element) {
    var ownerDocument = getOwnerDocument(element);
    var ownerWindow = ownerDocument.defaultView || window;
    if (!ownerDocument) return {
        scrollX: 0,
        scrollY: 0
    };
    return {
        scrollX: ownerWindow.scrollX,
        scrollY: ownerWindow.scrollY
    };
}
/**
 * Get a computed style value by property.
 *
 * @param element
 * @param styleProp
 */ function getElementComputedStyle(element, styleProp) {
    var ownerDocument = getOwnerDocument(element);
    var ownerWindow = (ownerDocument == null ? void 0 : ownerDocument.defaultView) || window;
    if (ownerWindow) return ownerWindow.getComputedStyle(element, null).getPropertyValue(styleProp);
    return null;
}
/**
 * Get an element's owner document. Useful when components are used in iframes
 * or other environments like dev tools.
 *
 * @param element
 */ function getOwnerDocument(element) {
    return canUseDOM() ? element ? element.ownerDocument : document : null;
}
/**
 * TODO: Remove in 1.0
 */ function getOwnerWindow(element) {
    var ownerDocument = getOwnerDocument(element);
    return ownerDocument ? ownerDocument.defaultView || window : null;
}
/**
 * Get the scrollbar offset distance.
 *
 * TODO: Remove in 1.0 (we used this in public examples)
 */ function getScrollbarOffset() {
    try {
        if (window.innerWidth > document.documentElement.clientWidth) return window.innerWidth - document.documentElement.clientWidth;
    } catch (err) {
    }
    return 0;
}
/**
 * Checks whether or not a value is a boolean.
 *
 * @param value
 */ function isBoolean(value) {
    return typeof value === "boolean";
}
/**
 * Checks whether or not a value is a function.
 *
 * @param value
 */ function isFunction(value) {
    return !!(value && ({
    }).toString.call(value) == "[object Function]");
}
/**
 * Checks whether or not a value is a number.
 *
 * @param value
 */ function isNumber(value) {
    return typeof value === "number" && !isNaN(value);
}
/**
 * Detects right clicks
 *
 * @param nativeEvent
 */ function isRightClick(nativeEvent) {
    return "which" in nativeEvent ? nativeEvent.which === 3 : "button" in nativeEvent ? nativeEvent.button === 2 : false;
}
/**
 * Checks whether or not a value is a string.
 *
 * @param value
 */ function isString(value) {
    return typeof value === "string";
}
/**
 * Joins strings to format IDs for compound components.
 *
 * @param args
 */ function makeId() {
    for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
    return args.filter(function(val) {
        return val != null;
    }).join("--");
}
/**
 * No-op function.
 */ function noop() {
}
/**
 * Convert our state strings for HTML data attributes.
 * No need for a fancy kebab-caser here, we know what our state strings are!
 *
 * @param state
 */ function stateToAttributeString(state) {
    return String(state).replace(/([\s_]+)/g, "-").toLowerCase();
}
/**
 * Check if a component is controlled or uncontrolled and return the correct
 * state value and setter accordingly. If the component state is controlled by
 * the app, the setter is a noop.
 *
 * @param controlledValue
 * @param defaultValue
 */ function useControlledState(controlledValue, defaultValue) {
    var controlledRef = React.useRef(controlledValue != null);
    var _React$useState = React.useState(defaultValue), valueState = _React$useState[0], setValue = _React$useState[1];
    var set = React.useCallback(function(n) {
        if (!controlledRef.current) setValue(n);
    }, []);
    return [
        controlledRef.current ? controlledValue : valueState,
        set
    ];
}
/**
 * Logs a warning in dev mode when a component switches from controlled to
 * uncontrolled, or vice versa
 *
 * A single prop should typically be used to determine whether or not a
 * component is controlled or not.
 *
 * @param controlledValue
 * @param controlledPropName
 * @param componentName
 */ exports.useControlledSwitchWarning = noop;
exports.useControlledSwitchWarning = function useControlledSwitchWarning(controlledValue, controlledPropName, componentName) {
    var controlledRef = React.useRef(controlledValue != null);
    var nameCache = React.useRef({
        componentName: componentName,
        controlledPropName: controlledPropName
    });
    React.useEffect(function() {
        nameCache.current = {
            componentName: componentName,
            controlledPropName: controlledPropName
        };
    }, [
        componentName,
        controlledPropName
    ]);
    React.useEffect(function() {
        var wasControlled = controlledRef.current;
        var _nameCache$current = nameCache.current, componentName1 = _nameCache$current.componentName, controlledPropName1 = _nameCache$current.controlledPropName;
        var isControlled = controlledValue != null;
        if (wasControlled !== isControlled) console.error("A component is changing an " + (wasControlled ? "" : "un") + "controlled `" + controlledPropName1 + "` state of " + componentName1 + " to be " + (wasControlled ? "un" : "") + "controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled " + componentName1 + " element for the lifetime of the component.\nMore info: https://fb.me/react-controlled-components");
    }, [
        controlledValue
    ]);
};
exports.useCheckStyles = noop;
exports.useCheckStyles = function useCheckStyles(pkg) {
    var name = React.useRef(pkg);
    React.useEffect(function() {
        return void (name.current = pkg);
    }, [
        pkg
    ]);
    React.useEffect(function() {
        return exports.checkStyles(name.current);
    }, []);
};
/**
 * React hook for creating a value exactly once.
 * @see https://github.com/Andarist/use-constant
 */ function useConstant(fn) {
    var ref = React.useRef();
    if (!ref.current) ref.current = {
        v: fn()
    };
    return ref.current.v;
}
/**
 * @param callback
 */ function useEventCallback(callback) {
    var ref = React.useRef(callback);
    useIsomorphicLayoutEffect(function() {
        ref.current = callback;
    });
    return React.useCallback(function(event) {
        for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
        return ref.current.apply(ref, [
            event
        ].concat(args));
    }, []);
}
function useLazyRef(fn) {
    var ref = React.useRef({
        __internalSet: true
    });
    if (ref.current && ref.current.__internalSet === true) ref.current = fn();
    return ref;
}
/**
 * TODO: Remove in 1.0
 * @alias useStableCallback
 * @param callback
 */ var useCallbackProp = useStableCallback;
/**
 * Adds a DOM event listener
 *
 * @param eventName
 * @param listener
 * @param element
 */ function useEventListener(eventName, listener, element) {
    if (element === void 0) element = window;
    var savedHandler = React.useRef(listener);
    React.useEffect(function() {
        savedHandler.current = listener;
    }, [
        listener
    ]);
    React.useEffect(function() {
        var isSupported = element && element.addEventListener;
        if (!isSupported) {
            console.warn("Event listener not supported on the element provided");
            return;
        }
        function eventListener(event) {
            savedHandler.current(event);
        }
        element.addEventListener(eventName, eventListener);
        return function() {
            element.removeEventListener(eventName, eventListener);
        };
    }, [
        eventName,
        element
    ]);
}
/**
 * Detect when focus changes in our document.
 *
 * @param handleChange
 * @param when
 * @param ownerDocument
 */ function useFocusChange(handleChange, when, ownerDocument) {
    if (handleChange === void 0) handleChange = console.log;
    if (when === void 0) when = "focus";
    if (ownerDocument === void 0) ownerDocument = document;
    var lastActiveElement = React.useRef(ownerDocument.activeElement);
    React.useEffect(function() {
        lastActiveElement.current = ownerDocument.activeElement;
        function onChange(event) {
            if (lastActiveElement.current !== ownerDocument.activeElement) {
                handleChange(ownerDocument.activeElement, lastActiveElement.current, event);
                lastActiveElement.current = ownerDocument.activeElement;
            }
        }
        ownerDocument.addEventListener(when, onChange, true);
        return function() {
            ownerDocument.removeEventListener(when, onChange);
        };
    }, [
        when,
        handleChange,
        ownerDocument
    ]);
}
/**
 * Forces a re-render, similar to `forceUpdate` in class components.
 */ function useForceUpdate() {
    var _React$useState2 = React.useState(Object.create(null)), dispatch = _React$useState2[1];
    return React.useCallback(function() {
        dispatch(Object.create(null));
    }, []);
}
/**
 * Passes or assigns a value to multiple refs (typically a DOM node). Useful for
 * dealing with components that need an explicit ref for DOM calculations but
 * also forwards refs assigned by an app.
 *
 * @param refs Refs to fork
 */ function useForkedRef() {
    for(var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)refs[_key4] = arguments[_key4];
    return React.useMemo(function() {
        if (refs.every(function(ref) {
            return ref == null;
        })) return null;
        return function(node) {
            refs.forEach(function(ref) {
                assignRef(ref, node);
            });
        }; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [].concat(refs));
}
/**
 * Returns the previous value of a reference after a component update.
 *
 * @param value
 */ function usePrevious(value) {
    var ref = React.useRef(null);
    React.useEffect(function() {
        ref.current = value;
    }, [
        value
    ]);
    return ref.current;
}
/**
 * Converts a callback to a ref to avoid triggering re-renders when passed as a
 * prop and exposed as a stable function to avoid executing effects when
 * passed as a dependency.
 */ function useStableCallback(callback) {
    var callbackRef = React.useRef(callback);
    React.useEffect(function() {
        callbackRef.current = callback;
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
    return React.useCallback(function() {
        callbackRef.current && callbackRef.current.apply(callbackRef, arguments);
    }, []);
}
/**
 * Call an effect after a component update, skipping the initial mount.
 *
 * @param effect Effect to call
 * @param deps Effect dependency list
 */ function useUpdateEffect(effect, deps) {
    var mounted = React.useRef(false);
    React.useEffect(function() {
        if (mounted.current) effect();
        else mounted.current = true;
         // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
}
/**
 * Just a lil state logger
 *
 * @param state
 * @param DEBUG
 */ exports.useStateLogger = noop;
exports.useStateLogger = function useStateLogger(state, DEBUG) {
    if (DEBUG === void 0) DEBUG = false;
    var debugRef = React.useRef(DEBUG);
    React.useEffect(function() {
        debugRef.current = DEBUG;
    }, [
        DEBUG
    ]);
    React.useEffect(function() {
        if (debugRef.current) {
            console.group("State Updated");
            console.log("%c" + state, "font-weight: normal; font-size: 120%; font-style: italic;");
            console.groupEnd();
        }
    }, [
        state
    ]);
};
/**
 * Wraps a lib-defined event handler and a user-defined event handler, returning
 * a single handler that allows a user to prevent lib-defined handlers from
 * firing.
 *
 * @param theirHandler User-supplied event handler
 * @param ourHandler Library-supplied event handler
 */ function wrapEvent(theirHandler, ourHandler) {
    return function(event) {
        theirHandler && theirHandler(event);
        if (!event.defaultPrevented) return ourHandler(event);
    };
} // Export types
exports.assignRef = assignRef;
exports.boolOrBoolString = boolOrBoolString;
exports.canUseDOM = canUseDOM;
exports.cloneValidElement = cloneValidElement;
exports.createNamedContext = createNamedContext;
exports.forwardRefWithAs = forwardRefWithAs;
exports.getDocumentDimensions = getDocumentDimensions;
exports.getElementComputedStyle = getElementComputedStyle;
exports.getOwnerDocument = getOwnerDocument;
exports.getOwnerWindow = getOwnerWindow;
exports.getScrollPosition = getScrollPosition;
exports.getScrollbarOffset = getScrollbarOffset;
exports.isBoolean = isBoolean;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isRightClick = isRightClick;
exports.isString = isString;
exports.makeId = makeId;
exports.memoWithAs = memoWithAs;
exports.noop = noop;
exports.ponyfillGlobal = ponyfillGlobal;
exports.stateToAttributeString = stateToAttributeString;
exports.useCallbackProp = useCallbackProp;
exports.useConstant = useConstant;
exports.useControlledState = useControlledState;
exports.useEventCallback = useEventCallback;
exports.useEventListener = useEventListener;
exports.useFocusChange = useFocusChange;
exports.useForceUpdate = useForceUpdate;
exports.useForkedRef = useForkedRef;
exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
exports.useLazyRef = useLazyRef;
exports.usePrevious = usePrevious;
exports.useStableCallback = useStableCallback;
exports.useUpdateEffect = useUpdateEffect;
exports.warning = warning;
exports.wrapEvent = wrapEvent;

},{"process":"7AgFc","react":"3f97z","warning":"5jojS"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"5jojS":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var __DEV__ = true;
var warning = function() {
};
if (__DEV__) {
    var printWarning = function printWarning1(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for(var key = 1; key < len; key++)args[key - 1] = arguments[key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.error(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for(var key = 2; key < len; key++)args[key - 2] = arguments[key];
        if (format === undefined) throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        if (!condition) printWarning.apply(null, [
            format
        ].concat(args));
    };
}
module.exports = warning;

},{}],"3O2Fs":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.findToast = findToast;
exports.getToastStyle = getToastStyle;
exports.isVisible = exports.getToastPosition = exports.findById = void 0;
/**
 * Given an array of toasts for a specific position.
 * It returns the toast that matches the `id` passed
 */ var findById = function findById1(arr, id) {
    return arr.find(function(toast) {
        return toast.id === id;
    });
};
/**
 * Given the toast manager state, finds the toast that matches
 * the id and return its position and index
 */ exports.findById = findById;
function findToast(toasts, id) {
    var position = getToastPosition(toasts, id);
    var index = position ? toasts[position].findIndex(function(toast) {
        return toast.id === id;
    }) : -1;
    return {
        position: position,
        index: index
    };
}
/**
 * Given the toast manager state, finds the position of the toast that
 * matches the `id`
 */ var getToastPosition = function getToastPosition1(toasts, id) {
    var _Object$values$flat$f;
    return (_Object$values$flat$f = Object.values(toasts).flat().find(function(toast) {
        return toast.id === id;
    })) == null ? void 0 : _Object$values$flat$f.position;
};
/**
 * Given the toast manager state, checks if a specific toast is
 * still in the state, which means it is still visible on screen.
 */ exports.getToastPosition = getToastPosition;
var isVisible = function isVisible1(toasts, id) {
    return !!getToastPosition(toasts, id);
};
/**
 * Get's the styles to be applied to a toast's container
 * based on its position in the manager
 */ exports.isVisible = isVisible;
function getToastStyle(position) {
    var isRighty = position.includes("right");
    var isLefty = position.includes("left");
    var alignItems = "center";
    if (isRighty) alignItems = "flex-end";
    if (isLefty) alignItems = "flex-start";
    return {
        display: "flex",
        flexDirection: "column",
        alignItems: alignItems
    };
}

},{}],"38ZT0":[function(require,module,exports) {
"use strict";

},{}],"Y1nKK":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _tooltip = require("./tooltip");
Object.keys(_tooltip).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _tooltip[key]) return;
    exports[key] = _tooltip[key];
});
var _useTooltip = require("./use-tooltip");
Object.keys(_useTooltip).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _useTooltip[key]) return;
    exports[key] = _useTooltip[key];
});

},{"./tooltip":"6MiMb","./use-tooltip":"53yo8"}],"6MiMb":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.Tooltip = void 0;
var _popper = require("@chakra-ui/popper");
var _portal = require("@chakra-ui/portal");
var _system = require("@chakra-ui/system");
var _utils = require("@chakra-ui/utils");
var _visuallyHidden = require("@chakra-ui/visually-hidden");
var _framerMotion = require("framer-motion");
var React = _interopRequireWildcard(require("react"));
var _tooltip = require("./tooltip.transition");
var _useTooltip = require("./use-tooltip");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var StyledTooltip = _system.chakra(_framerMotion.motion.div);
/**
 * Tooltips display informative text when users hover, focus on, or tap an element.
 *
 * @see Docs     https://chakra-ui.com/components/tooltip
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip
 */ var Tooltip = /*#__PURE__*/ _system.forwardRef(function(props, ref) {
    var styles = _system.useStyleConfig("Tooltip", props);
    var ownProps = _system.omitThemingProps(props);
    var theme = _system.useTheme();
    var children = ownProps.children, label = ownProps.label, shouldWrapChildren = ownProps.shouldWrapChildren, ariaLabel = ownProps["aria-label"], hasArrow = ownProps.hasArrow, bg = ownProps.bg, portalProps = ownProps.portalProps, rest = _objectWithoutPropertiesLoose(ownProps, [
        "children",
        "label",
        "shouldWrapChildren",
        "aria-label",
        "hasArrow",
        "bg",
        "portalProps"
    ]);
    if (bg) {
        styles.bg = bg;
        styles[_popper.popperCSSVars.arrowBg["var"]] = _utils.getCSSVar(theme, "colors", bg);
    }
    var tooltip = _useTooltip.useTooltip(rest);
    var shouldWrap = _utils.isString(children) || shouldWrapChildren;
    var trigger;
    if (shouldWrap) trigger = /*#__PURE__*/ React.createElement(_system.chakra.span, _extends({
        tabIndex: 0
    }, tooltip.getTriggerProps()), children);
    else {
        /**
     * Ensure tooltip has only one child node
     */ var child = React.Children.only(children);
        trigger = /*#__PURE__*/ React.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));
    }
    var hasAriaLabel = !!ariaLabel;
    var _tooltipProps = tooltip.getTooltipProps({
    }, ref);
    var tooltipProps = hasAriaLabel ? _utils.omit(_tooltipProps, [
        "role",
        "id"
    ]) : _tooltipProps;
    var hiddenProps = _utils.pick(_tooltipProps, [
        "role",
        "id"
    ]);
    /**
   * If the `label` is empty, there's no
   * point showing the tooltip. Let's simply return back the children
   */ if (!label) return(/*#__PURE__*/ React.createElement(React.Fragment, null, children));
    return(/*#__PURE__*/ React.createElement(React.Fragment, null, trigger, /*#__PURE__*/ React.createElement(_framerMotion.AnimatePresence, null, tooltip.isOpen && /*#__PURE__*/ React.createElement(_portal.Portal, portalProps, /*#__PURE__*/ React.createElement(_system.chakra.div, _extends({
    }, tooltip.getTooltipPositionerProps(), {
        __css: {
            zIndex: styles.zIndex,
            pointerEvents: "none"
        }
    }), /*#__PURE__*/ React.createElement(StyledTooltip, _extends({
        variants: _tooltip.scale
    }, tooltipProps, {
        initial: "exit",
        animate: "enter",
        exit: "exit",
        __css: styles
    }), label, hasAriaLabel && /*#__PURE__*/ React.createElement(_visuallyHidden.VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/ React.createElement(_system.chakra.div, {
        "data-popper-arrow": true,
        className: "chakra-tooltip__arrow-wrapper"
    }, /*#__PURE__*/ React.createElement(_system.chakra.div, {
        "data-popper-arrow-inner": true,
        className: "chakra-tooltip__arrow",
        __css: {
            bg: styles.bg
        }
    }))))))));
});
exports.Tooltip = Tooltip;
if (_utils.__DEV__) Tooltip.displayName = "Tooltip";

},{"@chakra-ui/popper":"5zSIv","@chakra-ui/portal":"5cHLt","@chakra-ui/system":"4QBuE","@chakra-ui/utils":"3364O","@chakra-ui/visually-hidden":"77YGo","framer-motion":"5ufJB","react":"3f97z","./tooltip.transition":"2Kcro","./use-tooltip":"53yo8"}],"2Kcro":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.scale = void 0;
var scale = {
    exit: {
        scale: 0.85,
        opacity: 0,
        transition: {
            opacity: {
                duration: 0.15,
                easings: "easeInOut"
            },
            scale: {
                duration: 0.2,
                easings: "easeInOut"
            }
        }
    },
    enter: {
        scale: 1,
        opacity: 1,
        transition: {
            opacity: {
                easings: "easeOut",
                duration: 0.2
            },
            scale: {
                duration: 0.2,
                ease: [
                    0.175,
                    0.885,
                    0.4,
                    1.1
                ]
            }
        }
    }
};
exports.scale = scale;

},{}],"53yo8":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.useTooltip = useTooltip;
var _hooks = require("@chakra-ui/hooks");
var _popper = require("@chakra-ui/popper");
var _utils = require("@chakra-ui/utils");
var _reactUtils = require("@chakra-ui/react-utils");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useTooltip(props) {
    if (props === void 0) props = {
    };
    var _props = props, _props$openDelay = _props.openDelay, openDelay = _props$openDelay === void 0 ? 0 : _props$openDelay, _props$closeDelay = _props.closeDelay, closeDelay = _props$closeDelay === void 0 ? 0 : _props$closeDelay, _props$closeOnClick = _props.closeOnClick, closeOnClick = _props$closeOnClick === void 0 ? true : _props$closeOnClick, closeOnMouseDown = _props.closeOnMouseDown, onOpenProp = _props.onOpen, onCloseProp = _props.onClose, placement = _props.placement, id = _props.id, isOpenProp = _props.isOpen, defaultIsOpen = _props.defaultIsOpen, _props$arrowSize = _props.arrowSize, arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize, arrowShadowColor = _props.arrowShadowColor, arrowPadding = _props.arrowPadding, modifiers = _props.modifiers, isDisabled = _props.isDisabled, gutter = _props.gutter, offset = _props.offset, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "openDelay",
        "closeDelay",
        "closeOnClick",
        "closeOnMouseDown",
        "onOpen",
        "onClose",
        "placement",
        "id",
        "isOpen",
        "defaultIsOpen",
        "arrowSize",
        "arrowShadowColor",
        "arrowPadding",
        "modifiers",
        "isDisabled",
        "gutter",
        "offset"
    ]);
    var _useDisclosure = _hooks.useDisclosure({
        isOpen: isOpenProp,
        defaultIsOpen: defaultIsOpen,
        onOpen: onOpenProp,
        onClose: onCloseProp
    }), isOpen = _useDisclosure.isOpen, onOpen = _useDisclosure.onOpen, onClose = _useDisclosure.onClose;
    var _usePopper = _popper.usePopper({
        enabled: isOpen,
        placement: placement,
        arrowPadding: arrowPadding,
        modifiers: modifiers,
        gutter: gutter,
        offset: offset
    }), referenceRef = _usePopper.referenceRef, getPopperProps = _usePopper.getPopperProps, getArrowInnerProps = _usePopper.getArrowInnerProps, getArrowProps = _usePopper.getArrowProps;
    var tooltipId = _hooks.useId(id, "tooltip");
    var ref = React.useRef(null);
    var enterTimeout = React.useRef();
    var exitTimeout = React.useRef();
    var openWithDelay = React.useCallback(function() {
        if (!isDisabled) enterTimeout.current = window.setTimeout(onOpen, openDelay);
    }, [
        isDisabled,
        onOpen,
        openDelay
    ]);
    var closeWithDelay = React.useCallback(function() {
        if (enterTimeout.current) clearTimeout(enterTimeout.current);
        exitTimeout.current = window.setTimeout(onClose, closeDelay);
    }, [
        closeDelay,
        onClose
    ]);
    var onClick = React.useCallback(function() {
        if (closeOnClick) closeWithDelay();
    }, [
        closeOnClick,
        closeWithDelay
    ]);
    var onMouseDown = React.useCallback(function() {
        if (closeOnMouseDown) closeWithDelay();
    }, [
        closeOnMouseDown,
        closeWithDelay
    ]);
    var onKeyDown = function onKeyDown1(event) {
        if (isOpen && event.key === "Escape") closeWithDelay();
    };
    _hooks.useEventListener("keydown", onKeyDown);
    React.useEffect(function() {
        return function() {
            clearTimeout(enterTimeout.current);
            clearTimeout(exitTimeout.current);
        };
    }, []);
    /**
   * This allows for catching mouseleave events when the tooltip
   * trigger is disabled. There's currently a known issue in
   * React regarding the onMouseLeave polyfill.
   * @see https://github.com/facebook/react/issues/11972
   */ _hooks.useEventListener("mouseleave", closeWithDelay, ref.current);
    var getTriggerProps = React.useCallback(function(props1, _ref) {
        if (props1 === void 0) props1 = {
        };
        if (_ref === void 0) _ref = null;
        var triggerProps = _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(ref, _ref, referenceRef),
            onMouseEnter: _utils.callAllHandlers(props1.onMouseEnter, openWithDelay),
            onClick: _utils.callAllHandlers(props1.onClick, onClick),
            onMouseDown: _utils.callAllHandlers(props1.onMouseDown, onMouseDown),
            onFocus: _utils.callAllHandlers(props1.onFocus, openWithDelay),
            onBlur: _utils.callAllHandlers(props1.onBlur, closeWithDelay),
            "aria-describedby": isOpen ? tooltipId : undefined
        });
        return triggerProps;
    }, [
        openWithDelay,
        closeWithDelay,
        onMouseDown,
        isOpen,
        tooltipId,
        onClick,
        referenceRef
    ]);
    var getTooltipPositionerProps = React.useCallback(function(props1, forwardedRef) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return getPopperProps(_extends({
        }, props1, {
            style: _extends({
            }, props1.style, (_extends2 = {
            }, _extends2[_popper.popperCSSVars.arrowSize["var"]] = arrowSize ? _utils.px(arrowSize) : undefined, _extends2[_popper.popperCSSVars.arrowShadowColor["var"]] = arrowShadowColor, _extends2))
        }), forwardedRef);
    }, [
        getPopperProps,
        arrowSize,
        arrowShadowColor
    ]);
    var getTooltipProps = React.useCallback(function(props1, _ref) {
        if (props1 === void 0) props1 = {
        };
        if (_ref === void 0) _ref = null;
        var tooltipProps = _extends({
            ref: _ref
        }, htmlProps, props1, {
            id: tooltipId,
            role: "tooltip",
            style: _extends({
            }, props1.style, {
                position: "relative",
                transformOrigin: _popper.popperCSSVars.transformOrigin.varRef
            })
        });
        return tooltipProps;
    }, [
        htmlProps,
        tooltipId
    ]);
    return {
        isOpen: isOpen,
        show: openWithDelay,
        hide: closeWithDelay,
        getTriggerProps: getTriggerProps,
        getTooltipProps: getTooltipProps,
        getTooltipPositionerProps: getTooltipPositionerProps,
        getArrowProps: getArrowProps,
        getArrowInnerProps: getArrowInnerProps
    };
}

},{"@chakra-ui/hooks":"ak6Dj","@chakra-ui/popper":"5zSIv","@chakra-ui/utils":"3364O","@chakra-ui/react-utils":"5UBnZ","react":"3f97z"}],"16xhV":[function(require,module,exports) {
var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _react1 = require("@chakra-ui/react");
const Source = ({ gridRow  })=>{
    return(/*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "auto",
        height: "fit-content",
        templateColumns: "repeat(8, 1fr)",
        gridRow: gridRow,
        gridColumn: "1 / 3",
        gap: 3,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 14
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Heading, {
        as: "h2",
        fontSize: "18px",
        letterSpacing: "-0.03em",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 15
        },
        __self: undefined
    }, "Source:"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 16
        },
        __self: undefined
    }, "Load"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 17
        },
        __self: undefined
    }, "Play"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 18
        },
        __self: undefined
    }, "Pause"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 19
        },
        __self: undefined
    }, "Stop"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 20
        },
        __self: undefined
    }, "Toggle"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 21
        },
        __self: undefined
    }, "+15"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Source.tsx",
            lineNumber: 22
        },
        __self: undefined
    }, "-15")));
};
_c = Source;
exports.default = Source;
var _c;
$RefreshReg$(_c, "Source");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3f97z","@chakra-ui/react":"6hzyz","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"367CR":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"MuN9l":[function(require,module,exports) {
var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _react1 = require("@chakra-ui/react");
const Details = ()=>{
    return(/*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "1fr 1fr",
        templateRows: "repeat(3, max-content)",
        gridRow: "5 / 6",
        gridColumn: "2 / 3",
        gap: 3,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 10
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Heading, {
        as: "h2",
        fontSize: "18px",
        letterSpacing: "-0.03em",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 11
        },
        __self: undefined
    }, "State"), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateRows: "repeat(5, max-content)",
        gridRow: "2 / 3",
        gridColumn: "1 / 2",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 13
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 14
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 15
        },
        __self: undefined
    }, "Loading: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 16
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 19
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 20
        },
        __self: undefined
    }, "Ready: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 21
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 24
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 25
        },
        __self: undefined
    }, "Playing: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 26
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 29
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 30
        },
        __self: undefined
    }, "Paused: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 31
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 34
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 35
        },
        __self: undefined
    }, "Stopped: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 36
        },
        __self: undefined
    }, "false"))), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateRows: "repeat(5, max-content)",
        gridRow: "2 / 3",
        gridColumn: "2 / 3",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 40
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 41
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 42
        },
        __self: undefined
    }, "Loop: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 43
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 46
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 47
        },
        __self: undefined
    }, "Volume: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 48
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 51
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 52
        },
        __self: undefined
    }, "Seek: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 53
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 56
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 57
        },
        __self: undefined
    }, "Rate: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 58
        },
        __self: undefined
    }, "false")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "70px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 61
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 62
        },
        __self: undefined
    }, "Ended: "), /*#__PURE__*/ _react.createElement(_react1.Text, {
        fontWeight: "bold",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Details.tsx",
            lineNumber: 63
        },
        __self: undefined
    }, "false")))));
};
_c = Details;
exports.default = Details;
var _c;
$RefreshReg$(_c, "Details");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3f97z","@chakra-ui/react":"6hzyz","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"5esTL":[function(require,module,exports) {
var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _react1 = require("@chakra-ui/react");
const Controls = ()=>{
    return(/*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateRows: "repeat(auto-fill, max-content)",
        gridRow: "5 / 6",
        gridColumn: "1 / 2",
        gap: 3,
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 14
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "60px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 15
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 16
        },
        __self: undefined
    }, "Seek"), /*#__PURE__*/ _react.createElement(_react1.Slider, {
        "aria-label": "slider-ex-1",
        width: "200px",
        defaultValue: 0,
        colorScheme: "blue",
        value: 0,
        onChange: ()=>{
        },
        min: 0,
        max: 100,
        step: 0.1,
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 17
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.SliderTrack, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 27
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.SliderFilledTrack, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 28
        },
        __self: undefined
    })), /*#__PURE__*/ _react.createElement(_react1.SliderThumb, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 30
        },
        __self: undefined
    }))), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "60px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 34
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 35
        },
        __self: undefined
    }, "Volume"), /*#__PURE__*/ _react.createElement(_react1.Slider, {
        "aria-label": "slider-ex-1",
        width: "200px",
        colorScheme: "blue",
        value: 0,
        onChange: ()=>{
        },
        min: 0,
        max: 1,
        step: 0.1,
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 36
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.SliderTrack, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 45
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.SliderFilledTrack, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 46
        },
        __self: undefined
    })), /*#__PURE__*/ _react.createElement(_react1.SliderThumb, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 48
        },
        __self: undefined
    }))), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "60px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 52
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 53
        },
        __self: undefined
    }, "Rate"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 54
        },
        __self: undefined
    }, "Change to 0.5")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "60px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 57
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 58
        },
        __self: undefined
    }, "Mute"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 59
        },
        __self: undefined
    }, "Mute")), /*#__PURE__*/ _react.createElement(_react1.Grid, {
        width: "fit-content",
        height: "auto",
        templateColumns: "60px max-content",
        gap: 2,
        alignItems: "center",
        justifyContent: "center",
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 62
        },
        __self: undefined
    }, /*#__PURE__*/ _react.createElement(_react1.Text, {
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 63
        },
        __self: undefined
    }, "Loop"), /*#__PURE__*/ _react.createElement(_react1.Button, {
        type: "button",
        onClick: ()=>{
        },
        __source: {
            fileName: "/Users/user/Desktop/Leonardo/Projects/React/roover/example/components/Controls.tsx",
            lineNumber: 64
        },
        __self: undefined
    }, "Loop"))));
};
_c = Controls;
exports.default = Controls;
var _c;
$RefreshReg$(_c, "Controls");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react":"3f97z","@chakra-ui/react":"6hzyz","@parcel/transformer-js/src/esmodule-helpers.js":"367CR","../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}]},["1j6wU","3zRy2","5fwok"], "5fwok", "parcelRequiree533")

//# sourceMappingURL=index.HASH_REF_778cbd9f44f08f53b7e06ab0250eb332.js.map
