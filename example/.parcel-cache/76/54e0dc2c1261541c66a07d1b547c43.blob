"use strict";
exports.__esModule = true;
exports.useRadioGroup = useRadioGroup;
var _hooks = require("@chakra-ui/hooks");
var _utils = require("@chakra-ui/utils");
var React = _interopRequireWildcard(require("react"));
var _reactUtils = require("@chakra-ui/react-utils");
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        "default": obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj["default"] = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * React hook to manage a group of radio inputs
 */ function useRadioGroup(props) {
    if (props === void 0) props = {
    };
    var _props = props, onChangeProp = _props.onChange, valueProp = _props.value, defaultValue = _props.defaultValue, nameProp = _props.name, isNative = _props.isNative, htmlProps = _objectWithoutPropertiesLoose(_props, [
        "onChange",
        "value",
        "defaultValue",
        "name",
        "isNative"
    ]);
    var _React$useState = React.useState(defaultValue || ""), valueState = _React$useState[0], setValue = _React$useState[1];
    var _useControllableProp = _hooks.useControllableProp(valueProp, valueState), isControlled = _useControllableProp[0], value = _useControllableProp[1];
    var ref = React.useRef(null);
    var focus = React.useCallback(function() {
        var rootNode = ref.current;
        if (!rootNode) return;
        var query = "input:not(:disabled):checked";
        var firstEnabledAndCheckedInput = rootNode.querySelector(query);
        if (firstEnabledAndCheckedInput) {
            firstEnabledAndCheckedInput.focus();
            return;
        }
        query = "input:not(:disabled)";
        var firstEnabledInput = rootNode.querySelector(query);
        firstEnabledInput == null || firstEnabledInput.focus();
    }, []);
    /**
   * All radio options must use the same name
   */ var fallbackName = _hooks.useId(undefined, "radio");
    var name = nameProp || fallbackName;
    var onChange = React.useCallback(function(eventOrValue) {
        var nextValue = _utils.isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
        if (!isControlled) setValue(nextValue);
        onChangeProp == null || onChangeProp(String(nextValue));
    }, [
        onChangeProp,
        isControlled
    ]);
    var getRootProps = React.useCallback(function(props1, forwardedRef) {
        if (props1 === void 0) props1 = {
        };
        if (forwardedRef === void 0) forwardedRef = null;
        return _extends({
        }, props1, {
            ref: _reactUtils.mergeRefs(forwardedRef, ref),
            role: "radiogroup"
        });
    }, []);
    var getRadioProps = React.useCallback(function(props1, ref1) {
        var _extends2;
        if (props1 === void 0) props1 = {
        };
        if (ref1 === void 0) ref1 = null;
        var checkedKey = isNative ? "checked" : "isChecked";
        return _extends({
        }, props1, (_extends2 = {
            ref: ref1,
            name: name
        }, _extends2[checkedKey] = value != null ? props1.value === value : undefined, _extends2.onChange = onChange, _extends2["data-radiogroup"] = true, _extends2));
    }, [
        isNative,
        name,
        onChange,
        value
    ]);
    return {
        getRootProps: getRootProps,
        getRadioProps: getRadioProps,
        name: name,
        ref: ref,
        focus: focus,
        setValue: setValue,
        value: value,
        onChange: onChange,
        htmlProps: htmlProps
    };
}
